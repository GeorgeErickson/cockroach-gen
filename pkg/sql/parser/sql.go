// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:24
package parser

import __yyfmt__ "fmt"

//line sql.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:56

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: tblDef().
//
func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() tree.TableNameReferences {
	return u.val.(tree.TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql.y:543
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INTERLEAVE = lex.INTERLEAVE
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:7672

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 55,
	403, 55,
	-2, 840,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	159, 678,
	-2, 0,
	-1, 58,
	101, 840,
	163, 840,
	352, 840,
	353, 840,
	-2, 0,
	-1, 71,
	112, 814,
	123, 814,
	171, 814,
	196, 814,
	224, 814,
	231, 814,
	349, 814,
	-2, 803,
	-1, 105,
	186, 514,
	340, 514,
	-2, 0,
	-1, 110,
	4, 842,
	20, 842,
	21, 842,
	22, 842,
	23, 842,
	25, 842,
	30, 842,
	35, 842,
	36, 842,
	37, 842,
	38, 842,
	39, 842,
	40, 842,
	41, 842,
	42, 842,
	43, 842,
	44, 842,
	46, 842,
	47, 842,
	48, 842,
	49, 842,
	50, 842,
	51, 842,
	54, 842,
	55, 842,
	56, 842,
	58, 842,
	59, 842,
	63, 842,
	64, 842,
	65, 842,
	66, 842,
	67, 842,
	69, 842,
	70, 842,
	71, 842,
	72, 842,
	74, 842,
	76, 842,
	77, 842,
	80, 842,
	81, 842,
	82, 842,
	90, 842,
	91, 842,
	92, 842,
	93, 842,
	94, 842,
	95, 842,
	96, 842,
	97, 842,
	99, 842,
	101, 842,
	103, 842,
	106, 842,
	107, 842,
	109, 842,
	113, 842,
	114, 842,
	115, 842,
	116, 842,
	117, 842,
	118, 842,
	119, 842,
	120, 842,
	128, 842,
	129, 842,
	130, 842,
	131, 842,
	132, 842,
	134, 842,
	136, 842,
	140, 842,
	142, 842,
	143, 842,
	145, 842,
	147, 842,
	148, 842,
	149, 842,
	150, 842,
	151, 842,
	152, 842,
	153, 842,
	154, 842,
	157, 842,
	158, 842,
	160, 842,
	163, 842,
	164, 842,
	165, 842,
	166, 842,
	167, 842,
	168, 842,
	169, 842,
	170, 842,
	172, 842,
	174, 842,
	176, 842,
	177, 842,
	178, 842,
	180, 842,
	181, 842,
	184, 842,
	185, 842,
	186, 842,
	188, 842,
	189, 842,
	191, 842,
	193, 842,
	194, 842,
	197, 842,
	198, 842,
	201, 842,
	203, 842,
	206, 842,
	207, 842,
	208, 842,
	209, 842,
	210, 842,
	212, 842,
	213, 842,
	214, 842,
	215, 842,
	219, 842,
	220, 842,
	221, 842,
	222, 842,
	223, 842,
	225, 842,
	227, 842,
	228, 842,
	229, 842,
	232, 842,
	233, 842,
	235, 842,
	237, 842,
	238, 842,
	239, 842,
	240, 842,
	241, 842,
	242, 842,
	243, 842,
	244, 842,
	246, 842,
	247, 842,
	248, 842,
	249, 842,
	250, 842,
	252, 842,
	253, 842,
	254, 842,
	255, 842,
	256, 842,
	257, 842,
	258, 842,
	259, 842,
	261, 842,
	262, 842,
	263, 842,
	264, 842,
	265, 842,
	267, 842,
	268, 842,
	269, 842,
	270, 842,
	271, 842,
	272, 842,
	273, 842,
	275, 842,
	278, 842,
	279, 842,
	280, 842,
	281, 842,
	282, 842,
	284, 842,
	285, 842,
	286, 842,
	287, 842,
	288, 842,
	290, 842,
	291, 842,
	292, 842,
	293, 842,
	294, 842,
	295, 842,
	296, 842,
	297, 842,
	298, 842,
	300, 842,
	301, 842,
	302, 842,
	303, 842,
	305, 842,
	306, 842,
	307, 842,
	308, 842,
	310, 842,
	311, 842,
	312, 842,
	313, 842,
	314, 842,
	315, 842,
	316, 842,
	317, 842,
	318, 842,
	320, 842,
	321, 842,
	323, 842,
	324, 842,
	326, 842,
	327, 842,
	328, 842,
	329, 842,
	330, 842,
	331, 842,
	332, 842,
	333, 842,
	335, 842,
	336, 842,
	337, 842,
	340, 842,
	341, 842,
	342, 842,
	343, 842,
	345, 842,
	346, 842,
	347, 842,
	348, 842,
	351, 842,
	352, 842,
	353, 842,
	354, 842,
	356, 842,
	358, 842,
	359, 842,
	360, 842,
	361, 842,
	362, 842,
	363, 842,
	366, 842,
	371, 842,
	372, 842,
	374, 842,
	375, 842,
	376, 842,
	-2, 0,
	-1, 130,
	112, 813,
	123, 813,
	171, 813,
	196, 813,
	224, 813,
	231, 813,
	349, 813,
	-2, 806,
	-1, 135,
	1, 736,
	176, 736,
	252, 736,
	256, 736,
	402, 736,
	403, 736,
	-2, 0,
	-1, 137,
	1, 736,
	402, 736,
	403, 736,
	-2, 0,
	-1, 138,
	1, 736,
	402, 736,
	403, 736,
	-2, 0,
	-1, 139,
	1, 740,
	402, 740,
	403, 740,
	-2, 0,
	-1, 165,
	4, 849,
	5, 849,
	6, 849,
	7, 849,
	8, 849,
	9, 849,
	20, 849,
	21, 849,
	22, 849,
	23, 849,
	25, 849,
	30, 849,
	31, 849,
	35, 849,
	36, 849,
	37, 849,
	38, 849,
	39, 849,
	40, 849,
	41, 849,
	42, 849,
	43, 849,
	44, 849,
	46, 849,
	47, 849,
	48, 849,
	49, 849,
	50, 849,
	51, 849,
	52, 849,
	53, 849,
	54, 849,
	55, 849,
	56, 849,
	58, 849,
	59, 849,
	61, 849,
	63, 849,
	64, 849,
	65, 849,
	66, 849,
	67, 849,
	69, 849,
	70, 849,
	71, 849,
	72, 849,
	74, 849,
	76, 849,
	77, 849,
	79, 849,
	80, 849,
	81, 849,
	82, 849,
	84, 849,
	85, 849,
	86, 849,
	88, 849,
	89, 849,
	90, 849,
	91, 849,
	92, 849,
	93, 849,
	94, 849,
	95, 849,
	96, 849,
	97, 849,
	98, 849,
	99, 849,
	101, 849,
	103, 849,
	106, 849,
	107, 849,
	109, 849,
	113, 849,
	114, 849,
	115, 849,
	116, 849,
	117, 849,
	118, 849,
	119, 849,
	120, 849,
	121, 849,
	122, 849,
	128, 849,
	129, 849,
	130, 849,
	131, 849,
	132, 849,
	134, 849,
	136, 849,
	139, 849,
	140, 849,
	142, 849,
	143, 849,
	145, 849,
	147, 849,
	148, 849,
	149, 849,
	150, 849,
	151, 849,
	152, 849,
	153, 849,
	154, 849,
	155, 849,
	157, 849,
	158, 849,
	160, 849,
	162, 849,
	163, 849,
	164, 849,
	165, 849,
	166, 849,
	167, 849,
	168, 849,
	169, 849,
	170, 849,
	172, 849,
	174, 849,
	175, 849,
	176, 849,
	177, 849,
	178, 849,
	179, 849,
	180, 849,
	181, 849,
	184, 849,
	185, 849,
	186, 849,
	188, 849,
	189, 849,
	191, 849,
	192, 849,
	193, 849,
	194, 849,
	195, 849,
	197, 849,
	198, 849,
	201, 849,
	203, 849,
	204, 849,
	205, 849,
	206, 849,
	207, 849,
	208, 849,
	209, 849,
	210, 849,
	211, 849,
	212, 849,
	213, 849,
	214, 849,
	215, 849,
	216, 849,
	218, 849,
	219, 849,
	220, 849,
	221, 849,
	222, 849,
	223, 849,
	225, 849,
	228, 849,
	229, 849,
	232, 849,
	233, 849,
	234, 849,
	235, 849,
	236, 849,
	237, 849,
	238, 849,
	239, 849,
	240, 849,
	241, 849,
	242, 849,
	243, 849,
	244, 849,
	246, 849,
	247, 849,
	248, 849,
	249, 849,
	250, 849,
	252, 849,
	253, 849,
	254, 849,
	255, 849,
	256, 849,
	257, 849,
	258, 849,
	259, 849,
	261, 849,
	262, 849,
	263, 849,
	264, 849,
	265, 849,
	267, 849,
	268, 849,
	269, 849,
	270, 849,
	271, 849,
	272, 849,
	273, 849,
	275, 849,
	276, 849,
	278, 849,
	279, 849,
	280, 849,
	281, 849,
	282, 849,
	284, 849,
	285, 849,
	286, 849,
	287, 849,
	288, 849,
	290, 849,
	291, 849,
	292, 849,
	293, 849,
	294, 849,
	295, 849,
	296, 849,
	297, 849,
	298, 849,
	299, 849,
	300, 849,
	301, 849,
	302, 849,
	303, 849,
	304, 849,
	305, 849,
	306, 849,
	307, 849,
	308, 849,
	310, 849,
	311, 849,
	312, 849,
	313, 849,
	314, 849,
	315, 849,
	316, 849,
	317, 849,
	318, 849,
	320, 849,
	321, 849,
	323, 849,
	324, 849,
	326, 849,
	327, 849,
	328, 849,
	329, 849,
	330, 849,
	331, 849,
	332, 849,
	333, 849,
	335, 849,
	336, 849,
	337, 849,
	340, 849,
	341, 849,
	342, 849,
	343, 849,
	344, 849,
	345, 849,
	346, 849,
	347, 849,
	348, 849,
	351, 849,
	352, 849,
	353, 849,
	354, 849,
	355, 849,
	356, 849,
	358, 849,
	359, 849,
	360, 849,
	361, 849,
	362, 849,
	363, 849,
	366, 849,
	371, 849,
	372, 849,
	374, 849,
	375, 849,
	376, 849,
	377, 849,
	385, 849,
	390, 849,
	391, 849,
	392, 849,
	399, 849,
	405, 849,
	-2, 0,
	-1, 168,
	1, 55,
	403, 55,
	-2, 840,
	-1, 574,
	138, 1498,
	338, 1498,
	382, 1498,
	401, 1498,
	-2, 0,
	-1, 575,
	138, 1438,
	338, 1438,
	382, 1438,
	401, 1438,
	-2, 0,
	-1, 577,
	138, 1562,
	338, 1562,
	382, 1562,
	401, 1562,
	-2, 0,
	-1, 579,
	138, 1587,
	338, 1587,
	382, 1587,
	401, 1587,
	-2, 0,
	-1, 586,
	138, 1503,
	338, 1503,
	382, 1503,
	401, 1503,
	-2, 392,
	-1, 618,
	1, 485,
	398, 485,
	400, 485,
	402, 485,
	403, 485,
	-2, 0,
	-1, 619,
	1, 549,
	135, 549,
	398, 549,
	400, 549,
	402, 549,
	403, 549,
	-2, 0,
	-1, 625,
	1, 500,
	398, 500,
	400, 500,
	402, 500,
	403, 500,
	-2, 0,
	-1, 627,
	1, 504,
	398, 504,
	400, 504,
	402, 504,
	403, 504,
	-2, 0,
	-1, 630,
	1, 515,
	398, 515,
	400, 515,
	402, 515,
	403, 515,
	-2, 0,
	-1, 631,
	1, 520,
	398, 520,
	400, 520,
	402, 520,
	403, 520,
	-2, 0,
	-1, 635,
	1, 534,
	398, 534,
	400, 534,
	402, 534,
	403, 534,
	-2, 0,
	-1, 636,
	1, 536,
	398, 536,
	400, 536,
	402, 536,
	403, 536,
	-2, 0,
	-1, 662,
	123, 851,
	196, 851,
	224, 851,
	-2, 809,
	-1, 670,
	123, 850,
	196, 850,
	224, 850,
	-2, 807,
	-1, 697,
	399, 1678,
	-2, 1128,
	-1, 698,
	399, 1679,
	-2, 1129,
	-1, 729,
	399, 1400,
	-2, 1391,
	-1, 730,
	399, 1413,
	-2, 1404,
	-1, 731,
	399, 1414,
	-2, 1405,
	-1, 738,
	5, 1037,
	399, 1037,
	-2, 1639,
	-1, 755,
	5, 994,
	-2, 1608,
	-1, 756,
	5, 1029,
	399, 1029,
	-2, 1610,
	-1, 757,
	5, 1004,
	-2, 1611,
	-1, 758,
	5, 1003,
	-2, 1612,
	-1, 759,
	5, 1029,
	399, 1029,
	-2, 1615,
	-1, 760,
	5, 1029,
	399, 1029,
	-2, 1616,
	-1, 761,
	5, 1030,
	-2, 1619,
	-1, 762,
	5, 986,
	-2, 1620,
	-1, 763,
	5, 986,
	-2, 1621,
	-1, 766,
	5, 1011,
	-2, 1625,
	-1, 767,
	5, 996,
	-2, 1626,
	-1, 768,
	5, 997,
	-2, 1627,
	-1, 770,
	5, 987,
	-2, 1633,
	-1, 771,
	5, 988,
	-2, 1634,
	-1, 772,
	5, 989,
	-2, 1635,
	-1, 773,
	5, 990,
	-2, 1636,
	-1, 774,
	5, 991,
	-2, 1637,
	-1, 775,
	5, 992,
	-2, 1638,
	-1, 776,
	5, 954,
	-2, 1640,
	-1, 777,
	5, 955,
	-2, 1641,
	-1, 779,
	5, 986,
	-2, 1645,
	-1, 782,
	5, 995,
	-2, 1650,
	-1, 783,
	5, 993,
	-2, 1656,
	-1, 784,
	5, 1027,
	399, 1027,
	-2, 1658,
	-1, 786,
	5, 1031,
	-2, 1660,
	-1, 787,
	5, 1033,
	-2, 1661,
	-1, 788,
	5, 1035,
	-2, 1662,
	-1, 791,
	5, 1026,
	399, 1026,
	-2, 1667,
	-1, 877,
	267, 1388,
	392, 1388,
	-2, 1387,
	-1, 1014,
	242, 838,
	-2, 664,
	-1, 1023,
	226, 1408,
	-2, 0,
	-1, 1066,
	1, 258,
	398, 258,
	400, 258,
	402, 258,
	403, 258,
	-2, 812,
	-1, 1069,
	4, 1666,
	10, 1666,
	11, 1666,
	13, 1666,
	14, 1666,
	15, 1666,
	16, 1666,
	17, 1666,
	18, 1666,
	20, 1666,
	21, 1666,
	22, 1666,
	23, 1666,
	25, 1666,
	28, 1666,
	30, 1666,
	32, 1666,
	35, 1666,
	36, 1666,
	37, 1666,
	38, 1666,
	39, 1666,
	40, 1666,
	41, 1666,
	42, 1666,
	43, 1666,
	44, 1666,
	46, 1666,
	47, 1666,
	48, 1666,
	49, 1666,
	50, 1666,
	51, 1666,
	54, 1666,
	55, 1666,
	56, 1666,
	58, 1666,
	59, 1666,
	60, 1666,
	63, 1666,
	64, 1666,
	65, 1666,
	66, 1666,
	67, 1666,
	68, 1666,
	69, 1666,
	70, 1666,
	71, 1666,
	72, 1666,
	74, 1666,
	75, 1666,
	76, 1666,
	77, 1666,
	79, 1666,
	80, 1666,
	81, 1666,
	82, 1666,
	90, 1666,
	91, 1666,
	92, 1666,
	93, 1666,
	94, 1666,
	95, 1666,
	96, 1666,
	97, 1666,
	99, 1666,
	101, 1666,
	103, 1666,
	106, 1666,
	107, 1666,
	109, 1666,
	113, 1666,
	114, 1666,
	115, 1666,
	116, 1666,
	117, 1666,
	118, 1666,
	119, 1666,
	120, 1666,
	124, 1666,
	125, 1666,
	126, 1666,
	127, 1666,
	128, 1666,
	129, 1666,
	130, 1666,
	131, 1666,
	132, 1666,
	133, 1666,
	134, 1666,
	136, 1666,
	139, 1666,
	140, 1666,
	142, 1666,
	143, 1666,
	145, 1666,
	147, 1666,
	148, 1666,
	149, 1666,
	150, 1666,
	151, 1666,
	152, 1666,
	153, 1666,
	154, 1666,
	155, 1666,
	156, 1666,
	157, 1666,
	158, 1666,
	160, 1666,
	162, 1666,
	163, 1666,
	164, 1666,
	165, 1666,
	166, 1666,
	167, 1666,
	168, 1666,
	169, 1666,
	170, 1666,
	172, 1666,
	174, 1666,
	175, 1666,
	176, 1666,
	177, 1666,
	178, 1666,
	179, 1666,
	180, 1666,
	181, 1666,
	182, 1666,
	183, 1666,
	184, 1666,
	185, 1666,
	186, 1666,
	188, 1666,
	189, 1666,
	191, 1666,
	192, 1666,
	193, 1666,
	194, 1666,
	195, 1666,
	197, 1666,
	198, 1666,
	201, 1666,
	202, 1666,
	203, 1666,
	206, 1666,
	207, 1666,
	208, 1666,
	209, 1666,
	210, 1666,
	211, 1666,
	212, 1666,
	213, 1666,
	214, 1666,
	215, 1666,
	219, 1666,
	220, 1666,
	221, 1666,
	222, 1666,
	223, 1666,
	225, 1666,
	228, 1666,
	229, 1666,
	230, 1666,
	232, 1666,
	233, 1666,
	235, 1666,
	237, 1666,
	238, 1666,
	239, 1666,
	240, 1666,
	241, 1666,
	242, 1666,
	243, 1666,
	244, 1666,
	246, 1666,
	247, 1666,
	248, 1666,
	249, 1666,
	250, 1666,
	252, 1666,
	253, 1666,
	254, 1666,
	255, 1666,
	256, 1666,
	257, 1666,
	258, 1666,
	259, 1666,
	261, 1666,
	262, 1666,
	263, 1666,
	264, 1666,
	265, 1666,
	266, 1666,
	267, 1666,
	268, 1666,
	269, 1666,
	270, 1666,
	271, 1666,
	272, 1666,
	273, 1666,
	275, 1666,
	276, 1666,
	278, 1666,
	279, 1666,
	280, 1666,
	281, 1666,
	282, 1666,
	283, 1666,
	284, 1666,
	285, 1666,
	286, 1666,
	287, 1666,
	288, 1666,
	290, 1666,
	291, 1666,
	292, 1666,
	293, 1666,
	294, 1666,
	295, 1666,
	296, 1666,
	297, 1666,
	298, 1666,
	300, 1666,
	301, 1666,
	302, 1666,
	303, 1666,
	304, 1666,
	305, 1666,
	306, 1666,
	307, 1666,
	308, 1666,
	310, 1666,
	311, 1666,
	312, 1666,
	313, 1666,
	314, 1666,
	315, 1666,
	316, 1666,
	317, 1666,
	318, 1666,
	320, 1666,
	321, 1666,
	323, 1666,
	324, 1666,
	326, 1666,
	327, 1666,
	328, 1666,
	329, 1666,
	330, 1666,
	331, 1666,
	332, 1666,
	333, 1666,
	335, 1666,
	336, 1666,
	337, 1666,
	340, 1666,
	341, 1666,
	342, 1666,
	343, 1666,
	345, 1666,
	346, 1666,
	347, 1666,
	348, 1666,
	351, 1666,
	352, 1666,
	353, 1666,
	354, 1666,
	356, 1666,
	358, 1666,
	359, 1666,
	360, 1666,
	361, 1666,
	362, 1666,
	363, 1666,
	366, 1666,
	371, 1666,
	372, 1666,
	374, 1666,
	375, 1666,
	376, 1666,
	377, 1666,
	378, 1666,
	380, 1666,
	381, 1666,
	382, 1666,
	383, 1666,
	384, 1666,
	385, 1666,
	387, 1666,
	388, 1666,
	389, 1666,
	390, 1666,
	391, 1666,
	392, 1666,
	393, 1666,
	394, 1666,
	395, 1666,
	397, 1666,
	400, 1666,
	401, 1666,
	404, 1666,
	405, 1666,
	-2, 0,
	-1, 1087,
	138, 1562,
	338, 1562,
	382, 1562,
	401, 1562,
	-2, 0,
	-1, 1112,
	138, 1587,
	338, 1587,
	382, 1587,
	401, 1587,
	-2, 0,
	-1, 1113,
	176, 748,
	252, 748,
	256, 748,
	-2, 380,
	-1, 1185,
	123, 850,
	196, 850,
	224, 850,
	-2, 810,
	-1, 1264,
	112, 814,
	123, 814,
	171, 814,
	196, 814,
	224, 814,
	231, 814,
	349, 814,
	-2, 1169,
	-1, 1310,
	400, 1283,
	-2, 0,
	-1, 1318,
	176, 748,
	252, 748,
	256, 748,
	-2, 743,
	-1, 1347,
	400, 1283,
	-2, 0,
	-1, 1351,
	112, 814,
	123, 814,
	171, 814,
	196, 814,
	224, 814,
	231, 814,
	349, 814,
	-2, 913,
	-1, 1544,
	176, 748,
	252, 748,
	256, 748,
	-2, 382,
	-1, 1649,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	182, 0,
	183, 0,
	380, 0,
	381, 0,
	382, 0,
	383, 0,
	384, 0,
	-2, 1072,
	-1, 1650,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	182, 0,
	183, 0,
	380, 0,
	381, 0,
	382, 0,
	383, 0,
	384, 0,
	-2, 1073,
	-1, 1651,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	182, 0,
	183, 0,
	380, 0,
	381, 0,
	382, 0,
	383, 0,
	384, 0,
	-2, 1074,
	-1, 1652,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	182, 0,
	183, 0,
	380, 0,
	381, 0,
	382, 0,
	383, 0,
	384, 0,
	-2, 1075,
	-1, 1653,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	182, 0,
	183, 0,
	380, 0,
	381, 0,
	382, 0,
	383, 0,
	384, 0,
	-2, 1076,
	-1, 1654,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	182, 0,
	183, 0,
	380, 0,
	381, 0,
	382, 0,
	383, 0,
	384, 0,
	-2, 1077,
	-1, 1655,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	182, 0,
	183, 0,
	380, 0,
	381, 0,
	382, 0,
	383, 0,
	384, 0,
	-2, 1078,
	-1, 1656,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	182, 0,
	183, 0,
	380, 0,
	381, 0,
	382, 0,
	383, 0,
	384, 0,
	-2, 1079,
	-1, 1665,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	182, 0,
	183, 0,
	380, 0,
	381, 0,
	382, 0,
	383, 0,
	384, 0,
	-2, 1088,
	-1, 1666,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	182, 0,
	183, 0,
	380, 0,
	381, 0,
	382, 0,
	383, 0,
	384, 0,
	-2, 1089,
	-1, 1667,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	182, 0,
	183, 0,
	380, 0,
	381, 0,
	382, 0,
	383, 0,
	384, 0,
	-2, 1090,
	-1, 1670,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	155, 0,
	156, 0,
	195, 0,
	304, 0,
	377, 0,
	385, 0,
	-2, 1095,
	-1, 1676,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	155, 0,
	156, 0,
	195, 0,
	304, 0,
	377, 0,
	385, 0,
	-2, 1097,
	-1, 1678,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	155, 0,
	156, 0,
	195, 0,
	304, 0,
	377, 0,
	385, 0,
	-2, 1101,
	-1, 1679,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	155, 0,
	156, 0,
	195, 0,
	304, 0,
	377, 0,
	385, 0,
	-2, 1102,
	-1, 1680,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	155, 0,
	156, 0,
	195, 0,
	304, 0,
	377, 0,
	385, 0,
	-2, 1103,
	-1, 1681,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	155, 0,
	156, 0,
	195, 0,
	304, 0,
	377, 0,
	385, 0,
	-2, 1104,
	-1, 1758,
	138, 1294,
	399, 1413,
	-2, 1404,
	-1, 1759,
	138, 1295,
	-2, 1604,
	-1, 1760,
	138, 1296,
	-2, 1502,
	-1, 1761,
	138, 1297,
	-2, 1458,
	-1, 1762,
	138, 1298,
	-2, 1478,
	-1, 1763,
	138, 1299,
	-2, 1501,
	-1, 1764,
	138, 1300,
	-2, 1558,
	-1, 1839,
	1, 914,
	79, 914,
	112, 914,
	123, 914,
	139, 914,
	144, 914,
	146, 914,
	162, 914,
	171, 914,
	179, 914,
	192, 914,
	196, 914,
	211, 914,
	224, 914,
	226, 914,
	231, 914,
	274, 914,
	276, 914,
	349, 914,
	357, 914,
	368, 914,
	369, 914,
	379, 914,
	398, 914,
	400, 914,
	402, 914,
	403, 914,
	404, 914,
	-2, 913,
	-1, 1841,
	399, 1392,
	-2, 1402,
	-1, 1917,
	400, 1351,
	404, 1351,
	-2, 1380,
	-1, 2034,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	155, 0,
	156, 0,
	195, 0,
	304, 0,
	377, 0,
	385, 0,
	-2, 1096,
	-1, 2035,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	155, 0,
	156, 0,
	195, 0,
	304, 0,
	377, 0,
	385, 0,
	-2, 1098,
	-1, 2040,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	155, 0,
	156, 0,
	195, 0,
	304, 0,
	377, 0,
	385, 0,
	-2, 1099,
	-1, 2058,
	236, 1254,
	-2, 1256,
	-1, 2260,
	242, 838,
	-2, 664,
	-1, 2321,
	176, 748,
	252, 748,
	256, 748,
	-2, 379,
	-1, 2335,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	155, 0,
	156, 0,
	195, 0,
	304, 0,
	377, 0,
	385, 0,
	-2, 1100,
	-1, 2340,
	175, 0,
	-2, 1116,
	-1, 2349,
	236, 1255,
	-2, 1257,
	-1, 2399,
	13, 0,
	14, 0,
	15, 0,
	380, 0,
	381, 0,
	382, 0,
	-2, 1146,
	-1, 2400,
	13, 0,
	14, 0,
	15, 0,
	380, 0,
	381, 0,
	382, 0,
	-2, 1147,
	-1, 2401,
	13, 0,
	14, 0,
	15, 0,
	380, 0,
	381, 0,
	382, 0,
	-2, 1148,
	-1, 2405,
	13, 0,
	14, 0,
	15, 0,
	380, 0,
	381, 0,
	382, 0,
	-2, 1152,
	-1, 2406,
	13, 0,
	14, 0,
	15, 0,
	380, 0,
	381, 0,
	382, 0,
	-2, 1153,
	-1, 2407,
	13, 0,
	14, 0,
	15, 0,
	380, 0,
	381, 0,
	382, 0,
	-2, 1154,
	-1, 2446,
	399, 1393,
	-2, 1403,
	-1, 2557,
	175, 0,
	-2, 1117,
	-1, 2560,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	155, 0,
	156, 0,
	195, 0,
	304, 0,
	377, 0,
	385, 0,
	-2, 1120,
	-1, 2561,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	155, 0,
	156, 0,
	195, 0,
	304, 0,
	377, 0,
	385, 0,
	-2, 1122,
	-1, 2702,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	155, 0,
	156, 0,
	195, 0,
	304, 0,
	377, 0,
	385, 0,
	-2, 1121,
	-1, 2703,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	155, 0,
	156, 0,
	195, 0,
	304, 0,
	377, 0,
	385, 0,
	-2, 1123,
	-1, 2713,
	175, 0,
	-2, 1155,
	-1, 2800,
	175, 0,
	-2, 1156,
	-1, 2897,
	38, 0,
	155, 0,
	195, 0,
	304, 0,
	377, 0,
	385, 0,
	-2, 1607,
}

const sqlPrivate = 57344

const sqlLast = 53503

var sqlAct = [...]int{

	731, 2953, 1707, 2496, 2905, 2658, 2958, 1942, 2740, 2896,
	2875, 2872, 2860, 2873, 2906, 2730, 2907, 2370, 2895, 1950,
	999, 2671, 2804, 1985, 1056, 2512, 1636, 2612, 2627, 2693,
	1693, 2267, 705, 1188, 2517, 987, 2028, 881, 1833, 671,
	208, 1472, 1350, 1471, 208, 2456, 2307, 2274, 2279, 1919,
	2718, 208, 1020, 1915, 2305, 896, 2177, 1345, 208, 728,
	208, 1059, 2533, 208, 208, 1939, 208, 208, 1052, 1951,
	2269, 2592, 2135, 208, 1410, 2153, 1268, 1326, 890, 1424,
	1423, 208, 1376, 1445, 1429, 1420, 1853, 506, 2164, 1834,
	2189, 1827, 1918, 679, 124, 753, 2424, 2134, 2805, 1432,
	1904, 1271, 1627, 527, 27, 1706, 2070, 1844, 1705, 1622,
	2024, 1582, 1318, 1905, 1732, 2243, 2278, 1392, 503, 1398,
	1361, 1836, 1569, 1878, 2457, 1421, 458, 714, 1714, 1327,
	1690, 1879, 1359, 1115, 539, 874, 1294, 1726, 1298, 1916,
	723, 1049, 1922, 1354, 1944, 883, 1067, 1819, 848, 1259,
	830, 2455, 124, 1336, 565, 695, 852, 1187, 70, 1804,
	208, 208, 1568, 1754, 1189, 722, 204, 130, 198, 582,
	542, 1795, 578, 1039, 2659, 1439, 828, 1036, 203, 500,
	1317, 2057, 610, 131, 551, 1193, 2440, 1986, 1447, 2441,
	204, 208, 208, 208, 886, 208, 208, 899, 899, 1447,
	558, 1943, 208, 208, 675, 1447, 2986, 2980, 1204, 1205,
	1813, 1813, 2979, 2951, 2929, 2928, 1813, 1406, 2626, 2626,
	2923, 2922, 2919, 2916, 1813, 1813, 2920, 2917, 1813, 1204,
	1205, 2913, 553, 1207, 675, 1406, 2893, 2285, 670, 2892,
	1406, 2891, 2890, 1406, 2855, 1459, 1459, 2842, 1979, 2833,
	1346, 1406, 2831, 2626, 1207, 879, 2626, 685, 1206, 2333,
	1204, 1205, 124, 850, 893, 2802, 2788, 2776, 2311, 1979,
	2540, 2626, 27, 1204, 1205, 1401, 2774, 992, 2286, 1206,
	2626, 831, 831, 2771, 2769, 1207, 2759, 1406, 2626, 2758,
	1406, 676, 663, 1406, 2257, 2751, 2750, 2724, 1207, 1406,
	2626, 1406, 2704, 2652, 2856, 2648, 1979, 1813, 662, 1813,
	1206, 845, 2789, 1906, 2625, 1806, 680, 727, 2626, 877,
	2559, 2531, 2523, 1206, 1979, 2524, 2524, 1459, 204, 2436,
	2430, 1212, 2344, 2437, 1813, 1098, 1813, 832, 2427, 867,
	871, 876, 1406, 1204, 1205, 1971, 1234, 1235, 1236, 1244,
	1245, 1246, 1212, 2298, 2150, 2100, 2099, 2249, 1813, 1813,
	1813, 1237, 2093, 2105, 2106, 2091, 2094, 2061, 1207, 1813,
	1996, 1248, 1978, 2062, 1813, 1089, 1979, 1813, 1967, 1406,
	1729, 1910, 1813, 1212, 1812, 1406, 1463, 834, 1813, 835,
	1464, 2427, 1805, 1206, 1547, 2540, 1212, 1894, 1842, 2412,
	1227, 1226, 2346, 2249, 2027, 2007, 1322, 2069, 1223, 1448,
	1709, 990, 168, 2287, 1086, 1085, 1084, 165, 1083, 1082,
	1448, 1227, 1081, 1830, 1080, 1079, 1448, 1078, 165, 534,
	1077, 1076, 2288, 2605, 1730, 1075, 1074, 1073, 1072, 1914,
	39, 1090, 1987, 1566, 1071, 1070, 836, 833, 669, 668,
	667, 666, 1227, 167, 42, 665, 661, 1229, 1230, 1231,
	1232, 660, 659, 658, 167, 1227, 1212, 208, 208, 208,
	886, 886, 208, 657, 2566, 208, 1459, 656, 208, 655,
	654, 1228, 533, 653, 208, 652, 2111, 651, 1241, 1249,
	166, 1731, 1728, 647, 208, 208, 208, 208, 208, 886,
	886, 166, 1228, 646, 645, 608, 886, 607, 1247, 159,
	606, 535, 605, 604, 603, 1221, 1222, 160, 57, 537,
	602, 601, 58, 600, 1060, 1204, 1205, 132, 1239, 599,
	2525, 1014, 1017, 1228, 1090, 1227, 598, 208, 132, 2495,
	140, 1455, 1269, 597, 2285, 38, 1228, 596, 208, 595,
	1207, 594, 1446, 1025, 60, 2121, 39, 135, 1606, 593,
	1406, 592, 591, 1238, 590, 589, 678, 588, 208, 1947,
	42, 587, 573, 1733, 572, 1206, 1053, 571, 208, 1745,
	570, 1805, 569, 491, 44, 137, 1215, 1216, 1208, 1209,
	1210, 1211, 1213, 1214, 490, 1013, 43, 464, 49, 1233,
	2185, 1090, 463, 462, 1010, 453, 1217, 1215, 1216, 1208,
	1209, 1210, 1211, 1213, 1214, 886, 1228, 452, 188, 50,
	897, 988, 187, 52, 186, 185, 184, 56, 183, 182,
	138, 181, 1038, 180, 57, 69, 2122, 1242, 58, 1216,
	1208, 1209, 1210, 1211, 1213, 1214, 179, 61, 1212, 208,
	178, 1068, 2067, 1208, 1209, 1210, 1211, 1213, 1214, 177,
	1727, 59, 176, 175, 676, 2105, 2106, 174, 1043, 1046,
	60, 173, 172, 171, 133, 63, 1135, 64, 2105, 2106,
	170, 169, 1911, 534, 1984, 1908, 1743, 2105, 2106, 1349,
	1572, 1358, 1113, 165, 39, 1741, 2105, 2106, 1275, 1739,
	1127, 2327, 1186, 1001, 536, 994, 1266, 105, 42, 1128,
	1240, 1200, 2912, 1218, 1219, 1225, 1224, 1220, 1243, 2894,
	1217, 1215, 1216, 1208, 1209, 1210, 1211, 1213, 1214, 167,
	2877, 1204, 1205, 2252, 2866, 2796, 533, 2579, 2772, 2679,
	2116, 2114, 2115, 2107, 2108, 2109, 2110, 2112, 2113, 2591,
	1110, 2792, 2590, 1279, 2120, 2589, 1207, 2790, 2582, 2578,
	165, 2577, 2576, 61, 2572, 535, 166, 2571, 2570, 1185,
	62, 2569, 57, 537, 159, 2562, 58, 2538, 2421, 2420,
	2419, 1206, 160, 2382, 2356, 2248, 2184, 2180, 2111, 72,
	133, 63, 2148, 64, 1129, 65, 167, 1184, 2145, 139,
	2133, 2111, 2104, 132, 66, 2101, 2098, 2097, 60, 165,
	2111, 2095, 2075, 2105, 2106, 2074, 2123, 2124, 2125, 2111,
	80, 2058, 1839, 105, 1200, 208, 1567, 1880, 1701, 1468,
	208, 1199, 136, 166, 844, 2023, 2984, 2105, 2106, 2966,
	1272, 159, 1262, 2965, 1000, 167, 1333, 663, 2372, 160,
	2880, 2837, 1324, 165, 1212, 2836, 208, 2121, 2828, 1196,
	1197, 2827, 676, 662, 1201, 110, 2823, 2822, 2816, 2813,
	1946, 2120, 2787, 2786, 134, 1695, 729, 2736, 2715, 2663,
	2661, 2647, 166, 2631, 2587, 2541, 2510, 2508, 2121, 167,
	159, 2503, 2502, 1348, 2500, 2475, 1296, 1297, 160, 2474,
	2465, 61, 1300, 2464, 2432, 1208, 1209, 1210, 1211, 1213,
	1214, 2339, 2678, 2232, 2807, 2302, 1330, 1331, 1307, 132,
	2216, 2199, 4, 2198, 1343, 2149, 166, 2132, 133, 63,
	2084, 64, 2083, 2080, 159, 2170, 2111, 2054, 2122, 2049,
	1299, 124, 160, 1304, 1824, 1811, 1702, 165, 1752, 850,
	1737, 831, 1416, 1286, 1285, 2013, 720, 1284, 536, 1283,
	2111, 105, 1347, 132, 1325, 1316, 1344, 1204, 1205, 2122,
	1315, 1314, 1310, 2199, 1309, 1308, 2687, 1744, 2126, 1321,
	1306, 1305, 1302, 167, 1301, 1292, 1291, 1290, 1289, 1288,
	886, 208, 1207, 1287, 1276, 899, 1319, 1263, 1262, 1109,
	1375, 208, 899, 208, 208, 2121, 1323, 1094, 1064, 2564,
	1352, 794, 676, 2537, 2439, 2435, 2060, 1206, 1981, 1825,
	166, 2105, 2106, 1272, 208, 208, 1417, 2300, 159, 2121,
	1260, 208, 1355, 208, 1125, 208, 160, 1349, 1995, 208,
	1566, 1428, 1366, 1371, 856, 2107, 2108, 2109, 2110, 2112,
	2113, 1404, 2270, 1566, 2684, 1566, 2543, 132, 2107, 2108,
	2109, 2110, 2112, 2113, 2542, 2442, 1906, 1462, 1399, 2109,
	2110, 2112, 2113, 2116, 2114, 2115, 2107, 2108, 2109, 2110,
	2112, 2113, 1994, 1104, 1742, 2765, 2122, 2236, 208, 208,
	208, 208, 1882, 1740, 1312, 2231, 886, 1738, 208, 208,
	1313, 2227, 208, 208, 1182, 1436, 2215, 2140, 208, 1434,
	2122, 2139, 1542, 1210, 1211, 1213, 1214, 204, 2138, 2033,
	1530, 1540, 2814, 1122, 849, 1311, 2793, 1450, 899, 826,
	1452, 1413, 2791, 1454, 1553, 1281, 1987, 1457, 208, 1425,
	2313, 2226, 1388, 208, 2719, 1943, 208, 1278, 2374, 208,
	1469, 208, 1715, 208, 1176, 208, 1295, 208, 2921, 2918,
	1443, 827, 1557, 1556, 1466, 1566, 1563, 208, 2065, 1405,
	2281, 2451, 2954, 1532, 2869, 208, 208, 208, 1972, 1038,
	1534, 193, 1688, 2117, 2118, 2119, 499, 470, 2944, 1174,
	2116, 2114, 2115, 2107, 2108, 2109, 2110, 2112, 2113, 1686,
	2841, 2323, 2639, 208, 2945, 2983, 1997, 899, 1438, 1164,
	1441, 2764, 480, 1372, 820, 204, 2115, 2107, 2108, 2109,
	2110, 2112, 2113, 1609, 204, 1544, 818, 2763, 1598, 1175,
	2761, 843, 1592, 816, 1123, 1478, 1855, 1163, 1369, 465,
	822, 793, 2760, 2489, 1846, 1940, 1628, 1635, 737, 2484,
	813, 2483, 2448, 2447, 1565, 2478, 1560, 1465, 2079, 1370,
	1110, 1467, 1846, 1562, 498, 469, 1531, 1605, 2078, 2077,
	1266, 2076, 204, 1845, 481, 2036, 899, 1541, 1124, 1719,
	1970, 1554, 1362, 1729, 1899, 1363, 1682, 1570, 1558, 1893,
	1889, 1870, 1677, 1320, 1683, 1751, 1684, 989, 2656, 1790,
	1689, 1789, 1788, 1013, 1757, 1757, 2301, 1575, 1768, 1770,
	1638, 1775, 1600, 1603, 1581, 1100, 1858, 1003, 1798, 649,
	1355, 208, 548, 208, 2795, 1903, 1604, 1574, 1803, 474,
	1522, 2494, 1909, 563, 564, 2840, 1692, 1730, 2888, 1578,
	1442, 1159, 1203, 2467, 1607, 1478, 1478, 899, 1108, 208,
	564, 208, 1214, 1608, 2742, 1733, 1561, 2363, 208, 899,
	2936, 663, 2223, 208, 663, 663, 1692, 1364, 2276, 208,
	2819, 2852, 1626, 1390, 1712, 208, 1753, 1618, 1710, 639,
	1619, 1620, 1173, 2277, 1982, 2218, 1160, 208, 1826, 1838,
	886, 1162, 1387, 1799, 1731, 1728, 2105, 2106, 2853, 684,
	1373, 208, 899, 1886, 2324, 1101, 2113, 208, 1703, 2025,
	2026, 473, 1847, 1700, 2364, 2366, 1787, 208, 1407, 1873,
	208, 676, 1685, 1567, 1880, 1411, 676, 1715, 2315, 1687,
	1857, 2276, 2935, 850, 1545, 1103, 1567, 1880, 1567, 1880,
	674, 2968, 1293, 208, 831, 208, 474, 208, 497, 850,
	208, 1891, 208, 1831, 208, 2944, 208, 208, 1872, 208,
	886, 886, 886, 483, 482, 886, 1765, 640, 1447, 1900,
	208, 1859, 1861, 1801, 1867, 1800, 1733, 1699, 1181, 1602,
	194, 1816, 1697, 2322, 2485, 1965, 1966, 1851, 1821, 1822,
	1809, 1810, 1817, 1901, 1929, 2318, 1733, 1733, 1896, 673,
	1367, 1367, 1367, 189, 1872, 1850, 1881, 1883, 1884, 1885,
	1352, 454, 676, 877, 470, 496, 2909, 1865, 1478, 2111,
	2476, 1964, 1887, 1871, 1961, 1391, 2235, 468, 473, 1856,
	1931, 1890, 1138, 1395, 208, 1888, 2468, 1963, 1843, 2767,
	2699, 1851, 2710, 1945, 492, 1945, 2934, 195, 1567, 1564,
	467, 1573, 2046, 814, 1257, 715, 1170, 124, 1974, 675,
	2082, 1820, 466, 1727, 124, 814, 1956, 1954, 1362, 2044,
	1591, 1363, 815, 899, 1674, 208, 824, 2317, 675, 823,
	1002, 208, 1968, 1777, 208, 641, 1949, 475, 2121, 814,
	2961, 2314, 469, 194, 1851, 205, 1837, 2743, 1962, 459,
	2000, 2545, 471, 208, 208, 208, 476, 208, 1119, 1973,
	1068, 1969, 2002, 502, 2551, 543, 1983, 2910, 502, 205,
	1365, 543, 561, 1958, 2038, 1959, 208, 1960, 568, 197,
	1637, 470, 1171, 499, 497, 1990, 585, 1991, 1102, 1577,
	2003, 1202, 650, 196, 468, 547, 494, 1107, 1300, 2695,
	1307, 2532, 2001, 1364, 1691, 2011, 2041, 1099, 2012, 1367,
	195, 2316, 2969, 1297, 1296, 1147, 2042, 467, 1989, 2122,
	2047, 1130, 2018, 639, 642, 2209, 2908, 672, 192, 466,
	1998, 495, 2911, 124, 1120, 1397, 455, 124, 1121, 1448,
	1119, 1672, 1675, 684, 1172, 2211, 2943, 2941, 2052, 1716,
	2670, 496, 2668, 1396, 475, 2055, 2039, 1937, 2014, 469,
	643, 498, 2016, 190, 1339, 502, 502, 1935, 1419, 471,
	1332, 493, 1097, 861, 2072, 2073, 1088, 1192, 1393, 1114,
	856, 1671, 461, 2210, 1191, 2694, 1362, 1342, 2700, 1363,
	689, 2585, 197, 193, 2240, 2022, 459, 459, 459, 1394,
	891, 459, 2959, 191, 1818, 2020, 196, 205, 993, 2068,
	1403, 640, 1698, 456, 2975, 2408, 1120, 1340, 2753, 2752,
	1121, 489, 2244, 2734, 2114, 2115, 2107, 2108, 2109, 2110,
	2112, 2113, 1841, 1139, 2810, 2131, 2450, 1367, 2195, 2191,
	2635, 192, 2043, 484, 2638, 1798, 1798, 1798, 1938, 2045,
	2147, 2637, 1936, 1437, 1427, 2037, 1426, 1190, 899, 1422,
	849, 2960, 2151, 2213, 2160, 1418, 2362, 2158, 2159, 499,
	2696, 1364, 2861, 1191, 208, 1874, 190, 208, 1140, 2092,
	1595, 1137, 494, 200, 1614, 1192, 208, 1548, 2178, 2962,
	1673, 2513, 2064, 2672, 208, 208, 208, 1913, 2735, 2201,
	208, 1341, 2200, 208, 676, 2031, 193, 2182, 2167, 2586,
	208, 208, 208, 208, 208, 2174, 191, 495, 2173, 1815,
	682, 208, 639, 1814, 1912, 673, 1552, 2409, 208, 641,
	1415, 556, 2183, 2410, 2974, 3, 550, 1035, 2497, 1145,
	208, 886, 684, 2196, 208, 2250, 1190, 498, 1024, 2192,
	899, 2172, 850, 1119, 208, 2175, 1365, 493, 2634, 899,
	850, 850, 899, 2169, 850, 899, 2179, 1615, 1023, 2636,
	1033, 532, 35, 2217, 2948, 208, 683, 208, 2660, 208,
	1550, 208, 886, 886, 886, 2152, 208, 736, 208, 1875,
	1876, 676, 208, 2197, 1551, 531, 34, 208, 2239, 208,
	2155, 2203, 2225, 2207, 2208, 1367, 208, 2181, 2162, 2163,
	640, 2593, 2168, 2186, 2142, 2143, 2144, 2425, 642, 2188,
	2214, 208, 2228, 886, 1851, 1736, 1335, 530, 31, 1120,
	2970, 1360, 2272, 1121, 2202, 2245, 2205, 2950, 208, 208,
	2714, 2233, 1478, 2259, 2260, 2261, 2008, 2283, 2212, 2230,
	529, 76, 1167, 812, 643, 2219, 2220, 528, 75, 2251,
	2221, 525, 22, 2222, 2229, 485, 1013, 1366, 2234, 2584,
	2271, 2299, 459, 1009, 459, 2224, 2254, 459, 2493, 2246,
	891, 2255, 208, 1028, 2297, 991, 1339, 2136, 2262, 459,
	1366, 2338, 2290, 2291, 2292, 2295, 2293, 2294, 2732, 459,
	459, 459, 459, 891, 865, 2096, 555, 1013, 1034, 1342,
	486, 549, 2048, 2310, 1735, 1157, 2258, 1988, 899, 1399,
	2282, 2280, 2289, 1898, 1365, 1399, 1337, 1155, 641, 2733,
	2280, 1869, 1153, 208, 1409, 1180, 1179, 1095, 1151, 1340,
	35, 1032, 585, 2341, 2137, 1583, 487, 2015, 488, 1590,
	2304, 1992, 1593, 459, 1533, 676, 1515, 1282, 1338, 124,
	2321, 2358, 2359, 2360, 34, 2904, 2491, 2319, 2320, 1402,
	1478, 1149, 2326, 1105, 526, 23, 524, 29, 1628, 2378,
	2325, 2858, 2329, 585, 2328, 523, 20, 2331, 1166, 521,
	19, 817, 819, 2609, 522, 18, 31, 1628, 2388, 2422,
	1132, 2472, 2470, 511, 15, 512, 16, 520, 55, 2449,
	2345, 519, 54, 1143, 2350, 681, 2347, 642, 2266, 76,
	2264, 2383, 1941, 1341, 208, 1933, 75, 510, 53, 1932,
	22, 2371, 1930, 2418, 208, 1928, 899, 1461, 2351, 2377,
	1478, 2375, 2365, 2367, 2368, 518, 12, 509, 48, 2268,
	2385, 1156, 2444, 643, 459, 1460, 1458, 2414, 2387, 2623,
	516, 45, 2438, 1154, 856, 1456, 1515, 1515, 1152, 2482,
	1335, 517, 46, 2443, 1150, 1453, 1451, 1478, 1478, 1031,
	856, 2157, 1589, 2415, 2620, 2488, 1449, 2423, 2413, 508,
	47, 1400, 1389, 124, 515, 7, 1478, 1478, 2479, 796,
	208, 208, 2431, 208, 2426, 2428, 2429, 1148, 208, 2462,
	2486, 2781, 2492, 850, 2487, 899, 1386, 899, 1374, 2490,
	886, 514, 6, 2445, 2945, 2621, 1368, 2504, 2029, 840,
	1339, 2686, 1478, 1131, 2453, 2685, 208, 513, 37, 2471,
	1571, 2473, 2526, 23, 849, 29, 507, 36, 1194, 1142,
	2534, 841, 2783, 1342, 20, 1872, 2518, 2515, 19, 1863,
	849, 2434, 208, 18, 1846, 899, 208, 208, 899, 208,
	1337, 2477, 15, 2519, 16, 1862, 55, 2522, 2539, 1846,
	54, 2654, 2242, 1340, 899, 2242, 1514, 2501, 2247, 2514,
	1860, 2507, 2498, 1479, 2506, 1993, 53, 2030, 538, 1902,
	2499, 2516, 1338, 2549, 2520, 2527, 2509, 1897, 2511, 1892,
	1868, 2535, 2528, 2821, 12, 1030, 48, 2166, 2628, 2553,
	2546, 1538, 1539, 208, 1851, 1141, 1204, 1205, 1195, 45,
	568, 842, 850, 2558, 2798, 502, 2544, 2550, 2594, 1515,
	46, 1204, 1205, 2616, 2547, 2617, 1877, 1864, 1198, 1895,
	1866, 1207, 2857, 2666, 1948, 1934, 1927, 1802, 47, 861,
	1954, 459, 1543, 7, 557, 1470, 2957, 1341, 2296, 2973,
	2105, 2106, 1204, 1205, 1134, 2554, 1206, 1269, 2619, 1133,
	2155, 2005, 2004, 208, 2536, 2369, 2303, 2622, 2005, 2006,
	6, 1206, 1767, 899, 208, 1725, 1514, 1514, 208, 208,
	208, 2567, 2361, 1479, 1479, 795, 37, 733, 2583, 1169,
	1279, 1277, 1168, 2682, 2530, 36, 208, 1178, 1177, 1165,
	1161, 208, 1158, 208, 1144, 208, 208, 208, 208, 208,
	1478, 1106, 2604, 1546, 208, 208, 886, 2629, 825, 648,
	899, 2354, 2741, 2599, 886, 1146, 899, 2601, 2165, 2608,
	2596, 2597, 2171, 208, 208, 1823, 2851, 2598, 2573, 2081,
	2803, 2709, 1734, 1280, 2600, 886, 51, 2461, 2655, 2458,
	708, 2610, 2452, 850, 2462, 208, 1921, 2618, 1920, 902,
	1555, 732, 1756, 1629, 2602, 811, 2649, 734, 1475, 2607,
	2633, 208, 208, 886, 886, 735, 205, 2651, 1476, 2642,
	2643, 1303, 2674, 721, 1473, 1065, 993, 2665, 459, 1414,
	2462, 1952, 2698, 2641, 628, 2676, 2683, 899, 2462, 2646,
	2462, 2595, 2606, 2681, 1851, 1559, 1696, 2664, 1713, 1433,
	1433, 2653, 2675, 2063, 2673, 1273, 459, 2688, 459, 700,
	459, 2701, 712, 711, 502, 2640, 2689, 2721, 1711, 1093,
	699, 2176, 2645, 2275, 2690, 2691, 899, 2677, 2708, 2446,
	208, 1013, 208, 1613, 899, 208, 2632, 2021, 1377, 1514,
	2650, 1610, 2469, 208, 472, 2102, 1479, 2680, 1851, 899,
	1063, 2716, 1784, 1776, 2749, 1381, 1772, 1183, 1258, 1953,
	2729, 1126, 2725, 585, 205, 993, 543, 2722, 2723, 2280,
	2762, 2284, 2662, 205, 993, 2746, 1980, 891, 459, 2727,
	2667, 2010, 2669, 585, 2745, 1621, 2747, 839, 838, 208,
	837, 208, 2744, 2874, 886, 2871, 1378, 2697, 1549, 208,
	2726, 2755, 1999, 856, 1251, 704, 2462, 2156, 2253, 2766,
	1007, 856, 856, 585, 1250, 856, 821, 2812, 459, 1118,
	899, 205, 2728, 1117, 459, 1116, 459, 2780, 459, 2194,
	459, 2779, 459, 2967, 2820, 2785, 2466, 2518, 2784, 2868,
	208, 2462, 1594, 2462, 2756, 2757, 208, 164, 1478, 161,
	459, 459, 459, 208, 1851, 2794, 163, 1382, 897, 162,
	2238, 988, 79, 2778, 2815, 33, 32, 104, 2809, 2797,
	103, 102, 101, 2782, 1415, 100, 2808, 99, 585, 2801,
	98, 208, 208, 849, 2806, 97, 96, 95, 208, 94,
	2773, 849, 849, 93, 92, 849, 2834, 2817, 2832, 886,
	1478, 91, 2461, 2835, 208, 90, 89, 886, 886, 2818,
	1383, 1384, 208, 88, 208, 87, 208, 86, 2829, 1379,
	85, 2854, 2826, 84, 83, 82, 2839, 81, 583, 580,
	78, 2845, 2846, 2768, 208, 2770, 2838, 208, 2461, 2847,
	208, 2863, 899, 77, 1380, 30, 2461, 25, 2461, 108,
	2878, 2879, 2844, 109, 24, 74, 2881, 2876, 73, 2884,
	2883, 28, 2882, 17, 11, 21, 129, 128, 2870, 127,
	2889, 126, 2825, 125, 2865, 14, 1478, 208, 13, 123,
	122, 2887, 121, 1515, 120, 119, 2848, 118, 2849, 10,
	8, 107, 2901, 9, 2843, 2903, 568, 2692, 502, 2902,
	2312, 208, 67, 68, 26, 2824, 2926, 2925, 2914, 208,
	2927, 2864, 41, 861, 40, 106, 2462, 2462, 1385, 155,
	154, 153, 152, 149, 502, 208, 502, 2933, 2930, 861,
	151, 148, 1334, 459, 2931, 2932, 150, 147, 1854, 2657,
	2939, 117, 2942, 2940, 459, 157, 156, 2946, 145, 2947,
	459, 2949, 2952, 1617, 2876, 143, 144, 2955, 2956, 146,
	142, 141, 459, 158, 2461, 116, 115, 114, 113, 112,
	111, 2964, 2963, 5, 2, 2924, 459, 1, 0, 2971,
	0, 0, 1907, 0, 0, 0, 0, 2972, 2976, 2977,
	0, 0, 1917, 0, 0, 993, 0, 2978, 0, 2461,
	2981, 2461, 0, 0, 0, 2982, 0, 2985, 2885, 2886,
	2706, 1515, 2987, 0, 2623, 0, 0, 0, 1854, 0,
	502, 0, 459, 0, 0, 459, 0, 459, 0, 459,
	0, 459, 459, 1954, 891, 0, 0, 0, 0, 2620,
	0, 0, 2613, 0, 0, 1854, 0, 0, 0, 2706,
	0, 0, 1477, 0, 0, 2611, 0, 1637, 0, 0,
	2615, 0, 0, 0, 856, 0, 0, 687, 0, 0,
	1778, 0, 1637, 0, 0, 0, 0, 0, 0, 209,
	2621, 1515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	0, 0, 854, 0, 2614, 0, 0, 0, 0, 543,
	0, 0, 856, 1514, 0, 0, 0, 0, 1515, 1515,
	1479, 0, 0, 0, 856, 0, 0, 0, 856, 0,
	0, 0, 0, 856, 0, 0, 0, 1515, 1515, 0,
	0, 0, 0, 988, 849, 0, 457, 0, 0, 0,
	459, 0, 0, 0, 0, 0, 993, 0, 0, 993,
	0, 0, 1477, 1477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1515, 2461, 2461, 2463, 0, 459, 459,
	459, 0, 459, 856, 0, 0, 0, 0, 0, 0,
	0, 0, 2480, 0, 0, 0, 1269, 0, 2616, 0,
	2617, 459, 0, 0, 2480, 0, 0, 0, 2480, 0,
	0, 0, 0, 2480, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 39, 0, 0, 0, 0,
	0, 0, 0, 2619, 0, 0, 0, 0, 0, 42,
	0, 1514, 2622, 0, 0, 0, 0, 0, 1479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 849, 0, 1637, 0, 533, 0, 0,
	0, 0, 0, 887, 0, 0, 900, 900, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 869, 2050, 2051, 535, 0, 895, 0,
	0, 0, 0, 57, 537, 0, 0, 58, 0, 0,
	0, 1514, 0, 0, 0, 0, 0, 0, 1479, 0,
	0, 0, 0, 0, 856, 0, 0, 0, 0, 0,
	0, 0, 2618, 0, 0, 1477, 0, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 1514, 1514,
	0, 0, 0, 0, 0, 1479, 1479, 0, 0, 0,
	0, 856, 0, 0, 1517, 0, 0, 1514, 1514, 0,
	0, 1515, 0, 0, 1479, 1479, 0, 0, 0, 0,
	0, 0, 861, 2128, 2129, 2130, 0, 0, 995, 997,
	861, 861, 0, 0, 861, 0, 0, 856, 0, 502,
	0, 0, 502, 1514, 849, 856, 0, 856, 0, 0,
	1479, 502, 0, 0, 0, 0, 0, 0, 0, 459,
	1854, 2190, 0, 0, 0, 1854, 0, 0, 2190, 0,
	0, 0, 61, 0, 0, 1854, 2190, 1854, 2190, 2190,
	0, 2463, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 1778, 1778, 1414, 0, 0, 0, 0, 0, 133,
	63, 0, 64, 0, 0, 459, 0, 0, 0, 891,
	0, 0, 792, 0, 1517, 1517, 0, 2463, 165, 459,
	0, 0, 1092, 0, 0, 2463, 0, 2463, 1096, 536,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 1433, 0, 459, 0, 459, 0, 0, 0,
	0, 459, 0, 459, 167, 0, 0, 891, 0, 687,
	0, 0, 1854, 856, 502, 0, 0, 0, 0, 0,
	0, 1854, 0, 0, 0, 0, 0, 0, 0, 0,
	1778, 1778, 1778, 0, 0, 0, 993, 0, 0, 887,
	887, 166, 0, 856, 0, 0, 0, 0, 856, 159,
	856, 0, 0, 2308, 993, 0, 0, 160, 0, 1005,
	1516, 0, 1474, 0, 1022, 0, 0, 0, 887, 887,
	0, 0, 0, 0, 0, 887, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 1042, 1042, 1042, 895,
	0, 1514, 0, 2463, 0, 0, 0, 459, 1479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1515,
	0, 0, 0, 1252, 1253, 1254, 1255, 1256, 0, 0,
	0, 0, 0, 2480, 0, 0, 1265, 0, 2463, 0,
	2463, 2336, 2337, 0, 0, 0, 1274, 1517, 0, 0,
	1091, 1204, 1205, 0, 0, 0, 0, 0, 2373, 0,
	0, 0, 856, 0, 0, 0, 888, 0, 0, 901,
	901, 1515, 0, 0, 0, 0, 1207, 0, 0, 0,
	1516, 1516, 1474, 1474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 887, 0, 0, 0, 0, 0,
	0, 1206, 0, 0, 0, 0, 0, 0, 0, 1226,
	0, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397,
	2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407,
	0, 2411, 0, 856, 856, 0, 0, 0, 0, 0,
	0, 0, 2480, 861, 0, 0, 0, 1515, 0, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 0, 0, 1229, 1230, 1231, 1232, 0,
	1328, 1328, 1328, 0, 1212, 2460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2481, 0, 0, 0, 0, 0, 0, 1778, 1778,
	0, 0, 0, 2481, 0, 0, 0, 2481, 0, 1477,
	0, 0, 2481, 2463, 2463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1854, 1433, 0, 1433, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1227, 0, 0, 0, 0, 0, 1514,
	0, 0, 0, 1516, 0, 1474, 1479, 0, 0, 0,
	0, 1854, 861, 0, 0, 0, 0, 0, 1778, 1778,
	1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
	1778, 1778, 1778, 1778, 1778, 1778, 1778, 993, 1778, 0,
	0, 891, 459, 0, 459, 0, 0, 0, 0, 0,
	0, 1514, 0, 0, 0, 0, 0, 1233, 1479, 0,
	0, 0, 0, 0, 709, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 1228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1477, 0, 0,
	0, 0, 888, 888, 0, 0, 0, 0, 2574, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 888, 888, 71, 0, 0, 0, 1514, 888, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 861, 0, 0, 0, 1477, 993, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 1854, 2190, 1854, 0, 0, 1217, 1215,
	1216, 1208, 1209, 1210, 1211, 1213, 1214, 0, 0, 664,
	2460, 993, 0, 0, 1477, 1477, 1854, 677, 2190, 0,
	993, 993, 459, 1854, 2190, 0, 687, 687, 0, 459,
	459, 0, 0, 1477, 1477, 0, 0, 0, 0, 887,
	0, 0, 0, 0, 900, 0, 2460, 0, 993, 1917,
	0, 900, 851, 71, 2460, 0, 2460, 888, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1477,
	1854, 0, 0, 0, 0, 1412, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2308, 2308, 0, 0,
	0, 1517, 0, 1611, 0, 1616, 0, 0, 0, 0,
	0, 1623, 0, 0, 0, 1440, 0, 1440, 0, 0,
	0, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
	1668, 1669, 1670, 0, 1676, 887, 1678, 1679, 1680, 1681,
	0, 0, 0, 0, 0, 1854, 0, 2190, 2713, 0,
	2731, 0, 0, 1704, 0, 0, 0, 0, 459, 0,
	1265, 0, 2460, 0, 0, 1536, 0, 900, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1746, 1747, 1748, 1749, 1750, 2737, 0, 2739, 0, 0,
	0, 0, 2481, 0, 0, 0, 0, 2460, 0, 2460,
	0, 1774, 0, 1786, 459, 1579, 459, 1791, 1796, 1517,
	0, 1584, 0, 1585, 993, 1586, 0, 1587, 0, 1588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1596, 1022, 0,
	0, 0, 0, 0, 0, 0, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 2373, 0, 1477, 0, 0,
	0, 502, 0, 0, 0, 0, 0, 0, 2731, 0,
	0, 0, 2105, 2106, 0, 2123, 2124, 2125, 2800, 1517,
	0, 0, 0, 0, 0, 0, 0, 1516, 0, 1474,
	2556, 0, 0, 0, 0, 0, 1854, 2190, 0, 0,
	0, 2481, 0, 459, 0, 1778, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 900, 1517, 1517, 0, 2190,
	0, 0, 0, 0, 0, 0, 0, 993, 0, 993,
	2120, 459, 0, 0, 0, 1517, 1517, 0, 0, 0,
	0, 0, 1778, 0, 1778, 0, 0, 0, 0, 2862,
	0, 0, 993, 0, 0, 459, 0, 0, 0, 0,
	0, 0, 0, 2105, 2106, 0, 2123, 2124, 2125, 0,
	0, 1517, 2460, 2460, 0, 0, 0, 0, 0, 0,
	677, 0, 0, 0, 0, 0, 900, 0, 0, 0,
	0, 0, 2373, 0, 0, 2111, 0, 0, 900, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1516, 993, 1474, 0, 0,
	1840, 2120, 888, 0, 1854, 0, 0, 901, 0, 887,
	0, 0, 0, 0, 901, 1778, 0, 2126, 0, 0,
	2731, 900, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 895, 2121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 504, 0, 1516, 2111, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 887,
	887, 887, 0, 0, 887, 1477, 534, 0, 0, 1957,
	0, 0, 1042, 0, 1042, 0, 1042, 39, 895, 895,
	0, 534, 1516, 1516, 1474, 1474, 0, 0, 888, 0,
	0, 42, 39, 0, 0, 0, 0, 0, 0, 0,
	0, 1516, 1516, 1474, 1474, 2122, 42, 0, 0, 0,
	0, 0, 0, 0, 664, 2121, 0, 1477, 0, 533,
	901, 0, 0, 0, 2034, 2035, 0, 0, 0, 1517,
	2040, 0, 0, 0, 533, 0, 1261, 1516, 1264, 1474,
	0, 0, 1975, 0, 0, 1270, 0, 0, 535, 2053,
	0, 0, 0, 39, 0, 57, 537, 0, 0, 58,
	0, 0, 2059, 535, 0, 0, 0, 42, 2066, 0,
	57, 537, 900, 2071, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2085, 60, 0, 1477, 0, 1976, 2122, 2009, 0, 901,
	0, 0, 2117, 2118, 2119, 0, 60, 0, 0, 2116,
	2114, 2115, 2107, 2108, 2109, 2110, 2112, 2113, 0, 0,
	0, 0, 0, 0, 1977, 2017, 895, 2019, 0, 0,
	0, 0, 537, 0, 0, 1265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1796, 1796, 1796, 2032, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 0, 2161, 60, 901, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 61, 0, 0, 0, 1351, 0,
	0, 0, 0, 2117, 2118, 2119, 0, 0, 0, 61,
	2116, 2114, 2115, 2107, 2108, 2109, 2110, 2112, 2113, 0,
	0, 133, 63, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 63, 0, 64,
	165, 0, 0, 0, 0, 1516, 0, 1474, 0, 901,
	0, 536, 0, 0, 105, 165, 0, 0, 0, 0,
	0, 901, 0, 0, 0, 0, 536, 0, 0, 105,
	61, 0, 0, 0, 0, 0, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 2105, 2106, 1517, 2123, 2124,
	2125, 167, 888, 0, 0, 0, 0, 133, 63, 0,
	64, 0, 0, 2555, 901, 0, 2273, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 165, 900, 0, 0,
	0, 159, 0, 0, 0, 0, 0, 536, 166, 160,
	105, 0, 0, 0, 0, 0, 159, 0, 0, 1517,
	0, 0, 0, 2120, 160, 0, 0, 0, 0, 0,
	505, 0, 167, 0, 0, 0, 0, 687, 687, 0,
	0, 0, 888, 888, 888, 132, 0, 888, 0, 0,
	687, 0, 0, 0, 0, 0, 2187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2330, 0, 0, 166,
	1623, 0, 0, 0, 0, 0, 2334, 159, 0, 2335,
	887, 0, 0, 1022, 0, 160, 0, 0, 2111, 900,
	0, 2340, 0, 0, 0, 1517, 0, 0, 900, 0,
	2348, 900, 0, 0, 900, 0, 132, 0, 2352, 0,
	0, 0, 2161, 0, 0, 0, 2237, 0, 0, 0,
	0, 887, 887, 887, 0, 0, 0, 0, 0, 0,
	2126, 2379, 2380, 2381, 0, 0, 0, 0, 0, 2384,
	0, 2256, 0, 0, 0, 0, 2386, 0, 2263, 0,
	2265, 0, 0, 0, 0, 901, 0, 2121, 0, 0,
	0, 0, 887, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1516, 0, 1474, 0, 0, 0, 2416,
	2417, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1204, 1205, 0, 1234, 1235,
	1236, 1244, 1245, 1246, 0, 0, 0, 0, 0, 2433,
	0, 0, 0, 1237, 0, 0, 0, 0, 664, 0,
	1207, 664, 664, 1248, 0, 1516, 0, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2122, 0,
	0, 2454, 0, 0, 2332, 1206, 0, 0, 0, 0,
	0, 0, 0, 1226, 0, 0, 0, 900, 0, 0,
	1223, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1694, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 677, 0, 0,
	0, 0, 1264, 0, 0, 0, 0, 0, 0, 0,
	0, 1516, 0, 1474, 0, 0, 0, 0, 0, 1229,
	1230, 1231, 1232, 0, 0, 0, 0, 0, 1212, 1328,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2529, 0, 0, 0, 0, 2117, 2118, 2119, 0, 0,
	1241, 1249, 2116, 2114, 2115, 2107, 2108, 2109, 2110, 2112,
	2113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1247, 0, 851, 0, 0, 0, 0, 1221, 1222, 2105,
	2106, 0, 2123, 2124, 2125, 900, 0, 0, 1351, 0,
	1239, 2557, 0, 0, 0, 2560, 2561, 1227, 0, 2563,
	901, 0, 0, 0, 0, 71, 2565, 0, 0, 0,
	2568, 0, 0, 1204, 1205, 0, 0, 0, 0, 1244,
	1245, 1246, 0, 0, 0, 1238, 0, 2575, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 2120, 1207, 0,
	0, 1248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1233, 0, 1206, 900, 2588, 900, 0, 0, 887,
	0, 1226, 0, 0, 71, 0, 71, 0, 1228, 0,
	2505, 0, 0, 888, 0, 0, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 71, 1242,
	0, 901, 2111, 0, 901, 71, 0, 901, 0, 0,
	0, 0, 2630, 0, 900, 0, 0, 900, 0, 0,
	0, 0, 0, 0, 888, 888, 888, 1229, 1230, 1231,
	1232, 0, 0, 900, 0, 0, 1212, 0, 0, 2548,
	0, 895, 0, 0, 2126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1241, 1249,
	0, 0, 0, 0, 0, 888, 0, 0, 0, 0,
	0, 2121, 1240, 0, 0, 1218, 1219, 1225, 1224, 1220,
	1243, 0, 1217, 1215, 1216, 1208, 1209, 1210, 1211, 1213,
	1214, 0, 0, 0, 0, 0, 0, 0, 1239, 2090,
	0, 0, 0, 0, 0, 1227, 0, 0, 2702, 2703,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2105, 2106, 71, 2123, 2124, 2125, 71, 0,
	0, 0, 2712, 0, 0, 0, 0, 0, 0, 0,
	2343, 0, 900, 0, 0, 0, 2720, 0, 0, 0,
	0, 0, 2122, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 0, 0, 0, 0, 0, 0, 1233,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2120, 0, 0, 0, 0, 887, 1228, 0, 0, 900,
	2754, 0, 0, 887, 0, 900, 0, 0, 0, 2644,
	0, 0, 0, 0, 0, 0, 1022, 1242, 0, 0,
	1694, 0, 0, 0, 887, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 887, 887, 0, 2111, 0, 0, 0, 2117,
	2118, 2119, 0, 0, 0, 0, 2116, 2114, 2115, 2107,
	2108, 2109, 2110, 2112, 2113, 0, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	1240, 0, 0, 0, 0, 0, 0, 2126, 1243, 2811,
	1217, 1215, 1216, 1208, 1209, 1210, 1211, 1213, 1214, 0,
	0, 0, 0, 0, 0, 900, 0, 0, 0, 0,
	0, 0, 0, 900, 2121, 0, 0, 1264, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 900, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 851, 0, 0, 0, 2738, 0, 0, 0, 851,
	851, 0, 0, 851, 0, 0, 0, 901, 0, 901,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 887, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2775, 0, 2777, 0, 2122, 0, 0, 0, 900,
	0, 71, 0, 0, 0, 2900, 2900, 901, 0, 0,
	901, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2915, 0, 0, 0, 901, 0, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2900, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 887, 2105,
	2106, 677, 2123, 2124, 2125, 0, 887, 887, 0, 0,
	2830, 0, 2117, 2118, 2119, 0, 0, 2342, 0, 2116,
	2114, 2115, 2107, 2108, 2109, 2110, 2112, 2113, 0, 0,
	2900, 0, 0, 0, 0, 0, 0, 0, 2850, 0,
	0, 900, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 0, 2120, 0, 0,
	0, 0, 2867, 0, 0, 0, 0, 0, 0, 0,
	71, 1204, 1205, 0, 1234, 1235, 1236, 1244, 1245, 1246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1237,
	0, 0, 0, 0, 0, 0, 1207, 0, 888, 1248,
	0, 0, 901, 0, 0, 0, 888, 0, 901, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1206, 2111, 0, 0, 0, 0, 888, 0, 1226,
	0, 0, 0, 0, 1204, 1205, 1223, 1234, 1235, 1236,
	1244, 1245, 1246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1237, 0, 0, 888, 888, 0, 0, 1207,
	0, 0, 1248, 0, 2126, 0, 0, 2105, 2106, 0,
	2123, 2124, 2125, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 0, 0, 1206, 1229, 1230, 1231, 1232, 0,
	0, 2121, 1226, 0, 1212, 0, 0, 0, 0, 1223,
	0, 0, 0, 0, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1241, 1249, 901, 0,
	0, 0, 851, 0, 0, 2120, 901, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1247, 0, 0, 0,
	0, 901, 0, 1221, 1222, 0, 0, 0, 1229, 1230,
	1231, 1232, 0, 0, 0, 0, 1239, 1212, 0, 0,
	0, 0, 0, 1227, 0, 0, 0, 0, 0, 0,
	0, 0, 2122, 0, 0, 0, 0, 0, 0, 1241,
	1249, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	2111, 1238, 0, 0, 0, 0, 0, 0, 0, 1247,
	0, 0, 0, 0, 0, 0, 1221, 1222, 0, 0,
	0, 0, 901, 2127, 0, 0, 0, 0, 0, 1239,
	0, 0, 0, 0, 0, 0, 1227, 1233, 0, 0,
	0, 0, 2126, 0, 0, 0, 0, 0, 0, 0,
	0, 851, 0, 0, 1228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1238, 0, 0, 0, 0, 2121,
	0, 0, 0, 0, 0, 1242, 0, 0, 0, 2117,
	2118, 2119, 0, 0, 0, 0, 2116, 2114, 2115, 2107,
	2108, 2109, 2110, 2112, 2113, 0, 0, 0, 0, 0,
	1233, 888, 0, 0, 0, 0, 0, 0, 0, 888,
	888, 0, 0, 0, 0, 0, 0, 1228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1242, 0,
	0, 0, 0, 0, 901, 0, 0, 0, 1240, 0,
	2122, 1218, 1219, 1225, 1224, 1220, 1243, 0, 1217, 1215,
	1216, 1208, 1209, 1210, 1211, 1213, 1214, 0, 0, 0,
	0, 0, 0, 0, 0, 2089, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1240, 0, 0, 1218, 1219, 1225, 1224, 1220, 1243,
	0, 1217, 1215, 1216, 1208, 1209, 1210, 1211, 1213, 1214,
	0, 0, 0, 0, 0, 0, 0, 0, 2088, 0,
	0, 0, 0, 0, 0, 0, 0, 2117, 2118, 2119,
	0, 0, 0, 0, 2116, 2114, 2115, 2107, 2108, 2109,
	2110, 2112, 2113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 898, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1694,
	210, 211, 212, 213, 903, 214, 904, 905, 906, 907,
	390, 908, 909, 910, 911, 215, 216, 217, 391, 392,
	393, 394, 218, 395, 396, 912, 219, 397, 398, 220,
	221, 222, 913, 914, 399, 400, 401, 915, 223, 402,
	916, 862, 917, 224, 225, 226, 227, 228, 0, 230,
	231, 232, 229, 918, 233, 0, 234, 235, 919, 797,
	236, 237, 238, 920, 921, 923, 922, 924, 925, 926,
	239, 240, 460, 241, 403, 242, 404, 405, 927, 243,
	928, 244, 929, 245, 930, 931, 246, 247, 932, 248,
	933, 0, 934, 406, 249, 250, 251, 252, 253, 407,
	408, 935, 798, 936, 0, 0, 0, 0, 254, 255,
	409, 410, 411, 0, 256, 937, 257, 938, 939, 799,
	258, 940, 259, 412, 941, 413, 942, 260, 261, 262,
	263, 264, 265, 414, 415, 801, 943, 416, 269, 944,
	266, 945, 800, 267, 417, 268, 418, 419, 420, 421,
	422, 946, 423, 947, 270, 802, 271, 272, 273, 803,
	424, 425, 0, 0, 274, 275, 276, 948, 278, 277,
	949, 426, 804, 279, 280, 805, 950, 281, 282, 951,
	952, 283, 0, 284, 864, 863, 285, 286, 288, 427,
	287, 806, 289, 290, 292, 291, 953, 954, 955, 428,
	293, 429, 294, 295, 956, 296, 957, 958, 297, 298,
	959, 960, 299, 430, 807, 300, 808, 431, 301, 302,
	303, 304, 305, 306, 307, 961, 308, 432, 309, 433,
	310, 962, 311, 312, 313, 314, 315, 434, 316, 317,
	963, 318, 319, 320, 321, 322, 0, 324, 325, 323,
	326, 327, 328, 329, 964, 330, 809, 965, 331, 332,
	333, 435, 334, 0, 338, 339, 340, 341, 342, 966,
	344, 345, 436, 437, 438, 439, 343, 346, 347, 967,
	348, 335, 336, 349, 810, 350, 440, 441, 351, 968,
	359, 352, 353, 354, 337, 355, 358, 442, 356, 969,
	357, 443, 970, 360, 361, 971, 362, 363, 364, 365,
	366, 367, 368, 369, 972, 444, 445, 446, 973, 974,
	370, 371, 447, 448, 975, 372, 373, 374, 375, 976,
	977, 376, 377, 378, 379, 978, 380, 979, 449, 381,
	382, 383, 450, 451, 980, 981, 384, 982, 983, 984,
	985, 385, 386, 986, 387, 388, 389, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 898, 0, 0, 0, 0, 0, 1828, 0, 0,
	0, 0, 0, 0, 0, 0, 1829, 210, 211, 212,
	213, 903, 214, 904, 905, 906, 907, 390, 908, 909,
	910, 911, 215, 216, 217, 391, 392, 393, 394, 218,
	395, 396, 912, 219, 397, 398, 220, 221, 222, 913,
	914, 399, 400, 401, 915, 223, 402, 916, 862, 917,
	224, 225, 226, 227, 228, 0, 230, 231, 232, 229,
	918, 233, 0, 234, 235, 919, 797, 236, 237, 238,
	920, 921, 923, 922, 924, 925, 926, 239, 240, 460,
	241, 403, 242, 404, 405, 927, 243, 928, 244, 929,
	245, 930, 931, 246, 247, 932, 248, 933, 0, 934,
	406, 249, 250, 251, 252, 253, 407, 408, 935, 798,
	936, 0, 0, 0, 0, 254, 255, 409, 410, 411,
	0, 256, 937, 257, 938, 939, 799, 258, 940, 259,
	412, 941, 413, 942, 260, 261, 262, 263, 264, 265,
	414, 415, 801, 943, 416, 269, 944, 266, 945, 800,
	267, 417, 268, 418, 419, 420, 421, 422, 946, 423,
	947, 270, 802, 271, 272, 273, 803, 424, 425, 0,
	0, 274, 275, 276, 948, 278, 277, 949, 426, 804,
	279, 280, 805, 950, 281, 282, 951, 952, 283, 0,
	284, 864, 863, 285, 286, 288, 427, 287, 806, 289,
	290, 292, 291, 953, 954, 955, 428, 293, 429, 294,
	295, 956, 296, 957, 958, 297, 298, 959, 960, 299,
	430, 807, 300, 808, 431, 301, 302, 303, 304, 305,
	306, 307, 961, 308, 432, 309, 433, 310, 962, 311,
	312, 313, 314, 315, 434, 316, 317, 963, 318, 319,
	320, 321, 322, 0, 324, 325, 323, 326, 327, 328,
	329, 964, 330, 809, 965, 331, 332, 333, 435, 334,
	0, 338, 339, 340, 341, 342, 966, 344, 345, 436,
	437, 438, 439, 343, 346, 347, 967, 348, 335, 336,
	349, 810, 350, 440, 441, 351, 968, 359, 352, 353,
	354, 337, 355, 358, 442, 356, 969, 357, 443, 970,
	360, 361, 971, 362, 363, 364, 365, 366, 367, 368,
	369, 972, 444, 445, 446, 973, 974, 370, 371, 447,
	448, 975, 372, 373, 374, 375, 976, 977, 376, 377,
	378, 379, 978, 380, 979, 449, 381, 382, 383, 450,
	451, 980, 981, 384, 982, 983, 984, 985, 385, 386,
	986, 387, 388, 389, 0, 0, 0, 0, 0, 898,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2603, 210, 211, 212, 213, 903,
	214, 904, 905, 906, 907, 390, 908, 909, 910, 911,
	215, 216, 217, 391, 392, 393, 394, 218, 395, 396,
	912, 219, 397, 398, 220, 221, 222, 913, 914, 399,
	400, 401, 915, 223, 402, 916, 862, 917, 224, 225,
	226, 227, 228, 0, 230, 231, 232, 229, 918, 233,
	0, 234, 235, 919, 797, 236, 237, 238, 920, 921,
	923, 922, 924, 925, 926, 239, 240, 460, 241, 403,
	242, 404, 405, 927, 243, 928, 244, 929, 245, 930,
	931, 246, 247, 932, 248, 933, 0, 934, 406, 249,
	250, 251, 252, 253, 407, 408, 935, 798, 936, 0,
	0, 0, 0, 254, 255, 409, 410, 411, 0, 256,
	937, 257, 938, 939, 799, 258, 940, 259, 412, 941,
	413, 942, 260, 261, 262, 263, 264, 265, 414, 415,
	801, 943, 416, 269, 944, 266, 945, 800, 267, 417,
	268, 418, 419, 420, 421, 422, 946, 423, 947, 270,
	802, 271, 272, 273, 803, 424, 425, 0, 0, 274,
	275, 276, 948, 278, 277, 949, 426, 804, 279, 280,
	805, 950, 281, 282, 951, 952, 283, 0, 284, 864,
	863, 285, 286, 288, 427, 287, 806, 289, 290, 292,
	291, 953, 954, 955, 428, 293, 429, 294, 295, 956,
	296, 957, 958, 297, 298, 959, 960, 299, 430, 807,
	300, 808, 431, 301, 302, 303, 304, 305, 306, 307,
	961, 308, 432, 309, 433, 310, 962, 311, 312, 313,
	314, 315, 434, 316, 317, 963, 318, 319, 320, 321,
	322, 0, 324, 325, 323, 326, 327, 328, 329, 964,
	330, 809, 965, 331, 332, 333, 435, 334, 0, 338,
	339, 340, 341, 342, 966, 344, 345, 436, 437, 438,
	439, 343, 346, 347, 967, 348, 335, 336, 349, 810,
	350, 440, 441, 351, 968, 359, 352, 353, 354, 337,
	355, 358, 442, 356, 969, 357, 443, 970, 360, 361,
	971, 362, 363, 364, 365, 366, 367, 368, 369, 972,
	444, 445, 446, 973, 974, 370, 371, 447, 448, 975,
	372, 373, 374, 375, 976, 977, 376, 377, 378, 379,
	978, 380, 979, 449, 381, 382, 383, 450, 451, 980,
	981, 384, 982, 983, 984, 985, 385, 386, 986, 387,
	388, 389, 898, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2707, 210, 211,
	212, 213, 903, 214, 904, 905, 906, 907, 390, 908,
	909, 910, 911, 215, 216, 217, 391, 392, 393, 394,
	218, 395, 396, 912, 219, 397, 398, 220, 221, 222,
	913, 914, 399, 400, 401, 915, 223, 402, 916, 862,
	917, 224, 225, 226, 227, 228, 0, 230, 231, 232,
	229, 918, 233, 0, 234, 235, 919, 797, 236, 237,
	238, 920, 921, 923, 922, 924, 925, 926, 239, 240,
	460, 241, 403, 242, 404, 405, 927, 243, 928, 244,
	929, 245, 930, 931, 246, 247, 932, 248, 933, 0,
	934, 406, 249, 250, 251, 252, 253, 407, 408, 935,
	798, 936, 0, 0, 0, 0, 254, 255, 409, 410,
	411, 0, 256, 937, 257, 938, 939, 799, 258, 940,
	259, 412, 941, 413, 942, 260, 261, 262, 263, 264,
	265, 414, 415, 801, 943, 416, 269, 944, 266, 945,
	800, 267, 417, 268, 418, 419, 420, 421, 422, 946,
	423, 947, 270, 802, 271, 272, 273, 803, 424, 425,
	0, 0, 274, 275, 276, 948, 278, 277, 949, 426,
	804, 279, 280, 805, 950, 281, 282, 951, 952, 283,
	0, 284, 864, 863, 285, 286, 288, 427, 287, 806,
	289, 290, 292, 291, 953, 954, 955, 428, 293, 429,
	294, 295, 956, 296, 957, 958, 297, 298, 959, 960,
	299, 430, 807, 300, 808, 431, 301, 302, 303, 304,
	305, 306, 307, 961, 308, 432, 309, 433, 310, 962,
	311, 312, 313, 314, 315, 434, 316, 317, 963, 318,
	319, 320, 321, 322, 0, 324, 325, 323, 326, 327,
	328, 329, 964, 330, 809, 965, 331, 332, 333, 435,
	334, 0, 338, 339, 340, 341, 342, 966, 344, 345,
	436, 437, 438, 439, 343, 346, 347, 967, 348, 335,
	336, 349, 810, 350, 440, 441, 351, 968, 359, 352,
	353, 354, 337, 355, 358, 442, 356, 969, 357, 443,
	970, 360, 361, 971, 362, 363, 364, 365, 366, 367,
	368, 369, 972, 444, 445, 446, 973, 974, 370, 371,
	447, 448, 975, 372, 373, 374, 375, 976, 977, 376,
	377, 378, 379, 978, 380, 979, 449, 381, 382, 383,
	450, 451, 980, 981, 384, 982, 983, 984, 985, 385,
	386, 986, 387, 388, 389, 898, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2355, 210, 211, 212, 213, 903, 214, 904, 905, 906,
	907, 390, 908, 909, 910, 911, 215, 216, 217, 391,
	392, 393, 394, 218, 395, 396, 912, 219, 397, 398,
	220, 221, 222, 913, 914, 399, 400, 401, 915, 223,
	402, 916, 862, 917, 224, 225, 226, 227, 228, 0,
	230, 231, 232, 229, 918, 233, 0, 234, 235, 919,
	797, 236, 237, 238, 920, 921, 923, 922, 924, 925,
	926, 239, 240, 460, 241, 403, 242, 404, 405, 927,
	243, 928, 244, 929, 245, 930, 931, 246, 247, 932,
	248, 933, 0, 934, 406, 249, 250, 251, 252, 253,
	407, 408, 935, 798, 936, 0, 0, 0, 0, 254,
	255, 409, 410, 411, 0, 256, 937, 257, 938, 939,
	799, 258, 940, 259, 412, 941, 413, 942, 260, 261,
	262, 263, 264, 265, 414, 415, 801, 943, 416, 269,
	944, 266, 945, 800, 267, 417, 268, 418, 419, 420,
	421, 422, 946, 423, 947, 270, 802, 271, 272, 273,
	803, 424, 425, 0, 0, 274, 275, 276, 948, 278,
	277, 949, 426, 804, 279, 280, 805, 950, 281, 282,
	951, 952, 283, 0, 284, 864, 863, 285, 286, 288,
	427, 287, 806, 289, 290, 292, 291, 953, 954, 955,
	428, 293, 429, 294, 295, 956, 296, 957, 958, 297,
	298, 959, 960, 299, 430, 807, 300, 808, 431, 301,
	302, 303, 304, 305, 306, 307, 961, 308, 432, 309,
	433, 310, 962, 311, 312, 313, 314, 315, 434, 316,
	317, 963, 318, 319, 320, 321, 322, 0, 324, 325,
	323, 326, 327, 328, 329, 964, 330, 809, 965, 331,
	332, 333, 435, 334, 0, 338, 339, 340, 341, 342,
	966, 344, 345, 436, 437, 438, 439, 343, 346, 347,
	967, 348, 335, 336, 349, 810, 350, 440, 441, 351,
	968, 359, 352, 353, 354, 337, 355, 358, 442, 356,
	969, 357, 443, 970, 360, 361, 971, 362, 363, 364,
	365, 366, 367, 368, 369, 972, 444, 445, 446, 973,
	974, 370, 371, 447, 448, 975, 372, 373, 374, 375,
	976, 977, 376, 377, 378, 379, 978, 380, 979, 449,
	381, 382, 383, 450, 451, 980, 981, 384, 982, 983,
	984, 985, 385, 386, 986, 387, 388, 389, 898, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2241, 210, 211, 212, 213, 903, 214,
	904, 905, 906, 907, 390, 908, 909, 910, 911, 215,
	216, 217, 391, 392, 393, 394, 218, 395, 396, 912,
	219, 397, 398, 220, 221, 222, 913, 914, 399, 400,
	401, 915, 223, 402, 916, 862, 917, 224, 225, 226,
	227, 228, 0, 230, 231, 232, 229, 918, 233, 0,
	234, 235, 919, 797, 236, 237, 238, 920, 921, 923,
	922, 924, 925, 926, 239, 240, 460, 241, 403, 242,
	404, 405, 927, 243, 928, 244, 929, 245, 930, 931,
	246, 247, 932, 248, 933, 0, 934, 406, 249, 250,
	251, 252, 253, 407, 408, 935, 798, 936, 0, 0,
	0, 0, 254, 255, 409, 410, 411, 0, 256, 937,
	257, 938, 939, 799, 258, 940, 259, 412, 941, 413,
	942, 260, 261, 262, 263, 264, 265, 414, 415, 801,
	943, 416, 269, 944, 266, 945, 800, 267, 417, 268,
	418, 419, 420, 421, 422, 946, 423, 947, 270, 802,
	271, 272, 273, 803, 424, 425, 0, 0, 274, 275,
	276, 948, 278, 277, 949, 426, 804, 279, 280, 805,
	950, 281, 282, 951, 952, 283, 0, 284, 864, 863,
	285, 286, 288, 427, 287, 806, 289, 290, 292, 291,
	953, 954, 955, 428, 293, 429, 294, 295, 956, 296,
	957, 958, 297, 298, 959, 960, 299, 430, 807, 300,
	808, 431, 301, 302, 303, 304, 305, 306, 307, 961,
	308, 432, 309, 433, 310, 962, 311, 312, 313, 314,
	315, 434, 316, 317, 963, 318, 319, 320, 321, 322,
	0, 324, 325, 323, 326, 327, 328, 329, 964, 330,
	809, 965, 331, 332, 333, 435, 334, 0, 338, 339,
	340, 341, 342, 966, 344, 345, 436, 437, 438, 439,
	343, 346, 347, 967, 348, 335, 336, 349, 810, 350,
	440, 441, 351, 968, 359, 352, 353, 354, 337, 355,
	358, 442, 356, 969, 357, 443, 970, 360, 361, 971,
	362, 363, 364, 365, 366, 367, 368, 369, 972, 444,
	445, 446, 973, 974, 370, 371, 447, 448, 975, 372,
	373, 374, 375, 976, 977, 376, 377, 378, 379, 978,
	380, 979, 449, 381, 382, 383, 450, 451, 980, 981,
	384, 982, 983, 984, 985, 385, 386, 986, 387, 388,
	389, 898, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1717, 210, 211, 212,
	213, 903, 214, 904, 905, 906, 907, 390, 908, 909,
	910, 911, 215, 216, 217, 391, 392, 393, 394, 218,
	395, 396, 912, 219, 397, 398, 220, 221, 222, 913,
	914, 399, 400, 401, 915, 223, 402, 916, 862, 917,
	224, 225, 226, 227, 228, 0, 230, 231, 232, 229,
	918, 233, 0, 234, 235, 919, 797, 236, 237, 238,
	920, 921, 923, 922, 924, 925, 926, 239, 240, 460,
	241, 403, 242, 404, 405, 927, 243, 928, 244, 929,
	245, 930, 931, 246, 247, 932, 248, 933, 0, 934,
	406, 249, 250, 251, 252, 253, 407, 408, 935, 798,
	936, 0, 0, 0, 0, 254, 255, 409, 410, 411,
	0, 256, 937, 257, 938, 939, 799, 258, 940, 259,
	412, 941, 413, 942, 260, 261, 262, 263, 264, 265,
	414, 415, 801, 943, 416, 269, 944, 266, 945, 800,
	267, 417, 268, 418, 419, 420, 421, 422, 946, 423,
	947, 270, 802, 271, 272, 273, 803, 424, 425, 0,
	0, 274, 275, 276, 948, 278, 277, 949, 426, 804,
	279, 280, 805, 950, 281, 282, 951, 952, 283, 0,
	284, 864, 863, 285, 286, 288, 427, 287, 806, 289,
	290, 292, 291, 953, 954, 955, 428, 293, 429, 294,
	295, 956, 296, 957, 958, 297, 298, 959, 960, 299,
	430, 807, 300, 808, 431, 301, 302, 303, 304, 305,
	306, 307, 961, 308, 432, 309, 433, 310, 962, 311,
	312, 313, 314, 315, 434, 316, 317, 963, 318, 319,
	320, 321, 322, 0, 324, 325, 323, 326, 327, 328,
	329, 964, 330, 809, 965, 331, 332, 333, 435, 334,
	0, 338, 339, 340, 341, 342, 966, 344, 345, 436,
	437, 438, 439, 343, 346, 347, 967, 348, 335, 336,
	349, 810, 350, 440, 441, 351, 968, 359, 352, 353,
	354, 337, 355, 358, 442, 356, 969, 357, 443, 970,
	360, 361, 971, 362, 363, 364, 365, 366, 367, 368,
	369, 972, 444, 445, 446, 973, 974, 370, 371, 447,
	448, 975, 372, 373, 374, 375, 976, 977, 376, 377,
	378, 379, 978, 380, 979, 449, 381, 382, 383, 450,
	451, 980, 981, 384, 982, 983, 984, 985, 385, 386,
	986, 387, 388, 389, 898, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1408,
	210, 211, 212, 213, 903, 214, 904, 905, 906, 907,
	390, 908, 909, 910, 911, 215, 216, 217, 391, 392,
	393, 394, 218, 395, 396, 912, 219, 397, 398, 220,
	221, 222, 913, 914, 399, 400, 401, 915, 223, 402,
	916, 862, 917, 224, 225, 226, 227, 228, 0, 230,
	231, 232, 229, 918, 233, 0, 234, 235, 919, 797,
	236, 237, 238, 920, 921, 923, 922, 924, 925, 926,
	239, 240, 460, 241, 403, 242, 404, 405, 927, 243,
	928, 244, 929, 245, 930, 931, 246, 247, 932, 248,
	933, 0, 934, 406, 249, 250, 251, 252, 253, 407,
	408, 935, 798, 936, 0, 0, 0, 0, 254, 255,
	409, 410, 411, 0, 256, 937, 257, 938, 939, 799,
	258, 940, 259, 412, 941, 413, 942, 260, 261, 262,
	263, 264, 265, 414, 415, 801, 943, 416, 269, 944,
	266, 945, 800, 267, 417, 268, 418, 419, 420, 421,
	422, 946, 423, 947, 270, 802, 271, 272, 273, 803,
	424, 425, 0, 0, 274, 275, 276, 948, 278, 277,
	949, 426, 804, 279, 280, 805, 950, 281, 282, 951,
	952, 283, 0, 284, 864, 863, 285, 286, 288, 427,
	287, 806, 289, 290, 292, 291, 953, 954, 955, 428,
	293, 429, 294, 295, 956, 296, 957, 958, 297, 298,
	959, 960, 299, 430, 807, 300, 808, 431, 301, 302,
	303, 304, 305, 306, 307, 961, 308, 432, 309, 433,
	310, 962, 311, 312, 313, 314, 315, 434, 316, 317,
	963, 318, 319, 320, 321, 322, 0, 324, 325, 323,
	326, 327, 328, 329, 964, 330, 809, 965, 331, 332,
	333, 435, 334, 0, 338, 339, 340, 341, 342, 966,
	344, 345, 436, 437, 438, 439, 343, 346, 347, 967,
	348, 335, 336, 349, 810, 350, 440, 441, 351, 968,
	359, 352, 353, 354, 337, 355, 358, 442, 356, 969,
	357, 443, 970, 360, 361, 971, 362, 363, 364, 365,
	366, 367, 368, 369, 972, 444, 445, 446, 973, 974,
	370, 371, 447, 448, 975, 372, 373, 374, 375, 976,
	977, 376, 377, 378, 379, 978, 380, 979, 449, 381,
	382, 383, 450, 451, 980, 981, 384, 982, 983, 984,
	985, 385, 386, 986, 387, 388, 389, 1724, 0, 730,
	718, 719, 716, 717, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 212, 213, 1721,
	214, 0, 0, 0, 0, 748, 710, 0, 0, 0,
	215, 216, 217, 391, 755, 393, 756, 218, 757, 758,
	0, 219, 397, 398, 220, 221, 222, 713, 747, 759,
	760, 401, 0, 223, 752, 0, 739, 0, 224, 225,
	226, 227, 228, 0, 230, 231, 232, 229, 0, 233,
	0, 234, 235, 0, 797, 236, 237, 238, 0, 740,
	741, 743, 0, 742, 744, 239, 240, 460, 241, 761,
	242, 762, 763, 696, 243, 0, 244, 0, 245, 1722,
	0, 754, 247, 0, 248, 0, 0, 0, 701, 249,
	250, 251, 252, 253, 764, 765, 725, 798, 0, 0,
	0, 0, 0, 254, 255, 766, 767, 768, 0, 256,
	0, 257, 0, 0, 799, 258, 0, 259, 769, 0,
	413, 0, 260, 261, 262, 263, 264, 265, 749, 751,
	801, 0, 416, 269, 0, 266, 0, 800, 267, 770,
	268, 771, 772, 773, 774, 775, 0, 738, 0, 270,
	802, 271, 272, 273, 803, 776, 777, 0, 0, 274,
	275, 276, 0, 278, 277, 0, 778, 804, 279, 280,
	805, 0, 281, 282, 0, 0, 283, 0, 284, 698,
	697, 285, 286, 288, 427, 287, 806, 289, 290, 292,
	291, 693, 0, 726, 750, 293, 779, 294, 295, 0,
	296, 0, 0, 297, 298, 0, 0, 299, 430, 807,
	300, 808, 780, 301, 302, 303, 304, 305, 306, 307,
	0, 308, 781, 309, 433, 310, 0, 311, 312, 313,
	314, 315, 782, 316, 317, 0, 318, 319, 320, 321,
	322, 0, 324, 325, 323, 326, 327, 328, 329, 0,
	330, 809, 0, 331, 332, 333, 702, 334, 0, 338,
	339, 340, 341, 342, 0, 344, 345, 436, 437, 438,
	439, 343, 346, 347, 745, 348, 335, 336, 349, 810,
	350, 783, 441, 351, 0, 359, 352, 353, 354, 337,
	355, 358, 784, 356, 0, 357, 785, 0, 360, 361,
	0, 362, 363, 364, 365, 366, 367, 368, 369, 0,
	786, 787, 788, 0, 0, 370, 371, 789, 790, 724,
	372, 373, 374, 375, 0, 0, 376, 377, 378, 379,
	746, 380, 0, 449, 381, 382, 383, 450, 791, 1720,
	0, 384, 0, 0, 0, 0, 385, 386, 0, 387,
	388, 389, 694, 0, 0, 0, 0, 0, 0, 0,
	692, 0, 0, 0, 0, 690, 691, 1723, 0, 0,
	0, 0, 0, 0, 703, 1718, 0, 0, 0, 678,
	706, 730, 718, 719, 716, 717, 707, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 212,
	213, 0, 214, 0, 0, 0, 0, 748, 710, 0,
	0, 0, 215, 216, 217, 391, 755, 393, 756, 218,
	757, 758, 0, 219, 397, 398, 220, 221, 222, 713,
	747, 759, 760, 401, 0, 223, 752, 0, 739, 0,
	224, 225, 226, 227, 228, 0, 230, 231, 232, 229,
	0, 233, 0, 234, 235, 0, 797, 236, 237, 238,
	0, 740, 741, 743, 0, 742, 744, 239, 240, 460,
	241, 761, 242, 762, 763, 696, 243, 0, 244, 0,
	245, 0, 0, 754, 247, 0, 248, 0, 0, 0,
	701, 249, 250, 251, 252, 253, 764, 765, 725, 798,
	0, 0, 0, 0, 0, 254, 255, 766, 767, 768,
	0, 256, 0, 257, 0, 0, 799, 258, 0, 259,
	769, 0, 413, 0, 260, 261, 262, 263, 264, 265,
	749, 751, 801, 0, 416, 269, 0, 266, 0, 800,
	267, 770, 268, 771, 772, 773, 774, 775, 0, 738,
	0, 270, 802, 271, 272, 273, 803, 776, 777, 0,
	0, 274, 275, 276, 0, 278, 277, 0, 778, 804,
	279, 280, 805, 0, 281, 282, 0, 0, 283, 0,
	284, 698, 697, 285, 286, 288, 427, 287, 806, 289,
	290, 292, 291, 693, 0, 726, 750, 293, 779, 294,
	295, 0, 296, 0, 0, 297, 298, 0, 0, 299,
	430, 807, 300, 808, 780, 301, 302, 303, 304, 305,
	306, 307, 0, 308, 781, 309, 433, 310, 0, 311,
	312, 313, 314, 315, 782, 316, 317, 0, 318, 319,
	320, 321, 322, 0, 324, 325, 323, 326, 327, 328,
	329, 0, 330, 809, 0, 331, 332, 333, 702, 334,
	0, 338, 339, 340, 341, 342, 165, 344, 345, 436,
	437, 438, 439, 343, 346, 347, 745, 348, 335, 336,
	349, 810, 350, 783, 441, 351, 0, 359, 352, 353,
	354, 337, 355, 358, 784, 356, 0, 357, 785, 0,
	360, 361, 167, 362, 363, 364, 365, 366, 367, 368,
	369, 0, 786, 787, 788, 0, 0, 370, 371, 789,
	790, 724, 372, 373, 374, 375, 0, 0, 376, 377,
	378, 379, 746, 380, 0, 449, 381, 382, 383, 1069,
	791, 0, 0, 384, 0, 0, 0, 159, 385, 386,
	0, 387, 388, 389, 694, 160, 0, 0, 0, 0,
	0, 0, 692, 0, 0, 0, 0, 690, 691, 730,
	718, 719, 716, 717, 707, 0, 1267, 0, 0, 0,
	0, 0, 706, 0, 0, 210, 211, 212, 213, 0,
	214, 0, 0, 0, 0, 748, 710, 0, 0, 0,
	215, 216, 217, 391, 755, 393, 756, 218, 757, 758,
	0, 219, 397, 398, 220, 221, 222, 713, 747, 759,
	760, 401, 0, 223, 752, 0, 739, 0, 224, 225,
	226, 227, 228, 0, 230, 231, 232, 229, 0, 233,
	0, 234, 235, 0, 797, 236, 237, 238, 0, 740,
	741, 743, 0, 742, 744, 239, 240, 460, 241, 761,
	242, 762, 763, 696, 243, 0, 244, 0, 245, 0,
	0, 754, 247, 0, 248, 0, 0, 0, 701, 249,
	250, 251, 252, 253, 764, 765, 725, 798, 0, 0,
	0, 0, 0, 254, 255, 766, 767, 768, 0, 256,
	0, 257, 0, 0, 799, 258, 0, 259, 769, 0,
	413, 0, 260, 261, 262, 263, 264, 265, 749, 751,
	801, 0, 416, 269, 0, 266, 0, 800, 267, 770,
	268, 771, 772, 773, 774, 775, 0, 738, 0, 270,
	802, 271, 272, 273, 803, 776, 777, 0, 0, 274,
	275, 276, 0, 278, 277, 0, 778, 804, 279, 280,
	805, 0, 281, 282, 0, 0, 283, 0, 284, 698,
	697, 285, 286, 288, 427, 287, 806, 289, 290, 292,
	291, 693, 0, 726, 750, 293, 779, 294, 295, 0,
	296, 0, 0, 297, 298, 0, 0, 299, 430, 807,
	300, 808, 780, 301, 302, 303, 304, 305, 306, 307,
	0, 308, 781, 309, 433, 310, 0, 311, 312, 313,
	314, 315, 782, 316, 317, 0, 318, 319, 320, 321,
	322, 0, 324, 325, 323, 326, 327, 328, 329, 0,
	330, 809, 0, 331, 332, 333, 702, 334, 0, 338,
	339, 340, 341, 342, 165, 344, 345, 436, 437, 438,
	439, 343, 346, 347, 745, 348, 335, 336, 349, 810,
	350, 783, 441, 351, 0, 359, 352, 353, 354, 337,
	355, 358, 784, 356, 0, 357, 785, 0, 360, 361,
	167, 362, 363, 364, 365, 366, 367, 368, 369, 0,
	786, 787, 788, 0, 0, 370, 371, 789, 790, 724,
	372, 373, 374, 375, 0, 0, 376, 377, 378, 379,
	746, 380, 0, 449, 381, 382, 383, 1069, 791, 0,
	0, 384, 0, 0, 0, 159, 385, 386, 0, 387,
	388, 389, 694, 160, 0, 0, 0, 0, 0, 0,
	692, 0, 0, 0, 0, 690, 691, 730, 718, 719,
	716, 717, 707, 0, 1267, 0, 0, 0, 0, 0,
	706, 0, 0, 210, 211, 212, 213, 0, 214, 0,
	0, 0, 0, 748, 710, 0, 0, 0, 215, 216,
	217, 391, 755, 393, 756, 218, 757, 758, 1792, 219,
	397, 398, 220, 221, 222, 713, 747, 759, 760, 401,
	0, 223, 752, 0, 739, 0, 224, 225, 226, 227,
	228, 0, 230, 231, 232, 229, 0, 233, 0, 234,
	235, 0, 797, 236, 237, 238, 0, 740, 741, 743,
	0, 742, 744, 239, 240, 460, 241, 761, 242, 762,
	763, 696, 243, 0, 244, 0, 245, 0, 0, 754,
	247, 0, 248, 0, 0, 0, 701, 249, 250, 251,
	252, 253, 764, 765, 725, 798, 0, 0, 0, 0,
	0, 254, 255, 766, 767, 768, 0, 256, 0, 257,
	0, 1797, 799, 258, 0, 259, 769, 0, 413, 0,
	260, 261, 262, 263, 264, 265, 749, 751, 801, 0,
	416, 269, 0, 266, 0, 800, 267, 770, 268, 771,
	772, 773, 774, 775, 0, 738, 0, 270, 802, 271,
	272, 273, 803, 776, 777, 0, 0, 274, 275, 276,
	0, 278, 277, 1793, 778, 804, 279, 280, 805, 0,
	281, 282, 0, 0, 283, 0, 284, 698, 697, 285,
	286, 288, 427, 287, 806, 289, 290, 292, 291, 693,
	0, 726, 750, 293, 779, 294, 295, 0, 296, 0,
	0, 297, 298, 0, 0, 299, 430, 807, 300, 808,
	780, 301, 302, 303, 304, 305, 306, 307, 0, 308,
	781, 309, 433, 310, 0, 311, 312, 313, 314, 315,
	782, 316, 317, 0, 318, 319, 320, 321, 322, 0,
	324, 325, 323, 326, 327, 328, 329, 0, 330, 809,
	0, 331, 332, 333, 702, 334, 0, 338, 339, 340,
	341, 342, 0, 344, 345, 436, 437, 438, 439, 343,
	346, 347, 745, 348, 335, 336, 349, 810, 350, 783,
	441, 351, 0, 359, 352, 353, 354, 337, 355, 358,
	784, 356, 0, 357, 785, 0, 360, 361, 0, 362,
	363, 364, 365, 366, 367, 368, 369, 0, 786, 787,
	788, 0, 1794, 370, 371, 789, 790, 724, 372, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 746, 380,
	0, 449, 381, 382, 383, 450, 791, 0, 0, 384,
	0, 0, 0, 0, 385, 386, 0, 387, 388, 389,
	694, 0, 0, 0, 0, 0, 0, 0, 692, 0,
	0, 0, 0, 690, 691, 730, 718, 719, 716, 717,
	707, 0, 703, 0, 0, 0, 0, 0, 706, 0,
	0, 210, 211, 212, 213, 0, 214, 0, 0, 0,
	0, 748, 710, 0, 0, 0, 215, 216, 217, 391,
	755, 393, 756, 218, 757, 758, 0, 219, 397, 398,
	220, 221, 222, 713, 747, 759, 760, 401, 0, 223,
	752, 0, 739, 0, 224, 225, 226, 227, 228, 0,
	230, 231, 232, 229, 0, 233, 0, 234, 235, 0,
	797, 236, 237, 238, 0, 740, 741, 743, 0, 742,
	744, 239, 240, 460, 241, 761, 242, 762, 763, 696,
	243, 0, 244, 0, 245, 0, 0, 754, 247, 0,
	248, 0, 0, 0, 701, 249, 250, 251, 252, 253,
	764, 765, 725, 798, 0, 0, 0, 0, 0, 254,
	255, 766, 767, 768, 0, 256, 0, 257, 0, 0,
	799, 258, 0, 259, 769, 0, 413, 0, 260, 261,
	262, 263, 264, 265, 749, 751, 801, 0, 416, 269,
	0, 266, 0, 800, 267, 770, 268, 771, 772, 773,
	774, 775, 0, 738, 0, 270, 802, 271, 272, 273,
	803, 776, 777, 0, 0, 274, 275, 276, 0, 278,
	277, 0, 778, 804, 279, 280, 805, 0, 281, 282,
	0, 0, 283, 0, 284, 698, 697, 285, 286, 288,
	427, 287, 806, 289, 290, 292, 291, 693, 2521, 726,
	750, 293, 779, 294, 295, 0, 296, 0, 0, 297,
	298, 0, 0, 299, 430, 807, 300, 808, 780, 301,
	302, 303, 304, 305, 306, 307, 0, 308, 781, 309,
	433, 310, 0, 311, 312, 313, 314, 315, 782, 316,
	317, 0, 318, 319, 320, 321, 322, 0, 324, 325,
	323, 326, 327, 328, 329, 0, 330, 809, 0, 331,
	332, 333, 702, 334, 0, 338, 339, 340, 341, 342,
	0, 344, 345, 436, 437, 438, 439, 343, 346, 347,
	745, 348, 335, 336, 349, 810, 350, 783, 441, 351,
	0, 359, 352, 353, 354, 337, 355, 358, 784, 356,
	0, 357, 785, 0, 360, 361, 0, 362, 363, 364,
	365, 366, 367, 368, 369, 0, 786, 787, 788, 0,
	0, 370, 371, 789, 790, 724, 372, 373, 374, 375,
	0, 0, 376, 377, 378, 379, 746, 380, 0, 449,
	381, 382, 383, 450, 791, 0, 0, 384, 0, 0,
	0, 0, 385, 386, 0, 387, 388, 389, 694, 0,
	0, 0, 0, 0, 0, 0, 692, 0, 0, 0,
	0, 690, 691, 1329, 730, 718, 719, 716, 717, 707,
	703, 0, 0, 0, 0, 0, 706, 0, 0, 0,
	210, 211, 212, 213, 0, 214, 0, 0, 0, 0,
	748, 710, 0, 0, 0, 215, 216, 217, 391, 755,
	393, 756, 218, 757, 758, 0, 219, 397, 398, 220,
	221, 222, 713, 747, 759, 760, 401, 0, 223, 752,
	0, 739, 0, 224, 225, 226, 227, 228, 0, 230,
	231, 232, 229, 0, 233, 0, 234, 235, 0, 797,
	236, 237, 238, 0, 740, 741, 743, 0, 742, 744,
	239, 240, 460, 241, 761, 242, 762, 763, 696, 243,
	0, 244, 0, 245, 0, 0, 754, 247, 0, 248,
	0, 0, 0, 701, 249, 250, 251, 252, 253, 764,
	765, 725, 798, 0, 0, 0, 0, 0, 254, 255,
	766, 767, 768, 0, 256, 0, 257, 0, 0, 799,
	258, 0, 259, 769, 0, 413, 0, 260, 261, 262,
	263, 264, 265, 749, 751, 801, 0, 416, 269, 1625,
	266, 0, 800, 267, 770, 268, 771, 772, 773, 774,
	775, 0, 738, 0, 270, 802, 271, 272, 273, 803,
	776, 777, 0, 0, 274, 275, 276, 0, 278, 277,
	0, 778, 804, 279, 280, 805, 0, 281, 282, 0,
	0, 283, 0, 284, 698, 697, 285, 286, 288, 427,
	287, 806, 289, 290, 292, 291, 693, 0, 726, 750,
	293, 779, 294, 295, 0, 296, 0, 0, 297, 298,
	0, 0, 299, 430, 807, 300, 808, 780, 301, 302,
	303, 304, 305, 306, 307, 0, 308, 781, 309, 433,
	310, 1624, 311, 312, 313, 314, 315, 782, 316, 317,
	0, 318, 319, 320, 321, 322, 0, 324, 325, 323,
	326, 327, 328, 329, 0, 330, 809, 0, 331, 332,
	333, 702, 334, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 436, 437, 438, 439, 343, 346, 347, 745,
	348, 335, 336, 349, 810, 350, 783, 441, 351, 0,
	359, 352, 353, 354, 337, 355, 358, 784, 356, 0,
	357, 785, 0, 360, 361, 0, 362, 363, 364, 365,
	366, 367, 368, 369, 0, 786, 787, 788, 0, 0,
	370, 371, 789, 790, 724, 372, 373, 374, 375, 0,
	0, 376, 377, 378, 379, 746, 380, 0, 449, 381,
	382, 383, 450, 791, 0, 0, 384, 0, 0, 0,
	0, 385, 386, 0, 387, 388, 389, 694, 0, 0,
	0, 0, 0, 0, 0, 692, 0, 0, 0, 0,
	690, 691, 0, 0, 0, 0, 0, 0, 0, 703,
	0, 0, 0, 0, 686, 706, 730, 718, 719, 716,
	717, 707, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 0, 0,
	0, 0, 748, 710, 0, 0, 0, 215, 216, 217,
	391, 755, 393, 756, 218, 757, 758, 0, 219, 397,
	398, 220, 221, 222, 713, 747, 759, 760, 401, 0,
	223, 752, 0, 739, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 797, 236, 237, 238, 0, 740, 741, 743, 0,
	742, 744, 239, 240, 460, 241, 761, 242, 762, 763,
	696, 243, 0, 244, 0, 245, 0, 0, 754, 247,
	0, 248, 0, 0, 0, 701, 249, 250, 251, 252,
	253, 764, 765, 725, 798, 0, 0, 0, 0, 0,
	254, 255, 766, 767, 768, 0, 256, 0, 257, 0,
	0, 799, 258, 0, 259, 769, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 749, 751, 801, 0, 416,
	269, 0, 266, 0, 800, 267, 770, 268, 771, 772,
	773, 774, 775, 0, 738, 0, 270, 802, 271, 272,
	273, 803, 776, 777, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 778, 804, 279, 280, 805, 0, 281,
	282, 0, 0, 283, 0, 284, 698, 697, 285, 286,
	288, 427, 287, 806, 289, 290, 292, 291, 693, 0,
	726, 750, 293, 779, 294, 295, 0, 296, 688, 0,
	297, 298, 0, 0, 299, 430, 807, 300, 808, 780,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 781,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 782,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 809, 0,
	331, 332, 333, 702, 334, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 745, 348, 335, 336, 349, 810, 350, 783, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 784,
	356, 0, 357, 785, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 786, 787, 788,
	0, 0, 370, 371, 789, 790, 724, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 746, 380, 0,
	449, 381, 382, 383, 450, 791, 0, 0, 384, 0,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 694,
	0, 0, 0, 0, 0, 0, 0, 692, 0, 0,
	0, 0, 690, 691, 730, 718, 719, 716, 717, 707,
	0, 703, 0, 0, 0, 0, 0, 706, 0, 0,
	210, 211, 212, 213, 0, 214, 0, 0, 0, 0,
	748, 710, 0, 0, 0, 215, 216, 217, 391, 755,
	393, 756, 218, 757, 758, 0, 219, 397, 398, 220,
	221, 222, 713, 747, 759, 760, 401, 0, 223, 752,
	0, 739, 0, 224, 225, 226, 227, 228, 0, 230,
	231, 232, 229, 0, 233, 0, 234, 235, 0, 797,
	236, 237, 238, 0, 740, 741, 743, 0, 742, 744,
	239, 240, 460, 241, 761, 242, 762, 763, 696, 243,
	0, 244, 0, 245, 0, 0, 754, 247, 0, 248,
	0, 0, 0, 701, 249, 250, 251, 252, 253, 764,
	765, 725, 798, 0, 0, 0, 0, 0, 254, 255,
	766, 767, 768, 0, 256, 0, 257, 0, 0, 799,
	258, 0, 259, 769, 0, 413, 0, 260, 261, 262,
	263, 264, 265, 749, 751, 801, 0, 416, 269, 0,
	266, 0, 800, 267, 770, 268, 771, 772, 773, 774,
	775, 0, 738, 0, 270, 802, 271, 272, 273, 803,
	776, 777, 0, 0, 274, 275, 276, 0, 278, 277,
	0, 778, 804, 279, 280, 805, 0, 281, 282, 0,
	0, 283, 0, 284, 698, 697, 285, 286, 288, 427,
	287, 806, 289, 290, 292, 291, 693, 0, 726, 750,
	293, 779, 294, 295, 0, 296, 0, 0, 297, 298,
	0, 0, 299, 430, 807, 300, 808, 780, 301, 302,
	303, 304, 305, 306, 307, 0, 308, 781, 309, 433,
	310, 0, 311, 312, 313, 314, 315, 782, 316, 317,
	0, 318, 319, 320, 321, 322, 0, 324, 325, 323,
	326, 327, 328, 329, 0, 330, 809, 0, 331, 332,
	333, 702, 334, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 436, 437, 438, 439, 343, 346, 347, 745,
	348, 335, 336, 349, 810, 350, 783, 441, 351, 0,
	359, 352, 353, 354, 337, 355, 358, 784, 356, 0,
	357, 785, 0, 360, 361, 0, 362, 363, 364, 365,
	366, 367, 368, 369, 0, 786, 787, 788, 0, 0,
	370, 371, 789, 790, 724, 372, 373, 374, 375, 0,
	0, 376, 377, 378, 379, 746, 380, 0, 449, 381,
	382, 383, 450, 791, 2357, 0, 384, 0, 0, 0,
	0, 385, 386, 0, 387, 388, 389, 694, 0, 0,
	0, 0, 0, 0, 0, 692, 0, 0, 0, 0,
	690, 691, 730, 718, 719, 716, 717, 707, 0, 703,
	0, 0, 0, 0, 0, 706, 0, 0, 210, 211,
	212, 213, 0, 214, 0, 0, 0, 0, 748, 710,
	0, 0, 0, 215, 216, 217, 391, 755, 393, 756,
	218, 757, 758, 0, 219, 397, 398, 220, 221, 222,
	713, 747, 759, 760, 401, 0, 223, 752, 0, 739,
	0, 224, 225, 226, 227, 228, 0, 230, 231, 232,
	229, 0, 233, 0, 234, 235, 0, 797, 236, 237,
	238, 0, 740, 741, 743, 0, 742, 744, 239, 240,
	460, 241, 761, 242, 762, 763, 696, 243, 0, 244,
	0, 245, 0, 0, 754, 247, 0, 248, 0, 0,
	0, 701, 249, 250, 251, 252, 253, 764, 765, 725,
	798, 0, 0, 0, 0, 0, 254, 255, 766, 767,
	768, 0, 256, 0, 257, 0, 0, 799, 258, 0,
	259, 769, 0, 413, 0, 260, 261, 262, 263, 264,
	265, 749, 751, 801, 0, 416, 269, 0, 266, 0,
	800, 267, 770, 268, 771, 772, 773, 774, 775, 0,
	738, 0, 270, 802, 271, 272, 273, 803, 776, 777,
	0, 0, 274, 275, 276, 0, 278, 277, 0, 778,
	804, 279, 280, 805, 0, 281, 282, 0, 0, 283,
	0, 284, 698, 697, 285, 286, 288, 427, 287, 806,
	289, 290, 292, 291, 693, 0, 726, 750, 293, 779,
	294, 295, 0, 296, 688, 0, 297, 298, 0, 0,
	299, 430, 807, 300, 808, 780, 301, 302, 303, 304,
	305, 306, 307, 0, 308, 781, 309, 433, 310, 0,
	311, 312, 313, 314, 315, 782, 316, 317, 0, 318,
	319, 320, 321, 322, 0, 324, 325, 323, 326, 327,
	328, 329, 0, 330, 809, 0, 331, 332, 333, 702,
	334, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	436, 437, 438, 439, 343, 346, 347, 745, 348, 335,
	336, 349, 810, 350, 783, 441, 351, 0, 359, 352,
	353, 354, 337, 355, 358, 784, 356, 0, 357, 785,
	0, 360, 361, 0, 362, 363, 364, 365, 366, 367,
	368, 369, 0, 786, 787, 788, 0, 0, 370, 371,
	789, 790, 724, 372, 373, 374, 375, 0, 0, 376,
	377, 378, 379, 746, 380, 0, 449, 381, 382, 383,
	450, 791, 0, 0, 384, 0, 0, 0, 0, 385,
	386, 0, 387, 388, 389, 694, 0, 0, 0, 0,
	0, 0, 0, 692, 0, 0, 0, 0, 690, 691,
	730, 718, 719, 716, 717, 707, 0, 703, 0, 0,
	0, 0, 0, 706, 0, 0, 210, 211, 212, 213,
	0, 214, 0, 0, 0, 0, 748, 710, 0, 0,
	0, 215, 216, 217, 391, 755, 393, 756, 218, 757,
	758, 0, 219, 397, 398, 220, 221, 222, 713, 747,
	759, 760, 401, 0, 223, 752, 0, 739, 0, 224,
	225, 226, 227, 228, 0, 230, 231, 232, 229, 0,
	233, 0, 234, 235, 0, 797, 236, 237, 238, 0,
	740, 741, 743, 0, 742, 744, 239, 240, 460, 241,
	761, 242, 762, 763, 696, 243, 0, 244, 0, 245,
	0, 0, 754, 247, 0, 248, 0, 0, 0, 701,
	249, 250, 251, 252, 253, 764, 765, 725, 798, 0,
	0, 0, 0, 0, 254, 255, 766, 767, 768, 0,
	256, 0, 257, 0, 0, 799, 258, 0, 259, 769,
	0, 413, 0, 260, 261, 262, 263, 264, 265, 749,
	751, 801, 0, 416, 269, 0, 266, 0, 800, 267,
	770, 268, 771, 772, 773, 774, 775, 0, 738, 0,
	270, 802, 271, 272, 273, 803, 776, 777, 0, 0,
	274, 275, 276, 0, 278, 277, 0, 778, 804, 279,
	280, 805, 0, 281, 282, 0, 0, 283, 0, 284,
	698, 697, 285, 286, 288, 427, 287, 806, 289, 290,
	292, 291, 693, 0, 726, 750, 293, 779, 294, 295,
	0, 296, 0, 0, 297, 298, 0, 0, 299, 430,
	807, 300, 808, 780, 301, 302, 303, 304, 305, 306,
	307, 0, 308, 781, 309, 433, 310, 0, 311, 312,
	313, 314, 315, 782, 316, 317, 0, 318, 319, 320,
	321, 322, 0, 324, 325, 323, 326, 327, 328, 329,
	0, 330, 809, 0, 331, 332, 333, 702, 334, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 436, 437,
	438, 439, 343, 346, 347, 745, 348, 335, 336, 349,
	810, 350, 783, 441, 351, 0, 359, 352, 353, 354,
	337, 355, 358, 784, 356, 0, 357, 785, 0, 360,
	361, 0, 362, 363, 364, 365, 366, 367, 368, 369,
	0, 786, 787, 788, 0, 0, 370, 371, 789, 790,
	724, 372, 373, 374, 375, 0, 0, 376, 377, 378,
	379, 746, 380, 0, 449, 381, 382, 383, 450, 791,
	0, 0, 384, 0, 0, 0, 0, 385, 386, 0,
	387, 388, 389, 694, 0, 0, 0, 0, 0, 0,
	0, 692, 0, 0, 0, 0, 690, 691, 1329, 730,
	718, 719, 716, 717, 707, 703, 0, 0, 0, 0,
	0, 706, 0, 0, 0, 210, 211, 212, 213, 0,
	214, 0, 0, 0, 0, 748, 710, 0, 0, 0,
	215, 216, 217, 391, 755, 393, 756, 218, 757, 758,
	0, 219, 397, 398, 220, 221, 222, 713, 747, 759,
	760, 401, 0, 223, 752, 0, 739, 0, 224, 225,
	226, 227, 228, 0, 230, 231, 232, 229, 0, 233,
	0, 234, 235, 0, 797, 236, 237, 238, 0, 740,
	741, 743, 0, 742, 744, 239, 240, 460, 241, 761,
	242, 762, 763, 696, 243, 0, 244, 0, 245, 0,
	0, 754, 247, 0, 248, 0, 0, 0, 701, 249,
	250, 251, 252, 253, 764, 765, 725, 798, 0, 0,
	0, 0, 0, 254, 255, 766, 767, 768, 0, 256,
	0, 257, 0, 1797, 799, 258, 0, 259, 769, 0,
	413, 0, 260, 261, 262, 263, 264, 265, 749, 751,
	801, 0, 416, 269, 0, 266, 0, 800, 267, 770,
	268, 771, 772, 773, 774, 775, 0, 738, 0, 270,
	802, 271, 272, 273, 803, 776, 777, 0, 0, 274,
	275, 276, 0, 278, 277, 0, 778, 804, 279, 280,
	805, 0, 281, 282, 0, 0, 283, 0, 284, 698,
	697, 285, 286, 288, 427, 287, 806, 289, 290, 292,
	291, 693, 0, 726, 750, 293, 779, 294, 295, 0,
	296, 0, 0, 297, 298, 0, 0, 299, 430, 807,
	300, 808, 780, 301, 302, 303, 304, 305, 306, 307,
	0, 308, 781, 309, 433, 310, 0, 311, 312, 313,
	314, 315, 782, 316, 317, 0, 318, 319, 320, 321,
	322, 0, 324, 325, 323, 326, 327, 328, 329, 0,
	330, 809, 0, 331, 332, 333, 702, 334, 0, 338,
	339, 340, 341, 342, 0, 344, 345, 436, 437, 438,
	439, 343, 346, 347, 745, 348, 335, 336, 349, 810,
	350, 783, 441, 351, 0, 359, 352, 353, 354, 337,
	355, 358, 784, 356, 0, 357, 785, 0, 360, 361,
	0, 362, 363, 364, 365, 366, 367, 368, 369, 0,
	786, 787, 788, 0, 0, 370, 371, 789, 790, 724,
	372, 373, 374, 375, 0, 0, 376, 377, 378, 379,
	746, 380, 0, 449, 381, 382, 383, 450, 791, 0,
	0, 384, 0, 0, 0, 0, 385, 386, 0, 387,
	388, 389, 694, 0, 0, 0, 0, 0, 0, 0,
	692, 0, 0, 0, 0, 690, 691, 0, 0, 0,
	0, 0, 0, 0, 703, 0, 0, 0, 0, 1832,
	706, 730, 718, 719, 716, 717, 707, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 212,
	213, 0, 214, 0, 0, 0, 0, 748, 710, 0,
	0, 0, 215, 216, 217, 391, 755, 393, 756, 218,
	757, 758, 0, 219, 397, 398, 220, 221, 222, 713,
	747, 759, 760, 401, 0, 223, 752, 0, 739, 0,
	224, 225, 226, 227, 228, 0, 230, 231, 232, 229,
	0, 233, 0, 234, 235, 0, 797, 236, 237, 238,
	0, 740, 741, 743, 0, 742, 744, 239, 240, 460,
	241, 761, 242, 762, 763, 696, 243, 0, 244, 0,
	245, 0, 0, 754, 247, 0, 248, 0, 0, 0,
	701, 249, 250, 251, 252, 253, 764, 765, 725, 798,
	0, 0, 0, 0, 0, 254, 255, 766, 767, 768,
	0, 256, 0, 257, 0, 0, 799, 258, 0, 259,
	769, 0, 413, 0, 260, 261, 262, 263, 264, 265,
	749, 751, 801, 0, 416, 269, 0, 266, 0, 800,
	267, 770, 268, 771, 772, 773, 774, 775, 0, 738,
	0, 270, 802, 271, 272, 273, 803, 776, 777, 0,
	0, 274, 275, 276, 0, 278, 277, 0, 778, 804,
	279, 280, 805, 0, 281, 282, 0, 0, 283, 0,
	284, 698, 697, 285, 286, 288, 427, 287, 806, 289,
	290, 292, 291, 693, 0, 726, 750, 293, 779, 294,
	295, 0, 296, 0, 0, 297, 298, 0, 0, 299,
	430, 807, 300, 808, 780, 301, 302, 303, 304, 305,
	306, 307, 0, 308, 781, 309, 433, 310, 0, 311,
	312, 313, 314, 315, 782, 316, 317, 0, 318, 319,
	320, 321, 322, 0, 324, 325, 323, 326, 327, 328,
	329, 0, 330, 809, 0, 331, 332, 333, 702, 334,
	0, 338, 339, 340, 341, 342, 0, 344, 345, 436,
	437, 438, 439, 343, 346, 347, 745, 348, 335, 336,
	349, 810, 350, 783, 441, 351, 0, 359, 352, 353,
	354, 337, 355, 358, 784, 356, 0, 357, 785, 0,
	360, 361, 0, 362, 363, 364, 365, 366, 367, 368,
	369, 0, 786, 787, 788, 0, 0, 370, 371, 789,
	790, 724, 372, 373, 374, 375, 0, 0, 376, 377,
	378, 379, 746, 380, 0, 449, 381, 382, 383, 450,
	791, 0, 0, 384, 0, 0, 0, 0, 385, 386,
	0, 387, 388, 389, 694, 0, 0, 0, 0, 0,
	0, 0, 692, 0, 0, 0, 0, 690, 691, 0,
	0, 0, 0, 0, 0, 0, 703, 0, 0, 0,
	0, 1785, 706, 730, 718, 719, 716, 717, 707, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 0, 214, 0, 0, 0, 0, 748,
	710, 0, 0, 0, 215, 216, 217, 391, 755, 393,
	756, 218, 757, 758, 0, 219, 397, 398, 220, 221,
	222, 713, 747, 759, 760, 401, 0, 223, 752, 0,
	739, 0, 224, 225, 226, 227, 228, 0, 230, 231,
	232, 229, 0, 233, 0, 234, 235, 0, 797, 236,
	237, 238, 0, 740, 741, 743, 0, 742, 744, 239,
	240, 460, 241, 761, 242, 762, 763, 696, 243, 0,
	244, 0, 245, 0, 0, 754, 247, 0, 248, 0,
	0, 0, 701, 249, 250, 251, 252, 253, 764, 765,
	725, 798, 0, 0, 0, 0, 0, 254, 255, 766,
	767, 768, 0, 256, 0, 257, 0, 0, 799, 258,
	0, 259, 769, 0, 413, 0, 260, 261, 262, 263,
	264, 265, 749, 751, 801, 0, 416, 269, 0, 266,
	0, 800, 267, 770, 268, 771, 772, 773, 774, 775,
	0, 738, 0, 270, 802, 271, 272, 273, 803, 776,
	777, 0, 0, 274, 275, 276, 0, 278, 277, 0,
	778, 804, 279, 280, 805, 0, 281, 282, 0, 0,
	283, 0, 284, 698, 697, 285, 286, 288, 427, 287,
	806, 289, 290, 292, 291, 693, 0, 726, 750, 293,
	779, 294, 295, 0, 296, 0, 0, 297, 298, 0,
	0, 299, 430, 807, 300, 808, 780, 301, 302, 303,
	304, 305, 306, 307, 0, 308, 781, 309, 433, 310,
	0, 311, 312, 313, 314, 315, 782, 316, 317, 0,
	318, 319, 320, 321, 322, 0, 324, 325, 323, 326,
	327, 328, 329, 0, 330, 809, 0, 331, 332, 333,
	702, 334, 0, 338, 339, 340, 341, 342, 0, 344,
	345, 436, 437, 438, 439, 343, 346, 347, 745, 348,
	335, 336, 349, 810, 350, 783, 441, 351, 0, 359,
	352, 353, 354, 337, 355, 358, 784, 356, 0, 357,
	785, 0, 360, 361, 0, 362, 363, 364, 365, 366,
	367, 368, 369, 0, 786, 787, 788, 0, 0, 370,
	371, 789, 790, 724, 372, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 746, 380, 0, 449, 381, 382,
	383, 450, 791, 0, 0, 384, 0, 0, 0, 0,
	385, 386, 0, 387, 388, 389, 694, 0, 0, 0,
	0, 0, 0, 0, 692, 0, 0, 0, 0, 690,
	691, 0, 0, 0, 0, 0, 0, 0, 703, 0,
	0, 0, 0, 1773, 706, 730, 718, 719, 716, 717,
	707, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 212, 213, 0, 214, 0, 0, 0,
	0, 748, 710, 0, 0, 0, 215, 216, 217, 391,
	755, 393, 756, 218, 757, 758, 0, 219, 397, 398,
	220, 221, 222, 713, 747, 759, 760, 401, 0, 223,
	752, 0, 739, 0, 224, 225, 226, 227, 228, 0,
	230, 231, 232, 229, 0, 233, 0, 234, 235, 0,
	797, 236, 237, 238, 0, 740, 741, 743, 0, 742,
	744, 239, 240, 460, 241, 761, 242, 762, 763, 696,
	243, 0, 244, 0, 245, 0, 0, 754, 247, 0,
	248, 0, 0, 0, 701, 249, 250, 251, 252, 253,
	764, 765, 725, 798, 0, 0, 0, 0, 0, 254,
	255, 766, 767, 768, 0, 256, 0, 257, 0, 0,
	799, 258, 0, 259, 769, 0, 413, 0, 260, 261,
	262, 263, 264, 265, 749, 751, 801, 0, 416, 269,
	0, 266, 0, 800, 267, 770, 268, 771, 772, 773,
	774, 775, 0, 738, 0, 270, 802, 271, 272, 273,
	803, 776, 777, 0, 0, 274, 275, 276, 0, 278,
	277, 0, 778, 804, 279, 280, 805, 0, 281, 282,
	0, 0, 283, 0, 284, 698, 697, 285, 286, 288,
	427, 287, 806, 289, 290, 292, 291, 693, 0, 726,
	750, 293, 779, 294, 295, 0, 296, 0, 0, 297,
	298, 0, 0, 299, 430, 807, 300, 808, 780, 301,
	302, 303, 304, 305, 306, 307, 0, 308, 781, 309,
	433, 310, 0, 311, 312, 313, 314, 315, 782, 316,
	317, 0, 318, 319, 320, 321, 322, 0, 324, 325,
	323, 326, 327, 328, 329, 0, 330, 809, 0, 331,
	332, 333, 702, 334, 0, 338, 339, 340, 341, 342,
	0, 344, 345, 436, 437, 438, 439, 343, 346, 347,
	745, 348, 335, 336, 349, 810, 350, 783, 441, 351,
	0, 359, 352, 353, 354, 337, 355, 358, 784, 356,
	0, 357, 785, 0, 360, 361, 0, 362, 363, 364,
	365, 366, 367, 368, 369, 0, 786, 787, 788, 0,
	0, 370, 371, 789, 790, 724, 372, 373, 374, 375,
	0, 0, 376, 377, 378, 379, 746, 380, 0, 449,
	381, 382, 383, 450, 791, 0, 0, 384, 0, 0,
	0, 0, 385, 386, 0, 387, 388, 389, 694, 0,
	0, 0, 0, 0, 0, 0, 692, 0, 0, 0,
	0, 690, 691, 0, 0, 0, 0, 0, 0, 0,
	703, 0, 0, 0, 0, 1771, 706, 730, 718, 719,
	716, 717, 707, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 212, 213, 0, 214, 0,
	0, 0, 0, 748, 710, 0, 0, 0, 215, 216,
	217, 391, 755, 393, 756, 218, 757, 758, 0, 219,
	397, 398, 220, 221, 222, 713, 747, 759, 760, 401,
	0, 223, 752, 0, 739, 0, 224, 225, 226, 227,
	228, 0, 230, 231, 232, 229, 0, 233, 0, 234,
	235, 0, 797, 236, 237, 238, 0, 740, 741, 743,
	0, 742, 744, 239, 240, 460, 241, 761, 242, 762,
	763, 696, 243, 0, 244, 0, 245, 0, 0, 754,
	247, 0, 248, 0, 0, 0, 701, 249, 250, 251,
	252, 253, 764, 765, 725, 798, 0, 0, 0, 0,
	0, 254, 255, 766, 767, 768, 0, 256, 0, 257,
	0, 0, 799, 258, 0, 259, 769, 0, 413, 0,
	260, 261, 262, 263, 264, 265, 749, 751, 801, 0,
	416, 269, 0, 266, 0, 800, 267, 770, 268, 771,
	772, 773, 774, 775, 0, 738, 0, 270, 802, 271,
	272, 273, 803, 776, 777, 0, 0, 274, 275, 276,
	0, 278, 277, 0, 778, 804, 279, 280, 805, 0,
	281, 282, 0, 0, 283, 0, 284, 698, 697, 285,
	286, 288, 427, 287, 806, 289, 290, 292, 291, 693,
	0, 726, 750, 293, 779, 294, 295, 0, 296, 0,
	0, 297, 298, 0, 0, 299, 430, 807, 300, 808,
	780, 301, 302, 303, 304, 305, 306, 307, 0, 308,
	781, 309, 433, 310, 0, 311, 312, 313, 314, 315,
	782, 316, 317, 0, 318, 319, 320, 321, 322, 0,
	324, 325, 323, 326, 327, 328, 329, 0, 330, 809,
	0, 331, 332, 333, 702, 334, 0, 338, 339, 340,
	341, 342, 0, 344, 345, 436, 437, 438, 439, 343,
	346, 347, 745, 348, 335, 336, 349, 810, 350, 783,
	441, 351, 0, 359, 352, 353, 354, 337, 355, 358,
	784, 356, 0, 357, 785, 0, 360, 361, 0, 362,
	363, 364, 365, 366, 367, 368, 369, 0, 786, 787,
	788, 0, 0, 370, 371, 789, 790, 724, 372, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 746, 380,
	0, 449, 381, 382, 383, 450, 791, 0, 0, 384,
	0, 0, 0, 0, 385, 386, 0, 387, 388, 389,
	694, 0, 0, 0, 0, 0, 0, 0, 692, 0,
	0, 0, 0, 690, 691, 0, 0, 0, 0, 0,
	0, 0, 703, 0, 0, 0, 0, 1769, 706, 730,
	718, 719, 716, 717, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 212, 213, 0,
	214, 0, 0, 0, 0, 748, 710, 0, 0, 0,
	215, 216, 217, 391, 755, 393, 756, 218, 757, 758,
	0, 219, 397, 398, 220, 221, 222, 713, 747, 759,
	760, 401, 0, 223, 752, 0, 739, 0, 224, 225,
	226, 227, 228, 0, 230, 231, 232, 229, 0, 233,
	0, 234, 235, 0, 797, 236, 237, 238, 0, 740,
	741, 743, 0, 742, 744, 239, 240, 460, 241, 761,
	242, 762, 763, 696, 243, 0, 244, 0, 245, 0,
	0, 754, 247, 0, 248, 0, 0, 0, 701, 249,
	250, 251, 252, 253, 764, 765, 725, 798, 0, 0,
	0, 0, 0, 254, 255, 766, 767, 768, 0, 256,
	0, 257, 0, 0, 799, 258, 0, 259, 769, 0,
	413, 0, 260, 261, 262, 263, 264, 265, 749, 751,
	801, 0, 416, 269, 0, 266, 0, 800, 267, 770,
	268, 771, 772, 773, 774, 775, 0, 738, 0, 270,
	802, 271, 272, 273, 803, 776, 777, 0, 0, 274,
	275, 276, 0, 278, 277, 0, 778, 804, 279, 280,
	805, 0, 281, 282, 0, 0, 283, 0, 284, 698,
	697, 285, 286, 288, 427, 287, 806, 289, 290, 292,
	291, 693, 0, 726, 750, 293, 779, 294, 295, 0,
	296, 0, 0, 297, 298, 0, 0, 299, 430, 807,
	300, 808, 780, 301, 302, 303, 304, 305, 306, 307,
	0, 308, 781, 309, 433, 310, 0, 311, 312, 313,
	314, 315, 782, 316, 317, 0, 318, 319, 320, 321,
	322, 0, 324, 325, 323, 326, 327, 328, 329, 0,
	330, 809, 0, 331, 332, 333, 702, 334, 0, 338,
	339, 340, 341, 342, 0, 344, 345, 436, 437, 438,
	439, 343, 346, 347, 745, 348, 335, 336, 349, 810,
	350, 783, 441, 351, 0, 359, 352, 353, 354, 337,
	355, 358, 784, 356, 0, 357, 785, 0, 360, 361,
	0, 362, 363, 364, 365, 366, 367, 368, 369, 0,
	786, 787, 788, 0, 0, 370, 371, 789, 790, 724,
	372, 373, 374, 375, 0, 0, 376, 377, 378, 379,
	746, 380, 0, 449, 381, 382, 383, 450, 791, 0,
	0, 384, 0, 0, 0, 0, 385, 386, 0, 387,
	388, 389, 694, 0, 0, 0, 0, 0, 0, 0,
	692, 0, 0, 0, 0, 690, 691, 0, 0, 0,
	0, 0, 0, 0, 703, 0, 0, 0, 0, 1766,
	706, 1758, 718, 719, 716, 717, 707, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 212,
	213, 0, 214, 0, 0, 0, 0, 748, 710, 0,
	0, 0, 215, 216, 217, 391, 755, 393, 756, 218,
	757, 758, 0, 219, 397, 398, 220, 221, 222, 713,
	747, 759, 760, 401, 0, 223, 752, 0, 739, 0,
	224, 225, 226, 227, 228, 0, 230, 231, 232, 229,
	0, 233, 0, 234, 235, 0, 797, 236, 237, 238,
	0, 740, 741, 743, 0, 742, 744, 239, 240, 460,
	241, 761, 1761, 762, 763, 696, 243, 0, 244, 0,
	245, 0, 0, 754, 247, 0, 248, 0, 0, 0,
	701, 249, 250, 251, 252, 253, 764, 765, 725, 798,
	0, 0, 0, 0, 0, 254, 255, 766, 767, 768,
	0, 256, 0, 257, 0, 0, 799, 258, 0, 259,
	769, 0, 413, 0, 260, 261, 1762, 263, 264, 265,
	749, 751, 801, 0, 416, 269, 0, 266, 0, 800,
	267, 770, 268, 771, 772, 773, 774, 775, 0, 738,
	0, 270, 802, 271, 272, 273, 803, 776, 777, 0,
	0, 274, 275, 276, 0, 278, 277, 0, 778, 804,
	279, 280, 805, 0, 281, 282, 0, 0, 283, 0,
	284, 698, 697, 1763, 1760, 288, 427, 287, 806, 289,
	290, 292, 291, 693, 0, 726, 750, 293, 779, 294,
	295, 0, 296, 0, 0, 297, 298, 0, 0, 299,
	430, 807, 300, 808, 780, 301, 302, 303, 304, 305,
	306, 307, 0, 308, 781, 309, 433, 310, 0, 311,
	312, 313, 314, 315, 782, 316, 317, 0, 318, 319,
	320, 321, 322, 0, 324, 325, 323, 326, 327, 328,
	329, 0, 330, 809, 0, 331, 332, 333, 702, 334,
	0, 338, 339, 340, 341, 1764, 0, 344, 345, 436,
	437, 438, 439, 343, 346, 347, 745, 348, 335, 336,
	349, 810, 350, 783, 441, 351, 0, 359, 352, 353,
	354, 337, 355, 358, 784, 356, 0, 357, 785, 0,
	360, 361, 0, 362, 363, 364, 365, 366, 367, 368,
	369, 0, 786, 787, 788, 0, 0, 370, 371, 789,
	790, 724, 372, 373, 374, 375, 0, 0, 376, 377,
	378, 379, 746, 380, 0, 449, 381, 382, 383, 450,
	791, 0, 0, 384, 0, 0, 0, 0, 385, 386,
	0, 387, 1759, 389, 694, 0, 0, 0, 0, 0,
	0, 0, 692, 0, 0, 0, 0, 690, 691, 0,
	0, 0, 0, 0, 0, 0, 703, 0, 0, 0,
	0, 1755, 706, 1758, 718, 719, 716, 717, 707, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 0, 214, 0, 0, 0, 0, 748,
	710, 0, 0, 0, 215, 216, 217, 391, 755, 393,
	756, 218, 757, 758, 0, 219, 397, 398, 220, 221,
	222, 713, 747, 759, 760, 401, 0, 223, 752, 0,
	739, 0, 224, 225, 226, 227, 228, 0, 230, 231,
	232, 229, 0, 233, 0, 234, 235, 0, 797, 236,
	237, 238, 0, 740, 741, 743, 0, 742, 744, 239,
	240, 460, 241, 761, 1761, 762, 763, 696, 243, 0,
	244, 0, 245, 0, 0, 754, 247, 0, 248, 0,
	0, 0, 701, 249, 250, 251, 252, 253, 764, 765,
	725, 798, 0, 0, 0, 0, 0, 254, 255, 766,
	767, 768, 0, 256, 0, 257, 0, 0, 799, 258,
	0, 259, 769, 0, 413, 0, 260, 261, 1762, 263,
	264, 265, 749, 751, 801, 0, 416, 269, 0, 266,
	0, 800, 267, 770, 268, 771, 772, 773, 774, 775,
	0, 738, 0, 270, 802, 271, 272, 273, 803, 776,
	777, 0, 0, 274, 275, 276, 0, 278, 277, 0,
	778, 804, 279, 280, 805, 0, 281, 282, 0, 0,
	283, 0, 284, 698, 697, 1763, 1760, 288, 427, 287,
	806, 289, 290, 292, 291, 693, 0, 726, 750, 293,
	779, 294, 295, 0, 296, 0, 0, 297, 298, 0,
	0, 299, 430, 807, 300, 808, 780, 301, 302, 303,
	304, 305, 306, 307, 0, 308, 781, 309, 433, 310,
	0, 311, 312, 313, 314, 315, 782, 316, 317, 0,
	318, 319, 320, 321, 322, 0, 324, 325, 323, 326,
	327, 328, 329, 0, 330, 809, 0, 331, 332, 333,
	702, 334, 0, 338, 339, 340, 341, 1764, 0, 344,
	345, 436, 437, 438, 439, 343, 346, 347, 745, 348,
	335, 336, 349, 810, 350, 783, 441, 351, 0, 359,
	352, 353, 354, 337, 355, 358, 784, 356, 0, 357,
	785, 0, 360, 361, 0, 362, 363, 364, 365, 366,
	367, 368, 369, 0, 786, 787, 788, 0, 0, 370,
	371, 789, 790, 724, 372, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 746, 380, 0, 449, 381, 382,
	383, 450, 791, 0, 0, 384, 0, 0, 0, 0,
	385, 386, 0, 387, 1759, 389, 694, 0, 0, 0,
	0, 0, 0, 0, 692, 0, 0, 0, 0, 690,
	691, 730, 718, 719, 716, 717, 707, 0, 703, 0,
	0, 0, 0, 0, 706, 0, 0, 210, 211, 212,
	213, 0, 214, 0, 0, 0, 0, 748, 710, 0,
	0, 0, 215, 216, 217, 391, 755, 393, 756, 218,
	757, 758, 0, 219, 397, 398, 220, 221, 222, 713,
	747, 759, 760, 401, 0, 223, 752, 0, 739, 0,
	224, 225, 226, 227, 228, 0, 230, 231, 232, 229,
	0, 233, 0, 234, 235, 0, 797, 236, 237, 238,
	0, 740, 741, 743, 0, 742, 744, 239, 240, 460,
	241, 761, 242, 762, 763, 696, 243, 0, 244, 0,
	245, 0, 0, 754, 247, 0, 248, 0, 0, 0,
	701, 249, 250, 251, 252, 253, 764, 765, 725, 798,
	0, 0, 0, 0, 0, 254, 255, 766, 767, 768,
	0, 256, 0, 257, 0, 0, 799, 258, 0, 259,
	769, 0, 413, 0, 260, 261, 262, 263, 264, 265,
	749, 751, 801, 0, 416, 269, 0, 266, 0, 800,
	267, 770, 268, 771, 772, 773, 774, 775, 0, 738,
	0, 270, 802, 271, 272, 273, 803, 776, 777, 0,
	0, 274, 275, 276, 0, 278, 277, 0, 778, 804,
	279, 280, 805, 0, 281, 282, 0, 0, 283, 0,
	284, 698, 697, 285, 286, 288, 427, 287, 806, 289,
	290, 292, 291, 693, 0, 726, 750, 293, 779, 294,
	295, 0, 296, 0, 0, 297, 298, 0, 0, 299,
	430, 807, 300, 808, 780, 301, 302, 303, 304, 305,
	306, 307, 0, 308, 781, 309, 433, 310, 0, 311,
	312, 313, 314, 315, 782, 316, 317, 0, 318, 319,
	320, 321, 322, 0, 324, 325, 323, 326, 327, 328,
	329, 0, 330, 809, 0, 331, 332, 333, 702, 334,
	0, 338, 339, 340, 341, 342, 0, 344, 345, 436,
	437, 438, 439, 343, 346, 347, 745, 348, 335, 336,
	349, 810, 350, 783, 441, 351, 0, 359, 352, 353,
	354, 337, 355, 358, 784, 356, 0, 357, 785, 0,
	360, 361, 0, 362, 363, 364, 365, 366, 367, 368,
	369, 0, 786, 787, 788, 0, 0, 370, 371, 789,
	790, 724, 372, 373, 374, 375, 0, 0, 376, 377,
	378, 379, 746, 380, 0, 449, 381, 382, 383, 450,
	791, 0, 0, 384, 0, 0, 0, 0, 385, 386,
	0, 387, 388, 389, 694, 0, 0, 0, 0, 0,
	0, 0, 692, 0, 0, 0, 0, 690, 691, 0,
	0, 0, 0, 0, 1272, 0, 703, 0, 0, 0,
	0, 0, 706, 730, 718, 719, 716, 717, 707, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 1612, 214, 0, 0, 0, 0, 748,
	710, 0, 0, 0, 215, 216, 217, 391, 755, 393,
	756, 218, 757, 758, 0, 219, 397, 398, 220, 221,
	222, 713, 747, 759, 760, 401, 0, 223, 752, 0,
	739, 0, 224, 225, 226, 227, 228, 0, 230, 231,
	232, 229, 0, 233, 0, 234, 235, 0, 797, 236,
	237, 238, 0, 740, 741, 743, 0, 742, 744, 239,
	240, 460, 241, 761, 242, 762, 763, 696, 243, 0,
	244, 0, 245, 0, 0, 754, 247, 0, 248, 0,
	0, 0, 701, 249, 250, 251, 252, 253, 764, 765,
	725, 798, 0, 0, 0, 0, 0, 254, 255, 766,
	767, 768, 0, 256, 0, 257, 0, 0, 799, 258,
	0, 259, 769, 0, 413, 0, 260, 261, 262, 263,
	264, 265, 749, 751, 801, 0, 416, 269, 0, 266,
	0, 800, 267, 770, 268, 771, 772, 773, 774, 775,
	0, 738, 0, 270, 802, 271, 272, 273, 803, 776,
	777, 0, 0, 274, 275, 276, 0, 278, 277, 0,
	778, 804, 279, 280, 805, 0, 281, 282, 0, 0,
	283, 0, 284, 698, 697, 285, 286, 288, 427, 287,
	806, 289, 290, 292, 291, 693, 0, 726, 750, 293,
	779, 294, 295, 0, 296, 0, 0, 297, 298, 0,
	0, 299, 430, 807, 300, 808, 780, 301, 302, 303,
	304, 305, 306, 307, 0, 308, 781, 309, 433, 310,
	0, 311, 312, 313, 314, 315, 782, 316, 317, 0,
	318, 319, 320, 321, 322, 0, 324, 325, 323, 326,
	327, 328, 329, 0, 330, 809, 0, 331, 332, 333,
	702, 334, 0, 338, 339, 340, 341, 342, 0, 344,
	345, 436, 437, 438, 439, 343, 346, 347, 745, 348,
	335, 336, 349, 810, 350, 783, 441, 351, 0, 359,
	352, 353, 354, 337, 355, 358, 784, 356, 0, 357,
	785, 0, 360, 361, 0, 362, 363, 364, 365, 366,
	367, 368, 369, 0, 786, 787, 788, 0, 0, 370,
	371, 789, 790, 724, 372, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 746, 380, 0, 449, 381, 382,
	383, 450, 791, 0, 0, 384, 0, 0, 0, 0,
	385, 386, 0, 387, 388, 389, 694, 0, 0, 0,
	0, 0, 0, 0, 692, 0, 0, 0, 0, 690,
	691, 0, 0, 0, 0, 0, 0, 0, 703, 0,
	0, 0, 0, 998, 706, 730, 718, 719, 716, 717,
	707, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 212, 213, 0, 214, 0, 0, 0,
	0, 748, 710, 0, 0, 0, 215, 216, 217, 391,
	755, 393, 756, 218, 757, 758, 0, 219, 397, 398,
	220, 221, 222, 713, 747, 759, 760, 401, 0, 223,
	752, 0, 739, 0, 224, 225, 226, 227, 228, 0,
	230, 231, 232, 229, 0, 233, 0, 234, 235, 0,
	797, 236, 237, 238, 0, 740, 741, 743, 0, 742,
	744, 239, 240, 460, 241, 761, 242, 762, 763, 696,
	243, 0, 244, 0, 245, 0, 0, 754, 247, 0,
	248, 0, 0, 0, 701, 249, 250, 251, 252, 253,
	764, 765, 725, 798, 0, 0, 0, 0, 0, 254,
	255, 766, 767, 768, 0, 256, 0, 257, 0, 0,
	799, 258, 0, 259, 769, 0, 413, 0, 260, 261,
	262, 263, 264, 265, 749, 751, 801, 0, 416, 269,
	0, 266, 0, 800, 267, 770, 268, 771, 772, 773,
	774, 775, 0, 738, 0, 270, 802, 271, 272, 273,
	803, 776, 777, 0, 0, 274, 275, 276, 0, 278,
	277, 0, 778, 804, 279, 280, 805, 0, 281, 282,
	0, 0, 283, 0, 284, 698, 697, 285, 286, 288,
	427, 287, 806, 289, 290, 292, 291, 693, 0, 726,
	750, 293, 779, 294, 295, 0, 296, 0, 0, 297,
	298, 0, 0, 299, 430, 807, 300, 808, 780, 301,
	302, 303, 304, 305, 306, 307, 0, 308, 781, 309,
	433, 310, 0, 311, 312, 313, 314, 315, 782, 316,
	317, 0, 318, 319, 320, 321, 322, 0, 324, 325,
	323, 326, 327, 328, 329, 0, 330, 809, 0, 331,
	332, 333, 702, 334, 0, 338, 339, 340, 341, 342,
	0, 344, 345, 436, 437, 438, 439, 343, 346, 347,
	745, 348, 335, 336, 349, 810, 350, 783, 441, 351,
	0, 359, 352, 353, 354, 337, 355, 358, 784, 356,
	0, 357, 785, 0, 360, 361, 0, 362, 363, 364,
	365, 366, 367, 368, 369, 0, 786, 787, 788, 0,
	0, 370, 371, 789, 790, 724, 372, 373, 374, 375,
	0, 0, 376, 377, 378, 379, 746, 380, 0, 449,
	381, 382, 383, 450, 791, 0, 0, 384, 0, 0,
	0, 0, 385, 386, 0, 387, 388, 389, 694, 0,
	0, 0, 0, 0, 0, 0, 692, 0, 0, 0,
	0, 690, 691, 0, 0, 0, 0, 0, 0, 0,
	703, 0, 0, 0, 0, 996, 706, 730, 718, 719,
	716, 717, 707, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 212, 213, 0, 214, 0,
	0, 0, 0, 748, 710, 0, 0, 0, 215, 216,
	217, 391, 755, 393, 756, 218, 757, 758, 0, 219,
	397, 398, 220, 221, 222, 713, 747, 759, 760, 401,
	0, 223, 752, 0, 739, 0, 224, 225, 226, 227,
	228, 0, 230, 231, 232, 229, 0, 233, 0, 234,
	235, 0, 797, 236, 237, 238, 0, 740, 741, 743,
	0, 742, 744, 239, 240, 460, 241, 761, 242, 762,
	763, 696, 243, 0, 244, 0, 245, 0, 0, 754,
	247, 0, 248, 0, 0, 0, 701, 249, 250, 251,
	252, 253, 764, 765, 725, 798, 0, 0, 0, 0,
	0, 254, 255, 766, 767, 768, 0, 256, 0, 257,
	0, 0, 799, 258, 0, 259, 769, 0, 413, 0,
	260, 261, 262, 263, 264, 265, 749, 751, 801, 0,
	416, 269, 0, 266, 0, 800, 267, 770, 268, 771,
	772, 773, 774, 775, 0, 738, 0, 270, 802, 271,
	272, 273, 803, 776, 777, 0, 0, 274, 275, 276,
	0, 278, 277, 0, 778, 804, 279, 280, 805, 0,
	281, 282, 0, 0, 283, 0, 284, 698, 697, 285,
	286, 288, 427, 287, 806, 289, 290, 292, 291, 693,
	0, 726, 750, 293, 779, 294, 295, 0, 296, 0,
	0, 297, 298, 0, 0, 299, 430, 807, 300, 808,
	780, 301, 302, 303, 304, 305, 306, 307, 0, 308,
	781, 309, 433, 310, 0, 311, 312, 313, 314, 315,
	782, 316, 317, 0, 318, 319, 320, 321, 322, 0,
	324, 325, 323, 326, 327, 328, 329, 0, 330, 809,
	0, 331, 332, 333, 702, 334, 0, 338, 339, 340,
	341, 342, 0, 344, 345, 436, 437, 438, 439, 343,
	346, 347, 745, 348, 335, 336, 349, 810, 350, 783,
	441, 351, 0, 359, 352, 353, 354, 337, 355, 358,
	784, 356, 0, 357, 785, 0, 360, 361, 0, 362,
	363, 364, 365, 366, 367, 368, 369, 0, 786, 787,
	788, 0, 0, 370, 371, 789, 790, 724, 372, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 746, 380,
	0, 449, 381, 382, 383, 450, 791, 0, 0, 384,
	0, 0, 0, 0, 385, 386, 0, 387, 388, 389,
	694, 0, 0, 0, 0, 0, 0, 0, 692, 0,
	0, 0, 0, 690, 691, 730, 718, 719, 716, 717,
	707, 0, 703, 0, 0, 0, 0, 0, 706, 0,
	0, 210, 211, 212, 213, 0, 214, 0, 0, 0,
	0, 748, 710, 0, 0, 0, 215, 216, 217, 391,
	755, 393, 756, 218, 757, 758, 0, 219, 397, 398,
	220, 221, 222, 713, 747, 759, 760, 401, 0, 223,
	752, 0, 739, 0, 224, 225, 226, 227, 228, 0,
	230, 231, 232, 229, 0, 233, 0, 234, 235, 0,
	797, 236, 237, 238, 0, 740, 741, 743, 0, 742,
	744, 239, 240, 460, 241, 761, 242, 762, 763, 696,
	243, 0, 244, 0, 245, 0, 0, 754, 247, 0,
	248, 0, 0, 0, 701, 249, 250, 251, 252, 253,
	764, 765, 725, 798, 0, 0, 0, 0, 0, 254,
	255, 766, 767, 768, 0, 256, 0, 257, 0, 0,
	799, 258, 0, 259, 769, 0, 413, 0, 260, 261,
	262, 263, 264, 265, 749, 751, 801, 0, 416, 269,
	0, 266, 0, 800, 267, 770, 268, 771, 772, 773,
	774, 775, 0, 738, 0, 270, 802, 271, 272, 273,
	803, 776, 777, 0, 0, 274, 275, 276, 0, 278,
	277, 0, 778, 804, 279, 280, 805, 0, 281, 282,
	0, 0, 283, 0, 284, 698, 697, 285, 286, 288,
	427, 287, 806, 289, 290, 292, 291, 693, 0, 726,
	750, 293, 779, 294, 295, 0, 296, 0, 0, 297,
	298, 0, 0, 299, 430, 807, 300, 808, 780, 301,
	302, 303, 304, 305, 306, 307, 0, 308, 781, 309,
	433, 310, 0, 311, 312, 313, 314, 315, 782, 316,
	317, 0, 318, 319, 320, 321, 322, 0, 324, 325,
	323, 326, 327, 328, 329, 0, 330, 809, 0, 331,
	332, 333, 702, 334, 0, 338, 339, 340, 341, 342,
	0, 344, 345, 436, 437, 438, 439, 343, 346, 347,
	745, 348, 335, 336, 349, 810, 350, 783, 441, 351,
	0, 359, 352, 353, 354, 337, 355, 358, 784, 356,
	0, 357, 785, 0, 360, 361, 0, 362, 363, 364,
	365, 366, 367, 368, 369, 0, 786, 787, 788, 0,
	0, 370, 371, 789, 790, 724, 372, 373, 374, 375,
	0, 0, 376, 377, 378, 379, 746, 380, 0, 449,
	381, 382, 383, 450, 791, 0, 0, 384, 0, 0,
	0, 0, 385, 386, 0, 387, 388, 389, 694, 0,
	0, 0, 0, 0, 0, 0, 692, 0, 0, 0,
	0, 690, 691, 730, 718, 719, 716, 717, 707, 0,
	703, 0, 0, 0, 0, 0, 706, 0, 0, 210,
	211, 212, 213, 0, 214, 0, 0, 0, 0, 748,
	710, 0, 0, 0, 215, 216, 217, 391, 755, 393,
	756, 218, 757, 758, 0, 219, 397, 398, 220, 221,
	222, 713, 747, 759, 760, 401, 0, 223, 752, 0,
	739, 0, 224, 225, 226, 227, 228, 0, 230, 231,
	232, 229, 0, 233, 0, 234, 235, 0, 797, 236,
	237, 2899, 0, 740, 741, 743, 0, 742, 744, 239,
	240, 460, 241, 761, 242, 762, 763, 696, 243, 0,
	244, 0, 245, 0, 0, 754, 247, 0, 248, 0,
	0, 0, 701, 249, 250, 251, 252, 253, 764, 765,
	725, 798, 0, 0, 0, 0, 0, 254, 255, 766,
	767, 768, 0, 256, 0, 257, 0, 0, 799, 258,
	0, 259, 769, 0, 413, 0, 260, 261, 262, 263,
	264, 265, 749, 751, 801, 0, 416, 269, 0, 266,
	0, 800, 267, 770, 268, 771, 772, 773, 774, 775,
	0, 738, 0, 270, 802, 271, 272, 273, 803, 776,
	777, 0, 0, 274, 275, 276, 0, 278, 277, 0,
	778, 804, 279, 280, 805, 0, 281, 282, 0, 0,
	283, 0, 284, 698, 697, 285, 286, 288, 427, 287,
	806, 289, 290, 292, 291, 693, 0, 726, 750, 293,
	779, 294, 295, 0, 296, 0, 0, 297, 298, 0,
	0, 299, 430, 807, 300, 808, 780, 301, 302, 303,
	304, 305, 306, 307, 0, 308, 781, 309, 433, 310,
	0, 311, 312, 313, 314, 315, 782, 316, 317, 0,
	318, 319, 320, 321, 322, 0, 324, 325, 323, 326,
	327, 328, 329, 0, 330, 809, 0, 331, 332, 333,
	702, 334, 0, 338, 339, 340, 341, 342, 0, 344,
	345, 436, 437, 438, 439, 343, 346, 347, 745, 348,
	335, 336, 349, 810, 350, 783, 441, 351, 0, 359,
	352, 353, 354, 337, 355, 358, 784, 356, 0, 357,
	785, 0, 360, 361, 0, 362, 363, 364, 365, 366,
	367, 368, 369, 0, 786, 787, 788, 0, 0, 370,
	371, 789, 790, 724, 372, 373, 2898, 375, 0, 0,
	376, 377, 378, 379, 746, 380, 0, 449, 381, 382,
	383, 450, 791, 0, 0, 384, 0, 0, 0, 0,
	385, 386, 0, 387, 388, 389, 694, 0, 0, 0,
	0, 0, 0, 0, 692, 0, 0, 0, 0, 690,
	691, 730, 718, 719, 716, 717, 707, 0, 703, 0,
	0, 0, 0, 0, 706, 0, 0, 210, 211, 212,
	213, 0, 214, 0, 0, 0, 0, 748, 710, 0,
	0, 0, 215, 216, 217, 2897, 755, 393, 756, 218,
	757, 758, 0, 219, 397, 398, 220, 221, 222, 713,
	747, 759, 760, 401, 0, 223, 752, 0, 739, 0,
	224, 225, 226, 227, 228, 0, 230, 231, 232, 229,
	0, 233, 0, 234, 235, 0, 797, 236, 237, 2899,
	0, 740, 741, 743, 0, 742, 744, 239, 240, 460,
	241, 761, 242, 762, 763, 696, 243, 0, 244, 0,
	245, 0, 0, 754, 247, 0, 248, 0, 0, 0,
	701, 249, 250, 251, 252, 253, 764, 765, 725, 798,
	0, 0, 0, 0, 0, 254, 255, 766, 767, 768,
	0, 256, 0, 257, 0, 0, 799, 258, 0, 259,
	769, 0, 413, 0, 260, 261, 262, 263, 264, 265,
	749, 751, 801, 0, 416, 269, 0, 266, 0, 800,
	267, 770, 268, 771, 772, 773, 774, 775, 0, 738,
	0, 270, 802, 271, 272, 273, 803, 776, 777, 0,
	0, 274, 275, 276, 0, 278, 277, 0, 778, 804,
	279, 280, 805, 0, 281, 282, 0, 0, 283, 0,
	284, 698, 697, 285, 286, 288, 427, 287, 806, 289,
	290, 292, 291, 693, 0, 726, 750, 293, 779, 294,
	295, 0, 296, 0, 0, 297, 298, 0, 0, 299,
	430, 807, 300, 808, 780, 301, 302, 303, 304, 305,
	306, 307, 0, 308, 781, 309, 433, 310, 0, 311,
	312, 313, 314, 315, 782, 316, 317, 0, 318, 319,
	320, 321, 322, 0, 324, 325, 323, 326, 327, 328,
	329, 0, 330, 809, 0, 331, 332, 333, 702, 334,
	0, 338, 339, 340, 341, 342, 0, 344, 345, 436,
	437, 438, 439, 343, 346, 347, 745, 348, 335, 336,
	349, 810, 350, 783, 441, 351, 0, 359, 352, 353,
	354, 337, 355, 358, 784, 356, 0, 357, 785, 0,
	360, 361, 0, 362, 363, 364, 365, 366, 367, 368,
	369, 0, 786, 787, 788, 0, 0, 370, 371, 789,
	790, 724, 372, 373, 2898, 375, 0, 0, 376, 377,
	378, 379, 746, 380, 0, 449, 381, 382, 383, 450,
	791, 0, 0, 384, 0, 0, 0, 0, 385, 386,
	0, 387, 388, 389, 694, 0, 0, 0, 0, 0,
	0, 0, 692, 0, 0, 0, 0, 690, 691, 730,
	718, 719, 716, 717, 707, 0, 703, 0, 0, 0,
	0, 0, 706, 0, 0, 210, 211, 212, 213, 0,
	214, 0, 0, 0, 0, 748, 710, 0, 0, 0,
	215, 216, 217, 391, 755, 393, 756, 218, 757, 758,
	0, 219, 397, 398, 220, 221, 222, 713, 747, 759,
	760, 401, 0, 223, 752, 0, 739, 0, 224, 225,
	226, 227, 228, 0, 230, 231, 232, 229, 0, 233,
	0, 234, 235, 0, 797, 236, 237, 238, 0, 740,
	741, 743, 0, 742, 744, 239, 240, 460, 241, 761,
	242, 762, 763, 0, 243, 0, 244, 0, 245, 0,
	0, 754, 247, 0, 248, 0, 0, 0, 701, 249,
	250, 251, 252, 253, 764, 765, 725, 798, 0, 0,
	0, 0, 0, 254, 255, 766, 767, 768, 0, 256,
	0, 257, 0, 0, 799, 258, 0, 259, 769, 0,
	413, 0, 260, 261, 262, 263, 264, 265, 749, 751,
	801, 0, 416, 269, 0, 266, 0, 800, 267, 770,
	268, 771, 772, 773, 774, 775, 0, 738, 0, 270,
	802, 271, 272, 273, 803, 776, 777, 0, 0, 274,
	275, 276, 0, 278, 277, 0, 778, 804, 279, 280,
	805, 0, 281, 282, 0, 0, 283, 0, 284, 864,
	863, 285, 286, 288, 427, 287, 806, 289, 290, 292,
	291, 0, 0, 726, 750, 293, 779, 294, 295, 0,
	296, 0, 0, 297, 298, 0, 0, 299, 430, 807,
	300, 808, 780, 301, 302, 303, 304, 305, 306, 307,
	0, 308, 781, 309, 433, 310, 0, 311, 312, 313,
	314, 315, 782, 316, 317, 0, 318, 319, 320, 321,
	322, 0, 324, 325, 323, 326, 327, 328, 329, 0,
	330, 809, 0, 331, 332, 333, 1783, 334, 0, 338,
	339, 340, 341, 342, 0, 344, 345, 436, 437, 438,
	439, 343, 346, 347, 745, 348, 335, 336, 349, 810,
	350, 783, 441, 351, 0, 359, 352, 353, 354, 337,
	355, 358, 784, 356, 0, 357, 785, 0, 360, 361,
	0, 362, 363, 364, 365, 366, 367, 368, 369, 0,
	786, 787, 788, 0, 0, 370, 371, 789, 790, 724,
	372, 373, 374, 375, 0, 0, 376, 377, 378, 379,
	746, 380, 0, 449, 381, 382, 383, 450, 791, 0,
	0, 384, 0, 0, 0, 0, 385, 386, 0, 387,
	388, 389, 730, 718, 719, 716, 717, 707, 0, 0,
	1781, 0, 0, 0, 0, 1779, 1780, 0, 210, 211,
	212, 213, 0, 214, 1782, 0, 0, 0, 748, 710,
	706, 0, 0, 215, 216, 217, 0, 755, 393, 756,
	218, 757, 758, 0, 219, 397, 398, 220, 221, 222,
	713, 747, 759, 760, 401, 0, 223, 752, 0, 739,
	0, 224, 225, 226, 227, 228, 0, 230, 231, 232,
	229, 0, 233, 0, 234, 235, 0, 797, 236, 237,
	2899, 0, 740, 741, 743, 0, 742, 744, 239, 240,
	460, 241, 761, 242, 762, 763, 696, 243, 0, 244,
	0, 245, 0, 0, 754, 247, 0, 248, 0, 0,
	0, 701, 249, 250, 251, 252, 253, 764, 765, 725,
	798, 0, 0, 0, 0, 0, 254, 255, 766, 767,
	768, 0, 256, 0, 257, 0, 0, 799, 258, 0,
	259, 769, 0, 413, 0, 260, 261, 262, 263, 264,
	265, 749, 751, 0, 0, 416, 269, 0, 266, 0,
	800, 267, 770, 268, 771, 772, 773, 774, 775, 0,
	738, 0, 270, 0, 271, 272, 273, 803, 776, 777,
	0, 0, 274, 275, 276, 0, 278, 277, 0, 778,
	804, 279, 280, 0, 0, 281, 282, 0, 0, 283,
	0, 284, 698, 697, 285, 286, 288, 427, 287, 806,
	289, 290, 292, 291, 693, 0, 726, 750, 293, 779,
	294, 295, 0, 296, 0, 0, 297, 298, 0, 0,
	299, 430, 807, 300, 808, 780, 301, 302, 303, 304,
	305, 306, 307, 0, 308, 781, 309, 433, 310, 0,
	311, 312, 313, 314, 315, 782, 316, 317, 0, 318,
	319, 320, 321, 322, 0, 324, 325, 323, 326, 327,
	328, 329, 0, 330, 809, 0, 331, 332, 333, 702,
	334, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	436, 437, 438, 439, 343, 346, 347, 745, 348, 335,
	336, 349, 0, 350, 783, 441, 351, 0, 359, 352,
	353, 354, 337, 355, 358, 784, 356, 0, 357, 785,
	0, 360, 361, 0, 362, 363, 364, 365, 366, 367,
	368, 369, 0, 786, 787, 788, 0, 0, 370, 371,
	789, 790, 724, 372, 373, 2898, 375, 0, 0, 376,
	377, 378, 379, 746, 380, 0, 449, 381, 382, 383,
	450, 791, 0, 0, 384, 0, 0, 0, 0, 385,
	386, 0, 387, 388, 389, 0, 0, 0, 0, 0,
	0, 678, 0, 730, 0, 0, 0, 0, 690, 691,
	0, 0, 0, 0, 0, 0, 0, 703, 0, 210,
	211, 212, 213, 706, 214, 0, 0, 0, 0, 390,
	0, 0, 0, 0, 215, 216, 217, 391, 392, 393,
	394, 218, 395, 396, 0, 219, 397, 398, 220, 221,
	222, 0, 0, 399, 400, 401, 0, 223, 402, 0,
	862, 0, 224, 225, 226, 227, 228, 0, 230, 231,
	232, 229, 0, 233, 0, 234, 235, 0, 797, 236,
	237, 238, 0, 857, 858, 0, 0, 859, 860, 239,
	240, 460, 241, 403, 242, 404, 405, 0, 243, 0,
	244, 0, 245, 0, 0, 246, 247, 0, 248, 0,
	0, 0, 406, 249, 250, 251, 252, 253, 764, 765,
	0, 798, 0, 0, 0, 0, 0, 254, 255, 409,
	410, 411, 0, 256, 0, 257, 0, 0, 799, 258,
	0, 259, 769, 0, 413, 0, 260, 261, 262, 263,
	264, 265, 414, 415, 801, 0, 416, 269, 0, 266,
	0, 800, 267, 417, 268, 418, 419, 420, 421, 422,
	0, 423, 0, 270, 802, 271, 272, 273, 803, 424,
	425, 0, 0, 274, 275, 276, 0, 278, 277, 0,
	778, 804, 279, 280, 805, 0, 281, 282, 0, 0,
	283, 0, 284, 864, 863, 285, 286, 288, 427, 287,
	806, 289, 290, 292, 291, 0, 0, 0, 428, 293,
	429, 294, 295, 0, 296, 0, 855, 297, 298, 0,
	0, 299, 430, 807, 300, 808, 780, 301, 302, 303,
	304, 305, 306, 307, 0, 308, 781, 309, 433, 310,
	0, 311, 312, 313, 314, 315, 434, 316, 317, 0,
	318, 319, 320, 321, 322, 0, 324, 325, 323, 326,
	327, 328, 329, 0, 330, 809, 0, 331, 332, 333,
	435, 334, 0, 338, 339, 340, 341, 342, 165, 344,
	345, 436, 437, 438, 439, 343, 346, 347, 0, 348,
	335, 336, 349, 810, 350, 440, 441, 351, 0, 359,
	352, 353, 354, 337, 355, 358, 442, 356, 0, 357,
	785, 0, 360, 361, 167, 362, 363, 364, 365, 366,
	367, 368, 369, 0, 444, 445, 446, 0, 0, 370,
	371, 789, 790, 0, 372, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 0, 380, 0, 449, 381, 382,
	383, 1069, 451, 0, 0, 384, 0, 0, 730, 159,
	385, 386, 0, 387, 388, 389, 0, 160, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 0, 214,
	0, 0, 0, 0, 390, 0, 847, 0, 1353, 215,
	216, 217, 391, 392, 393, 394, 218, 395, 396, 0,
	219, 397, 398, 220, 221, 222, 0, 0, 399, 400,
	401, 0, 223, 402, 0, 862, 0, 224, 225, 226,
	227, 228, 0, 230, 231, 232, 229, 0, 233, 0,
	234, 235, 0, 797, 236, 237, 238, 0, 857, 858,
	0, 0, 859, 860, 239, 240, 460, 241, 403, 242,
	404, 405, 0, 243, 0, 244, 0, 245, 0, 0,
	246, 247, 0, 248, 0, 0, 0, 406, 249, 250,
	251, 252, 253, 764, 765, 0, 798, 0, 0, 0,
	0, 0, 254, 255, 409, 410, 411, 0, 256, 0,
	257, 0, 0, 799, 258, 0, 259, 769, 0, 413,
	0, 260, 261, 262, 263, 264, 265, 414, 415, 801,
	0, 416, 269, 0, 266, 0, 800, 267, 417, 268,
	418, 419, 420, 421, 422, 0, 423, 0, 270, 802,
	271, 272, 273, 803, 424, 425, 0, 0, 274, 275,
	276, 0, 278, 277, 0, 778, 804, 279, 280, 805,
	0, 281, 282, 0, 0, 283, 0, 284, 864, 863,
	285, 286, 288, 427, 287, 806, 289, 290, 292, 291,
	0, 0, 0, 428, 293, 429, 294, 295, 0, 296,
	0, 855, 297, 298, 0, 0, 299, 430, 807, 300,
	808, 780, 301, 302, 303, 304, 305, 306, 307, 0,
	308, 781, 309, 433, 310, 0, 311, 312, 313, 314,
	315, 434, 316, 317, 0, 318, 319, 320, 321, 322,
	0, 324, 325, 323, 326, 327, 328, 329, 0, 330,
	809, 0, 331, 332, 333, 435, 334, 0, 338, 339,
	340, 341, 342, 165, 344, 345, 436, 437, 438, 439,
	343, 346, 347, 0, 348, 335, 336, 349, 810, 350,
	440, 441, 351, 0, 359, 352, 353, 354, 337, 355,
	358, 442, 356, 0, 357, 785, 0, 360, 361, 167,
	362, 363, 364, 365, 366, 367, 368, 369, 0, 444,
	445, 446, 0, 0, 370, 371, 789, 790, 0, 372,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 0,
	380, 0, 449, 381, 382, 383, 1069, 451, 0, 0,
	384, 0, 0, 730, 159, 385, 386, 0, 387, 388,
	389, 0, 160, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 0, 214, 0, 0, 0, 0, 748,
	0, 847, 0, 1353, 215, 216, 217, 391, 392, 393,
	394, 218, 395, 396, 0, 219, 397, 398, 220, 221,
	222, 0, 747, 399, 400, 401, 0, 223, 752, 0,
	739, 0, 224, 225, 226, 227, 228, 0, 230, 231,
	232, 229, 0, 233, 0, 234, 235, 0, 797, 236,
	237, 238, 0, 740, 741, 743, 0, 742, 744, 239,
	240, 460, 241, 403, 242, 404, 405, 0, 243, 0,
	244, 0, 245, 0, 0, 246, 247, 0, 248, 0,
	0, 0, 406, 249, 250, 251, 252, 253, 764, 765,
	0, 798, 0, 0, 0, 0, 0, 254, 255, 409,
	410, 411, 0, 256, 0, 257, 0, 0, 799, 258,
	0, 259, 769, 0, 413, 0, 260, 261, 262, 263,
	264, 265, 749, 751, 801, 0, 416, 269, 0, 266,
	0, 800, 267, 417, 268, 418, 419, 420, 421, 422,
	0, 423, 0, 270, 802, 271, 272, 273, 803, 424,
	425, 0, 0, 274, 275, 276, 0, 278, 277, 0,
	778, 804, 279, 280, 805, 0, 281, 282, 0, 0,
	283, 0, 284, 864, 863, 285, 286, 288, 427, 287,
	806, 289, 290, 292, 291, 0, 0, 0, 750, 293,
	429, 294, 295, 0, 296, 0, 0, 297, 298, 0,
	0, 299, 430, 807, 300, 808, 780, 301, 302, 303,
	304, 305, 306, 307, 0, 308, 781, 309, 433, 310,
	0, 311, 312, 313, 314, 315, 434, 316, 317, 0,
	318, 319, 320, 321, 322, 0, 324, 325, 323, 326,
	327, 328, 329, 0, 330, 809, 0, 331, 332, 333,
	435, 334, 0, 338, 339, 340, 341, 342, 0, 344,
	345, 436, 437, 438, 439, 343, 346, 347, 745, 348,
	335, 336, 349, 810, 350, 440, 441, 351, 0, 359,
	352, 353, 354, 337, 355, 358, 442, 356, 0, 357,
	785, 0, 360, 361, 0, 362, 363, 364, 365, 366,
	367, 368, 369, 0, 444, 445, 446, 0, 0, 370,
	371, 789, 790, 0, 372, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 746, 380, 0, 449, 381, 382,
	383, 450, 451, 0, 0, 384, 2154, 0, 730, 0,
	385, 386, 0, 387, 388, 389, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 0, 214,
	0, 0, 0, 0, 390, 0, 0, 0, 2459, 215,
	216, 217, 391, 392, 393, 394, 218, 395, 396, 0,
	219, 397, 398, 220, 221, 222, 0, 0, 399, 400,
	401, 0, 223, 402, 0, 862, 0, 224, 225, 226,
	227, 228, 0, 230, 231, 232, 229, 0, 233, 0,
	234, 235, 0, 797, 236, 237, 238, 0, 857, 858,
	0, 0, 859, 860, 239, 240, 460, 241, 403, 242,
	404, 405, 0, 243, 0, 244, 0, 245, 0, 0,
	246, 247, 0, 248, 0, 0, 0, 406, 249, 250,
	251, 252, 253, 764, 765, 0, 798, 0, 0, 0,
	0, 0, 254, 255, 409, 410, 411, 0, 256, 0,
	257, 0, 0, 799, 258, 0, 259, 769, 0, 413,
	0, 260, 261, 262, 263, 264, 265, 414, 415, 801,
	0, 416, 269, 0, 266, 0, 800, 267, 417, 268,
	418, 419, 420, 421, 422, 0, 423, 0, 270, 802,
	271, 272, 273, 803, 424, 425, 0, 0, 274, 275,
	276, 0, 278, 277, 0, 778, 804, 279, 280, 805,
	0, 281, 282, 0, 0, 283, 0, 284, 864, 863,
	285, 286, 288, 427, 287, 806, 289, 290, 292, 291,
	0, 0, 0, 428, 293, 429, 294, 295, 0, 296,
	0, 855, 297, 298, 0, 0, 299, 430, 807, 300,
	808, 780, 301, 302, 303, 304, 305, 306, 307, 0,
	308, 781, 309, 433, 310, 0, 311, 312, 313, 314,
	315, 434, 316, 317, 0, 318, 319, 320, 321, 322,
	0, 324, 325, 323, 326, 327, 328, 329, 0, 330,
	809, 0, 331, 332, 333, 435, 334, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 436, 437, 438, 439,
	343, 346, 347, 0, 348, 335, 336, 349, 810, 350,
	440, 441, 351, 0, 359, 352, 353, 354, 337, 355,
	358, 442, 356, 0, 357, 785, 0, 360, 361, 0,
	362, 363, 364, 365, 366, 367, 368, 369, 0, 444,
	445, 446, 0, 0, 370, 371, 789, 790, 0, 372,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 0,
	380, 0, 449, 381, 382, 383, 450, 451, 0, 0,
	384, 846, 0, 730, 0, 385, 386, 0, 387, 388,
	389, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 0, 214, 0, 0, 0, 0, 390,
	0, 847, 0, 853, 215, 216, 217, 391, 392, 393,
	394, 218, 395, 396, 0, 219, 397, 398, 220, 221,
	222, 0, 0, 399, 400, 401, 0, 223, 402, 0,
	862, 0, 224, 225, 226, 227, 228, 0, 230, 231,
	232, 229, 0, 233, 0, 234, 235, 0, 797, 236,
	237, 238, 0, 857, 858, 0, 0, 859, 860, 239,
	240, 460, 241, 403, 242, 404, 405, 0, 243, 0,
	244, 0, 245, 0, 0, 246, 247, 0, 248, 0,
	0, 0, 406, 249, 250, 251, 252, 253, 764, 765,
	0, 798, 0, 0, 0, 0, 0, 254, 255, 409,
	410, 411, 0, 256, 0, 257, 0, 0, 799, 258,
	0, 259, 769, 0, 413, 0, 260, 261, 262, 263,
	264, 265, 414, 415, 801, 0, 416, 269, 0, 266,
	0, 800, 267, 417, 268, 418, 419, 420, 421, 422,
	0, 423, 0, 270, 802, 271, 272, 273, 803, 424,
	425, 0, 0, 274, 275, 276, 0, 278, 277, 0,
	778, 804, 279, 280, 805, 0, 281, 282, 0, 0,
	283, 0, 284, 864, 863, 285, 286, 288, 427, 287,
	806, 289, 290, 292, 291, 0, 0, 0, 428, 293,
	429, 294, 295, 0, 296, 0, 855, 297, 298, 0,
	0, 299, 430, 807, 300, 808, 780, 301, 302, 303,
	304, 305, 306, 307, 0, 308, 781, 309, 433, 310,
	0, 311, 312, 313, 314, 315, 434, 316, 317, 0,
	318, 319, 320, 321, 322, 0, 324, 325, 323, 326,
	327, 328, 329, 0, 330, 809, 0, 331, 332, 333,
	435, 334, 0, 338, 339, 340, 341, 342, 0, 344,
	345, 436, 437, 438, 439, 343, 346, 347, 0, 348,
	335, 336, 349, 810, 350, 440, 441, 351, 0, 359,
	352, 353, 354, 337, 355, 358, 442, 356, 0, 357,
	785, 0, 360, 361, 0, 362, 363, 364, 365, 366,
	367, 368, 369, 0, 444, 445, 446, 0, 0, 370,
	371, 789, 790, 0, 372, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 0, 380, 0, 449, 381, 382,
	383, 450, 451, 0, 0, 384, 0, 0, 730, 0,
	385, 386, 0, 387, 388, 389, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 0, 214,
	0, 0, 0, 0, 390, 0, 847, 0, 853, 215,
	216, 217, 391, 392, 393, 394, 218, 395, 396, 0,
	219, 397, 398, 220, 221, 222, 0, 0, 399, 400,
	401, 0, 223, 402, 0, 862, 0, 224, 225, 226,
	227, 228, 0, 230, 231, 232, 229, 0, 233, 0,
	234, 235, 0, 797, 236, 237, 238, 0, 857, 858,
	0, 0, 859, 860, 239, 240, 460, 241, 403, 242,
	404, 405, 0, 243, 0, 244, 0, 245, 0, 0,
	246, 247, 0, 248, 0, 0, 0, 406, 249, 250,
	251, 252, 253, 764, 765, 0, 798, 0, 0, 0,
	0, 0, 254, 255, 409, 410, 411, 0, 256, 0,
	257, 0, 0, 799, 258, 0, 259, 769, 0, 413,
	0, 260, 261, 262, 263, 264, 265, 414, 415, 801,
	0, 416, 269, 0, 266, 0, 800, 267, 417, 268,
	418, 419, 420, 421, 422, 0, 423, 0, 270, 802,
	271, 272, 273, 803, 424, 425, 0, 0, 274, 275,
	276, 0, 278, 277, 0, 778, 804, 279, 280, 805,
	0, 281, 282, 0, 0, 283, 0, 284, 864, 863,
	285, 286, 288, 427, 287, 806, 289, 290, 292, 291,
	0, 0, 0, 428, 293, 429, 294, 295, 0, 296,
	0, 855, 297, 298, 0, 0, 299, 430, 807, 300,
	808, 780, 301, 302, 303, 304, 305, 306, 307, 0,
	308, 781, 309, 433, 310, 0, 311, 312, 313, 314,
	315, 434, 316, 317, 0, 318, 319, 320, 321, 322,
	0, 324, 325, 323, 326, 327, 328, 329, 0, 330,
	809, 0, 331, 332, 333, 435, 334, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 436, 437, 438, 439,
	343, 346, 347, 0, 348, 335, 336, 349, 810, 350,
	440, 441, 351, 0, 359, 352, 353, 354, 337, 355,
	358, 442, 356, 0, 357, 785, 0, 360, 361, 0,
	362, 363, 364, 365, 366, 367, 368, 369, 0, 444,
	445, 446, 0, 0, 370, 371, 789, 790, 0, 372,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 0,
	380, 0, 449, 381, 382, 383, 450, 451, 0, 0,
	384, 1066, 0, 885, 0, 385, 386, 0, 387, 388,
	389, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 0, 214, 0, 0, 0, 0, 390,
	0, 847, 0, 853, 215, 216, 217, 391, 392, 393,
	394, 218, 395, 396, 0, 219, 397, 398, 220, 221,
	222, 0, 0, 399, 400, 401, 0, 223, 402, 0,
	862, 0, 224, 225, 226, 227, 228, 0, 230, 231,
	232, 229, 0, 233, 0, 234, 235, 0, 797, 236,
	237, 238, 0, 0, 0, 0, 0, 0, 0, 239,
	240, 460, 241, 403, 242, 404, 405, 0, 243, 0,
	244, 0, 245, 0, 0, 246, 247, 0, 248, 0,
	0, 0, 406, 249, 250, 251, 252, 253, 407, 408,
	0, 798, 0, 0, 0, 0, 0, 254, 255, 409,
	410, 411, 0, 256, 0, 257, 0, 0, 799, 258,
	0, 259, 412, 0, 413, 0, 260, 261, 262, 263,
	264, 265, 414, 415, 801, 0, 416, 269, 0, 266,
	0, 800, 267, 417, 268, 418, 419, 420, 421, 422,
	0, 423, 0, 270, 802, 271, 272, 273, 803, 424,
	425, 0, 0, 274, 275, 276, 0, 278, 277, 0,
	426, 804, 279, 280, 805, 0, 281, 282, 0, 0,
	283, 0, 284, 864, 863, 285, 286, 288, 427, 287,
	806, 289, 290, 292, 291, 0, 0, 0, 428, 293,
	429, 294, 295, 0, 296, 0, 0, 297, 298, 0,
	0, 299, 430, 807, 300, 808, 431, 301, 302, 303,
	304, 305, 306, 307, 0, 308, 432, 309, 433, 310,
	0, 311, 312, 313, 314, 315, 434, 316, 317, 0,
	318, 319, 320, 321, 322, 0, 324, 325, 323, 326,
	327, 328, 329, 0, 330, 809, 0, 331, 332, 333,
	435, 334, 0, 338, 339, 340, 341, 342, 165, 344,
	345, 436, 437, 438, 439, 343, 346, 347, 0, 348,
	335, 336, 349, 810, 350, 440, 441, 351, 0, 359,
	352, 353, 354, 337, 355, 358, 442, 356, 0, 357,
	443, 0, 360, 361, 167, 362, 363, 364, 365, 366,
	367, 368, 369, 0, 444, 445, 446, 0, 0, 370,
	371, 447, 448, 0, 372, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 0, 380, 0, 449, 381, 382,
	383, 1069, 451, 0, 0, 384, 678, 0, 207, 159,
	385, 386, 0, 387, 388, 389, 0, 160, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 0, 214,
	0, 0, 0, 0, 390, 0, 0, 0, 132, 215,
	216, 217, 391, 392, 393, 394, 218, 395, 396, 0,
	219, 397, 398, 220, 221, 222, 0, 0, 399, 400,
	401, 0, 223, 402, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 230, 231, 232, 229, 0, 233, 0,
	234, 235, 0, 0, 236, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 460, 241, 403, 242,
	404, 405, 0, 243, 0, 244, 0, 245, 0, 0,
	246, 247, 0, 248, 0, 0, 0, 406, 249, 250,
	251, 252, 253, 407, 408, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 409, 410, 411, 0, 256, 0,
	257, 0, 0, 0, 258, 0, 259, 412, 0, 413,
	0, 260, 261, 262, 263, 264, 265, 414, 415, 0,
	0, 416, 269, 0, 266, 0, 0, 267, 417, 268,
	418, 419, 420, 421, 422, 0, 423, 0, 270, 0,
	271, 272, 273, 0, 424, 425, 0, 0, 274, 275,
	276, 0, 278, 277, 0, 426, 0, 279, 280, 0,
	0, 281, 282, 0, 0, 283, 0, 284, 0, 0,
	285, 286, 288, 427, 287, 0, 289, 290, 292, 291,
	0, 0, 0, 428, 293, 429, 294, 295, 0, 296,
	0, 0, 297, 298, 0, 0, 299, 430, 0, 300,
	0, 431, 301, 302, 303, 304, 305, 306, 307, 0,
	308, 432, 309, 433, 310, 0, 311, 312, 313, 314,
	315, 434, 316, 317, 0, 318, 319, 320, 321, 322,
	0, 324, 325, 323, 326, 327, 328, 329, 0, 330,
	0, 0, 331, 332, 333, 435, 334, 0, 338, 339,
	340, 341, 342, 165, 344, 345, 436, 437, 438, 439,
	343, 346, 347, 0, 348, 335, 336, 349, 0, 350,
	440, 441, 351, 0, 359, 352, 353, 354, 337, 355,
	358, 442, 356, 0, 357, 443, 0, 360, 361, 167,
	362, 363, 364, 365, 366, 367, 368, 369, 0, 444,
	445, 446, 0, 0, 370, 371, 447, 448, 0, 372,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 0,
	380, 0, 449, 381, 382, 383, 1069, 451, 0, 0,
	384, 0, 0, 207, 159, 385, 386, 0, 387, 388,
	389, 0, 160, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 0, 214, 0, 0, 0, 0, 390,
	0, 0, 0, 132, 215, 216, 217, 391, 392, 393,
	394, 218, 395, 396, 0, 219, 397, 398, 220, 221,
	222, 0, 0, 399, 400, 401, 0, 223, 402, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 230, 231,
	232, 229, 0, 233, 0, 234, 235, 0, 0, 236,
	237, 238, 0, 0, 0, 0, 0, 0, 0, 239,
	240, 460, 241, 403, 242, 404, 405, 0, 243, 0,
	244, 0, 245, 0, 0, 246, 247, 0, 248, 0,
	0, 0, 406, 249, 250, 251, 252, 253, 407, 408,
	0, 0, 0, 0, 0, 0, 0, 254, 255, 409,
	410, 411, 0, 256, 0, 257, 0, 0, 0, 258,
	0, 259, 412, 0, 413, 0, 260, 261, 262, 263,
	264, 265, 414, 415, 0, 0, 416, 269, 0, 266,
	0, 0, 267, 417, 268, 418, 419, 420, 421, 422,
	0, 423, 0, 270, 0, 271, 272, 273, 0, 424,
	425, 0, 0, 274, 275, 276, 0, 278, 277, 0,
	426, 0, 279, 280, 0, 0, 281, 282, 0, 0,
	283, 0, 284, 0, 0, 285, 286, 288, 427, 287,
	0, 289, 290, 292, 291, 0, 0, 0, 428, 293,
	429, 294, 295, 0, 296, 0, 0, 297, 298, 0,
	0, 299, 430, 0, 300, 0, 431, 301, 302, 303,
	304, 305, 306, 307, 0, 308, 432, 309, 433, 310,
	0, 311, 312, 313, 314, 315, 434, 316, 317, 0,
	318, 319, 320, 321, 322, 0, 324, 325, 323, 326,
	327, 328, 329, 0, 330, 0, 0, 331, 332, 333,
	435, 334, 0, 338, 339, 340, 341, 342, 0, 344,
	345, 436, 437, 438, 439, 343, 346, 347, 0, 348,
	335, 336, 349, 0, 350, 440, 441, 351, 0, 359,
	352, 353, 354, 337, 355, 358, 442, 356, 0, 357,
	443, 0, 360, 361, 0, 362, 363, 364, 365, 366,
	367, 368, 369, 0, 444, 445, 446, 0, 0, 370,
	371, 447, 448, 0, 372, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 0, 380, 0, 449, 381, 382,
	383, 450, 451, 0, 0, 384, 0, 0, 0, 0,
	385, 386, 0, 387, 388, 389, 730, 718, 719, 716,
	717, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 1955, 0,
	0, 0, 390, 0, 0, 0, 0, 215, 216, 217,
	391, 755, 393, 756, 218, 757, 758, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 759, 760, 401, 0,
	223, 402, 0, 862, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 797, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 761, 242, 762, 763,
	0, 243, 0, 244, 0, 245, 0, 0, 754, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 725, 798, 0, 0, 0, 0, 0,
	254, 255, 766, 767, 768, 0, 256, 0, 257, 0,
	0, 799, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 414, 415, 801, 0, 416,
	269, 0, 266, 0, 800, 267, 770, 268, 771, 772,
	773, 774, 775, 0, 738, 0, 270, 802, 271, 272,
	273, 803, 776, 777, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 804, 279, 280, 805, 0, 281,
	282, 0, 0, 283, 0, 284, 864, 863, 285, 286,
	288, 427, 287, 806, 289, 290, 292, 291, 0, 0,
	726, 428, 293, 779, 294, 295, 0, 296, 0, 0,
	297, 298, 0, 0, 299, 430, 807, 300, 808, 431,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 782,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 809, 0,
	331, 332, 333, 435, 334, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 348, 335, 336, 349, 810, 350, 783, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 784,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 786, 787, 788,
	0, 0, 370, 371, 447, 448, 724, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 791, 207, 0, 384, 0,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 0, 0,
	0, 0, 390, 0, 0, 0, 0, 215, 216, 217,
	391, 392, 393, 394, 218, 395, 396, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 399, 400, 401, 0,
	223, 402, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 0, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 403, 242, 404, 405,
	0, 243, 0, 244, 0, 245, 0, 0, 246, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 409, 410, 411, 0, 256, 0, 257, 0,
	0, 0, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 414, 415, 0, 0, 416,
	269, 0, 266, 0, 0, 267, 417, 268, 418, 419,
	420, 421, 422, 0, 423, 0, 270, 0, 271, 272,
	273, 0, 424, 425, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 0, 279, 280, 0, 0, 281,
	282, 0, 0, 283, 0, 284, 0, 0, 285, 286,
	288, 427, 287, 0, 289, 290, 292, 291, 0, 0,
	0, 428, 293, 429, 294, 295, 0, 296, 0, 0,
	297, 298, 0, 0, 299, 430, 0, 300, 0, 431,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 434,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 0, 0,
	331, 332, 333, 435, 334, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 348, 335, 336, 349, 0, 350, 440, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 442,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 444, 445, 446,
	0, 0, 370, 371, 447, 448, 0, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 451, 0, 0, 384, 0,
	0, 207, 0, 385, 386, 0, 387, 388, 389, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 212,
	213, 0, 214, 0, 0, 0, 0, 390, 0, 0,
	0, 2372, 215, 216, 217, 391, 392, 393, 394, 218,
	395, 396, 0, 219, 397, 398, 220, 221, 222, 0,
	0, 399, 400, 401, 0, 223, 402, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 230, 231, 232, 229,
	0, 233, 0, 234, 235, 0, 0, 236, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 460,
	241, 403, 242, 404, 405, 0, 243, 0, 244, 0,
	245, 0, 0, 246, 247, 0, 248, 0, 0, 0,
	406, 249, 250, 251, 252, 253, 407, 408, 0, 0,
	0, 0, 0, 0, 0, 254, 255, 409, 410, 411,
	0, 256, 0, 257, 0, 0, 0, 258, 0, 259,
	412, 0, 413, 0, 260, 261, 262, 263, 264, 265,
	414, 415, 0, 0, 416, 269, 0, 266, 0, 0,
	267, 417, 268, 418, 419, 420, 421, 422, 0, 423,
	0, 270, 0, 271, 272, 273, 0, 424, 425, 0,
	0, 274, 275, 276, 0, 278, 277, 0, 426, 0,
	279, 280, 0, 0, 281, 282, 0, 0, 283, 0,
	284, 0, 0, 285, 286, 288, 427, 287, 0, 289,
	290, 292, 291, 0, 0, 0, 428, 293, 429, 294,
	295, 0, 296, 0, 0, 297, 298, 0, 0, 299,
	430, 0, 300, 0, 431, 301, 302, 303, 304, 305,
	306, 307, 0, 308, 432, 309, 433, 310, 0, 311,
	312, 313, 314, 315, 434, 316, 317, 0, 318, 319,
	320, 321, 322, 0, 324, 325, 323, 326, 327, 328,
	329, 0, 330, 0, 0, 331, 332, 333, 435, 334,
	0, 338, 339, 340, 341, 342, 0, 344, 345, 436,
	437, 438, 439, 343, 346, 347, 0, 348, 335, 336,
	349, 0, 350, 440, 441, 351, 0, 359, 352, 353,
	354, 337, 355, 358, 442, 356, 0, 357, 443, 0,
	360, 361, 0, 362, 363, 364, 365, 366, 367, 368,
	369, 0, 444, 445, 446, 0, 0, 370, 371, 447,
	448, 0, 372, 373, 374, 375, 0, 0, 376, 377,
	378, 379, 0, 380, 0, 449, 381, 382, 383, 450,
	451, 0, 0, 384, 0, 0, 0, 0, 385, 386,
	0, 387, 388, 389, 1136, 0, 885, 884, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 1357, 214, 0, 0,
	0, 0, 390, 0, 0, 0, 0, 215, 216, 217,
	391, 392, 393, 394, 218, 395, 396, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 399, 400, 401, 0,
	223, 402, 0, 862, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 797, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 403, 242, 404, 405,
	0, 243, 0, 244, 0, 245, 0, 0, 246, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 0, 798, 0, 0, 0, 0, 0,
	254, 255, 409, 410, 411, 0, 256, 0, 257, 0,
	0, 799, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 414, 415, 801, 0, 416,
	269, 0, 266, 0, 800, 267, 417, 268, 418, 419,
	420, 421, 422, 0, 423, 0, 270, 802, 271, 272,
	273, 803, 424, 425, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 804, 279, 280, 805, 0, 281,
	282, 0, 0, 283, 0, 284, 864, 863, 285, 286,
	288, 427, 287, 806, 289, 290, 292, 291, 0, 0,
	0, 428, 293, 429, 294, 295, 0, 296, 0, 0,
	297, 298, 0, 0, 299, 430, 807, 300, 808, 431,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 434,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 809, 0,
	331, 332, 333, 435, 334, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 348, 335, 336, 349, 810, 350, 440, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 442,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 444, 445, 446,
	0, 0, 370, 371, 447, 448, 0, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 451, 0, 0, 384, 0,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 1062,
	0, 885, 884, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 212,
	213, 0, 214, 0, 0, 0, 0, 390, 0, 0,
	0, 0, 215, 216, 217, 391, 392, 393, 394, 218,
	395, 396, 0, 219, 397, 398, 220, 221, 222, 0,
	0, 399, 400, 401, 0, 223, 402, 0, 862, 0,
	224, 225, 226, 227, 228, 0, 230, 231, 232, 229,
	0, 233, 0, 234, 235, 0, 797, 236, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 460,
	241, 403, 242, 404, 405, 0, 243, 0, 244, 0,
	245, 0, 0, 246, 247, 0, 248, 0, 0, 0,
	406, 249, 250, 251, 252, 253, 407, 408, 0, 798,
	0, 0, 0, 0, 0, 254, 255, 409, 410, 411,
	0, 256, 0, 257, 0, 0, 799, 258, 0, 259,
	412, 0, 413, 0, 260, 261, 262, 263, 264, 265,
	1061, 415, 801, 0, 416, 269, 0, 266, 0, 800,
	267, 417, 268, 418, 419, 420, 421, 422, 0, 423,
	0, 270, 802, 271, 272, 273, 803, 424, 425, 0,
	0, 274, 275, 276, 0, 278, 277, 0, 426, 804,
	279, 280, 805, 0, 281, 282, 0, 0, 283, 0,
	284, 864, 863, 285, 286, 288, 427, 287, 806, 289,
	290, 292, 291, 0, 0, 0, 428, 293, 429, 294,
	295, 0, 296, 0, 0, 297, 298, 0, 0, 299,
	430, 807, 300, 808, 431, 301, 302, 303, 304, 305,
	306, 307, 0, 308, 432, 309, 433, 310, 0, 311,
	312, 313, 314, 315, 434, 316, 317, 0, 318, 319,
	320, 321, 322, 0, 324, 325, 323, 326, 327, 328,
	329, 0, 330, 809, 0, 331, 332, 333, 435, 334,
	0, 338, 339, 340, 341, 342, 0, 344, 345, 436,
	437, 438, 439, 343, 346, 347, 0, 348, 335, 336,
	349, 810, 350, 440, 441, 351, 0, 359, 352, 353,
	354, 337, 355, 358, 442, 356, 0, 357, 443, 0,
	360, 361, 0, 362, 363, 364, 365, 366, 367, 368,
	369, 0, 444, 445, 446, 0, 0, 370, 371, 447,
	448, 0, 372, 373, 374, 375, 0, 0, 376, 377,
	378, 379, 0, 380, 0, 449, 381, 382, 383, 450,
	451, 0, 0, 384, 0, 0, 0, 0, 385, 386,
	0, 387, 388, 389, 1058, 0, 885, 884, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 0, 0,
	0, 0, 390, 0, 0, 0, 0, 215, 216, 217,
	391, 392, 393, 394, 218, 395, 396, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 399, 400, 401, 0,
	223, 402, 0, 862, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 797, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 403, 242, 404, 405,
	0, 243, 0, 244, 0, 245, 0, 0, 246, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 0, 798, 0, 0, 0, 0, 0,
	254, 255, 409, 410, 411, 0, 256, 0, 257, 0,
	0, 799, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 1057, 415, 801, 0, 416,
	269, 0, 266, 0, 800, 267, 417, 268, 418, 419,
	420, 421, 422, 0, 423, 0, 270, 802, 271, 272,
	273, 803, 424, 425, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 804, 279, 280, 805, 0, 281,
	282, 0, 0, 283, 0, 284, 864, 863, 285, 286,
	288, 427, 287, 806, 289, 290, 292, 291, 0, 0,
	0, 428, 293, 429, 294, 295, 0, 296, 0, 0,
	297, 298, 0, 0, 299, 430, 807, 300, 808, 431,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 434,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 809, 0,
	331, 332, 333, 435, 334, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 348, 335, 336, 349, 810, 350, 440, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 442,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 444, 445, 446,
	0, 0, 370, 371, 447, 448, 0, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 451, 0, 0, 384, 0,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 1019,
	0, 885, 884, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 212,
	213, 0, 214, 0, 0, 0, 0, 390, 0, 0,
	0, 0, 215, 216, 217, 391, 392, 393, 394, 218,
	395, 396, 0, 219, 397, 398, 220, 221, 222, 0,
	0, 399, 400, 401, 0, 223, 402, 0, 862, 0,
	224, 225, 226, 227, 228, 0, 230, 231, 232, 229,
	0, 233, 0, 234, 235, 0, 797, 236, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 460,
	241, 403, 242, 404, 405, 0, 243, 0, 244, 0,
	245, 0, 0, 246, 247, 0, 248, 0, 0, 0,
	406, 249, 250, 251, 252, 253, 407, 408, 0, 798,
	0, 0, 0, 0, 0, 254, 255, 409, 410, 411,
	0, 256, 0, 257, 0, 0, 799, 258, 0, 259,
	412, 0, 413, 0, 260, 261, 262, 263, 264, 265,
	1018, 415, 801, 0, 416, 269, 0, 266, 0, 800,
	267, 417, 268, 418, 419, 420, 421, 422, 0, 423,
	0, 270, 802, 271, 272, 273, 803, 424, 425, 0,
	0, 274, 275, 276, 0, 278, 277, 0, 426, 804,
	279, 280, 805, 0, 281, 282, 0, 0, 283, 0,
	284, 864, 863, 285, 286, 288, 427, 287, 806, 289,
	290, 292, 291, 0, 0, 0, 428, 293, 429, 294,
	295, 0, 296, 0, 0, 297, 298, 0, 0, 299,
	430, 807, 300, 808, 431, 301, 302, 303, 304, 305,
	306, 307, 0, 308, 432, 309, 433, 310, 0, 311,
	312, 313, 314, 315, 434, 316, 317, 0, 318, 319,
	320, 321, 322, 0, 324, 325, 323, 326, 327, 328,
	329, 0, 330, 809, 0, 331, 332, 333, 435, 334,
	0, 338, 339, 340, 341, 342, 0, 344, 345, 436,
	437, 438, 439, 343, 346, 347, 0, 348, 335, 336,
	349, 810, 350, 440, 441, 351, 0, 359, 352, 353,
	354, 337, 355, 358, 442, 356, 0, 357, 443, 0,
	360, 361, 0, 362, 363, 364, 365, 366, 367, 368,
	369, 0, 444, 445, 446, 0, 0, 370, 371, 447,
	448, 0, 372, 373, 374, 375, 0, 0, 376, 377,
	378, 379, 0, 380, 0, 449, 381, 382, 383, 450,
	451, 0, 0, 384, 0, 0, 0, 0, 385, 386,
	0, 387, 388, 389, 1016, 0, 885, 884, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 0, 0,
	0, 0, 390, 0, 0, 0, 0, 215, 216, 217,
	391, 392, 393, 394, 218, 395, 396, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 399, 400, 401, 0,
	223, 402, 0, 862, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 797, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 403, 242, 404, 405,
	0, 243, 0, 244, 0, 245, 0, 0, 246, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 0, 798, 0, 0, 0, 0, 0,
	254, 255, 409, 410, 411, 0, 256, 0, 257, 0,
	0, 799, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 1015, 415, 801, 0, 416,
	269, 0, 266, 0, 800, 267, 417, 268, 418, 419,
	420, 421, 422, 0, 423, 0, 270, 802, 271, 272,
	273, 803, 424, 425, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 804, 279, 280, 805, 0, 281,
	282, 0, 0, 283, 0, 284, 864, 863, 285, 286,
	288, 427, 287, 806, 289, 290, 292, 291, 0, 0,
	0, 428, 293, 429, 294, 295, 0, 296, 0, 0,
	297, 298, 0, 0, 299, 430, 807, 300, 808, 431,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 434,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 809, 0,
	331, 332, 333, 435, 334, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 348, 335, 336, 349, 810, 350, 440, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 442,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 444, 445, 446,
	0, 0, 370, 371, 447, 448, 0, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 451, 0, 0, 384, 0,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 878,
	0, 885, 884, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 212,
	213, 0, 214, 0, 0, 0, 0, 390, 0, 0,
	0, 0, 215, 216, 217, 391, 392, 393, 394, 218,
	395, 396, 0, 219, 397, 398, 220, 221, 222, 0,
	0, 399, 400, 401, 0, 223, 402, 0, 862, 0,
	224, 225, 226, 227, 228, 0, 230, 231, 232, 229,
	0, 233, 0, 234, 235, 0, 797, 236, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 460,
	241, 403, 242, 404, 405, 0, 243, 0, 244, 0,
	245, 0, 0, 246, 247, 0, 248, 0, 0, 0,
	406, 249, 250, 251, 252, 253, 407, 408, 0, 798,
	0, 0, 0, 0, 0, 254, 255, 409, 410, 411,
	0, 256, 0, 257, 0, 0, 799, 258, 0, 259,
	412, 0, 413, 0, 260, 261, 262, 263, 264, 265,
	880, 415, 801, 0, 416, 269, 0, 266, 0, 800,
	267, 417, 268, 418, 419, 420, 421, 422, 0, 423,
	0, 270, 802, 271, 272, 273, 803, 424, 425, 0,
	0, 274, 275, 276, 0, 278, 277, 0, 426, 804,
	279, 280, 805, 0, 281, 282, 0, 0, 283, 0,
	284, 864, 863, 285, 286, 288, 427, 287, 806, 289,
	290, 292, 291, 0, 0, 0, 428, 293, 429, 294,
	295, 0, 296, 0, 0, 297, 298, 0, 0, 299,
	430, 807, 300, 808, 431, 301, 302, 303, 304, 305,
	306, 307, 0, 308, 432, 309, 433, 310, 0, 311,
	312, 313, 314, 315, 434, 316, 317, 0, 318, 319,
	320, 321, 322, 0, 324, 325, 323, 326, 327, 328,
	329, 0, 330, 809, 0, 331, 332, 333, 435, 334,
	0, 338, 339, 340, 341, 342, 0, 344, 345, 436,
	437, 438, 439, 343, 346, 347, 0, 348, 335, 336,
	349, 810, 350, 440, 441, 351, 0, 359, 352, 353,
	354, 337, 355, 358, 442, 356, 0, 357, 443, 0,
	360, 361, 0, 362, 363, 364, 365, 366, 367, 368,
	369, 0, 444, 445, 446, 0, 0, 370, 371, 447,
	448, 0, 372, 373, 374, 375, 0, 0, 376, 377,
	378, 379, 0, 380, 0, 449, 381, 382, 383, 450,
	451, 885, 884, 384, 0, 0, 882, 0, 385, 386,
	0, 387, 388, 389, 0, 0, 0, 210, 211, 212,
	213, 0, 214, 0, 0, 0, 0, 390, 0, 0,
	0, 0, 215, 216, 217, 391, 392, 393, 394, 218,
	395, 396, 0, 219, 397, 398, 220, 221, 222, 0,
	0, 399, 400, 401, 0, 223, 402, 0, 862, 0,
	224, 225, 226, 227, 228, 0, 230, 231, 232, 229,
	0, 233, 0, 234, 235, 0, 797, 236, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 460,
	241, 403, 242, 404, 405, 0, 243, 0, 244, 0,
	245, 0, 0, 246, 247, 0, 248, 0, 0, 0,
	406, 249, 250, 251, 252, 253, 407, 408, 0, 798,
	0, 0, 0, 0, 0, 254, 255, 409, 410, 411,
	0, 256, 0, 257, 0, 0, 799, 258, 0, 259,
	412, 0, 413, 0, 260, 261, 262, 263, 264, 265,
	414, 415, 801, 0, 416, 269, 0, 266, 0, 800,
	267, 417, 268, 418, 419, 420, 421, 422, 0, 423,
	0, 270, 802, 271, 272, 273, 803, 424, 425, 0,
	0, 274, 275, 276, 0, 278, 277, 0, 426, 804,
	279, 280, 805, 0, 281, 282, 0, 0, 283, 0,
	284, 864, 863, 285, 286, 288, 427, 287, 806, 289,
	290, 292, 291, 0, 0, 0, 428, 293, 429, 294,
	295, 0, 296, 0, 0, 297, 298, 0, 0, 299,
	430, 807, 300, 808, 431, 301, 302, 303, 304, 305,
	306, 307, 0, 308, 432, 309, 433, 310, 0, 311,
	312, 313, 314, 315, 434, 316, 317, 0, 318, 319,
	320, 321, 322, 0, 324, 325, 323, 326, 327, 328,
	329, 0, 330, 809, 0, 331, 332, 333, 435, 334,
	0, 338, 339, 340, 341, 342, 0, 344, 345, 436,
	437, 438, 439, 343, 346, 347, 0, 348, 335, 336,
	349, 810, 350, 440, 441, 351, 0, 359, 352, 353,
	354, 337, 355, 358, 442, 356, 0, 357, 443, 0,
	360, 361, 0, 362, 363, 364, 365, 366, 367, 368,
	369, 0, 444, 445, 446, 0, 0, 370, 371, 447,
	448, 0, 372, 373, 374, 375, 0, 0, 376, 377,
	378, 379, 0, 380, 0, 449, 381, 382, 383, 450,
	451, 207, 0, 384, 0, 0, 0, 0, 385, 386,
	0, 387, 388, 389, 0, 0, 0, 210, 211, 212,
	213, 0, 214, 0, 0, 0, 0, 390, 0, 0,
	0, 0, 215, 216, 217, 391, 392, 393, 394, 218,
	395, 396, 0, 219, 397, 398, 220, 221, 222, 0,
	0, 399, 400, 401, 0, 223, 402, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 230, 231, 232, 229,
	0, 233, 0, 234, 235, 0, 0, 236, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 202,
	241, 403, 242, 404, 405, 0, 243, 0, 244, 0,
	245, 0, 0, 246, 247, 0, 248, 0, 0, 0,
	406, 249, 250, 251, 252, 253, 407, 408, 0, 0,
	0, 0, 0, 0, 0, 254, 255, 409, 410, 411,
	0, 256, 0, 257, 0, 0, 0, 258, 0, 259,
	412, 0, 413, 0, 260, 261, 262, 263, 264, 265,
	414, 415, 0, 0, 416, 269, 0, 266, 0, 0,
	267, 417, 268, 418, 419, 420, 421, 422, 0, 423,
	0, 270, 0, 271, 272, 273, 0, 424, 425, 0,
	0, 274, 275, 276, 0, 278, 277, 0, 426, 0,
	279, 280, 0, 0, 281, 282, 0, 0, 283, 0,
	284, 0, 0, 285, 286, 288, 427, 287, 0, 289,
	290, 292, 291, 0, 0, 0, 428, 293, 429, 294,
	295, 0, 296, 0, 0, 297, 298, 0, 0, 299,
	430, 0, 300, 0, 431, 301, 302, 303, 304, 305,
	306, 307, 0, 308, 432, 309, 433, 310, 0, 311,
	312, 313, 314, 315, 434, 316, 317, 0, 318, 319,
	320, 321, 322, 0, 324, 325, 323, 326, 327, 328,
	329, 0, 330, 0, 1580, 331, 332, 333, 435, 334,
	0, 338, 339, 340, 341, 342, 0, 344, 345, 436,
	437, 438, 439, 343, 346, 347, 0, 348, 335, 336,
	349, 0, 350, 440, 441, 351, 0, 359, 352, 353,
	354, 337, 355, 358, 442, 356, 0, 357, 443, 0,
	360, 361, 201, 362, 363, 364, 365, 366, 367, 368,
	369, 0, 444, 445, 446, 0, 0, 370, 371, 447,
	448, 0, 372, 373, 374, 375, 0, 0, 376, 377,
	378, 379, 0, 380, 0, 449, 381, 382, 383, 450,
	451, 0, 554, 384, 207, 0, 0, 0, 385, 386,
	0, 387, 388, 389, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 0, 214, 0, 0, 0, 206,
	390, 0, 0, 0, 0, 215, 216, 217, 391, 392,
	393, 394, 218, 395, 396, 0, 219, 397, 398, 220,
	221, 222, 0, 0, 399, 400, 401, 0, 223, 402,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 230,
	231, 232, 229, 0, 233, 0, 234, 235, 0, 0,
	236, 237, 238, 0, 0, 0, 0, 0, 0, 0,
	239, 240, 202, 241, 403, 242, 404, 405, 0, 243,
	0, 244, 0, 245, 0, 0, 246, 247, 0, 248,
	0, 0, 0, 406, 249, 250, 251, 252, 253, 407,
	408, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	409, 410, 411, 0, 256, 0, 257, 0, 0, 0,
	258, 0, 259, 412, 0, 413, 0, 260, 261, 262,
	263, 264, 265, 414, 415, 0, 0, 416, 269, 0,
	266, 0, 0, 267, 417, 268, 418, 419, 420, 421,
	422, 0, 423, 0, 270, 0, 271, 272, 273, 0,
	424, 425, 0, 0, 274, 275, 276, 0, 278, 277,
	0, 426, 0, 279, 280, 0, 0, 281, 282, 0,
	0, 283, 0, 284, 0, 0, 285, 286, 288, 427,
	287, 0, 289, 290, 292, 291, 0, 0, 0, 428,
	293, 429, 294, 295, 0, 296, 0, 0, 297, 298,
	0, 0, 299, 430, 0, 300, 0, 431, 301, 302,
	303, 304, 305, 306, 307, 0, 308, 432, 309, 433,
	310, 0, 311, 312, 313, 314, 315, 434, 316, 317,
	0, 318, 319, 320, 321, 322, 0, 324, 325, 323,
	326, 327, 328, 329, 0, 330, 0, 0, 331, 332,
	333, 435, 334, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 436, 437, 438, 439, 343, 346, 347, 0,
	348, 335, 336, 349, 0, 350, 440, 441, 351, 0,
	359, 352, 353, 354, 337, 355, 358, 442, 356, 0,
	357, 443, 0, 360, 361, 201, 362, 363, 364, 365,
	366, 367, 368, 369, 0, 444, 445, 446, 0, 0,
	370, 371, 447, 448, 0, 372, 373, 374, 375, 0,
	0, 376, 377, 378, 379, 0, 380, 0, 449, 381,
	382, 383, 450, 451, 0, 199, 384, 207, 0, 0,
	0, 385, 386, 0, 387, 388, 389, 0, 0, 0,
	0, 0, 0, 210, 211, 212, 213, 0, 214, 0,
	0, 0, 206, 390, 0, 0, 0, 0, 215, 216,
	217, 391, 392, 393, 394, 218, 395, 396, 0, 219,
	397, 398, 220, 221, 222, 0, 0, 399, 400, 401,
	0, 223, 402, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 230, 231, 232, 229, 0, 233, 0, 234,
	235, 0, 0, 236, 237, 238, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 202, 241, 403, 242, 404,
	405, 0, 243, 0, 244, 0, 245, 0, 0, 246,
	247, 0, 248, 0, 0, 0, 406, 249, 250, 251,
	252, 253, 407, 408, 0, 0, 0, 0, 0, 0,
	0, 254, 255, 409, 410, 411, 0, 256, 0, 257,
	0, 0, 0, 258, 0, 259, 412, 0, 413, 0,
	260, 261, 262, 263, 264, 265, 414, 415, 0, 0,
	416, 269, 0, 266, 0, 0, 267, 417, 268, 418,
	419, 420, 421, 422, 0, 423, 0, 270, 0, 271,
	272, 273, 0, 424, 425, 0, 0, 274, 275, 276,
	0, 278, 277, 0, 426, 0, 279, 280, 0, 0,
	281, 282, 0, 0, 283, 0, 284, 0, 0, 285,
	286, 288, 427, 287, 0, 289, 290, 292, 291, 0,
	0, 0, 428, 293, 429, 294, 295, 0, 296, 0,
	0, 297, 298, 0, 0, 299, 430, 0, 300, 0,
	431, 301, 302, 303, 304, 305, 306, 307, 0, 308,
	432, 309, 433, 310, 0, 311, 312, 313, 314, 315,
	434, 316, 317, 0, 318, 319, 320, 321, 322, 0,
	324, 325, 323, 326, 327, 328, 329, 0, 330, 0,
	0, 331, 332, 333, 435, 334, 0, 338, 339, 340,
	341, 342, 0, 344, 345, 436, 437, 438, 439, 343,
	346, 347, 0, 348, 335, 336, 349, 0, 350, 440,
	441, 351, 0, 359, 352, 353, 354, 337, 355, 358,
	442, 356, 0, 357, 443, 0, 360, 361, 201, 362,
	363, 364, 365, 366, 367, 368, 369, 0, 444, 445,
	446, 0, 0, 370, 371, 447, 448, 0, 372, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 0, 380,
	0, 449, 381, 382, 383, 450, 451, 885, 884, 384,
	0, 0, 0, 0, 385, 386, 0, 387, 388, 389,
	0, 0, 0, 210, 211, 212, 213, 0, 214, 0,
	0, 0, 0, 390, 0, 206, 0, 0, 215, 216,
	217, 391, 392, 393, 394, 218, 395, 396, 0, 219,
	397, 398, 220, 221, 222, 0, 0, 399, 400, 401,
	0, 223, 402, 0, 862, 0, 224, 225, 226, 227,
	228, 0, 230, 231, 232, 229, 0, 233, 0, 234,
	235, 0, 797, 236, 237, 238, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 460, 241, 403, 242, 404,
	405, 0, 243, 0, 244, 0, 245, 0, 0, 246,
	247, 0, 248, 0, 0, 0, 406, 249, 250, 251,
	252, 253, 407, 408, 0, 798, 0, 0, 0, 0,
	0, 254, 255, 409, 410, 411, 0, 256, 0, 257,
	0, 0, 799, 258, 0, 259, 412, 0, 413, 0,
	260, 261, 262, 263, 264, 265, 414, 415, 801, 0,
	416, 269, 0, 266, 0, 800, 267, 417, 268, 418,
	419, 420, 421, 422, 0, 423, 0, 270, 802, 271,
	272, 273, 803, 424, 425, 0, 0, 274, 275, 276,
	0, 278, 277, 0, 426, 804, 279, 280, 805, 0,
	281, 282, 0, 0, 283, 0, 284, 864, 863, 285,
	286, 288, 427, 287, 806, 289, 290, 292, 291, 0,
	0, 0, 428, 293, 429, 294, 295, 0, 296, 0,
	0, 297, 298, 0, 0, 299, 430, 807, 300, 808,
	431, 301, 302, 303, 304, 305, 306, 307, 0, 308,
	432, 309, 433, 310, 0, 311, 312, 313, 314, 315,
	434, 316, 317, 0, 318, 319, 320, 321, 322, 0,
	324, 325, 323, 326, 327, 328, 329, 0, 330, 809,
	0, 331, 332, 333, 435, 334, 0, 338, 339, 340,
	341, 342, 0, 344, 345, 436, 437, 438, 439, 343,
	346, 347, 0, 348, 335, 336, 349, 810, 350, 440,
	441, 351, 0, 359, 352, 353, 354, 337, 355, 358,
	442, 356, 0, 357, 443, 0, 360, 361, 0, 362,
	363, 364, 365, 366, 367, 368, 369, 0, 444, 445,
	446, 0, 0, 370, 371, 447, 448, 0, 372, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 0, 380,
	0, 449, 381, 382, 383, 450, 451, 207, 0, 384,
	0, 0, 0, 0, 385, 386, 0, 387, 388, 389,
	0, 0, 0, 210, 211, 212, 213, 0, 214, 0,
	0, 0, 0, 390, 0, 0, 0, 0, 215, 216,
	217, 391, 392, 393, 394, 218, 395, 396, 0, 219,
	397, 398, 220, 221, 222, 0, 0, 399, 400, 401,
	0, 223, 402, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 230, 231, 232, 229, 0, 233, 0, 234,
	235, 0, 0, 236, 237, 238, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 202, 241, 403, 242, 404,
	405, 0, 243, 0, 244, 0, 245, 0, 0, 246,
	247, 0, 248, 0, 0, 0, 406, 249, 250, 251,
	252, 253, 407, 408, 0, 0, 0, 0, 0, 0,
	0, 254, 255, 409, 410, 411, 0, 256, 0, 257,
	0, 0, 0, 258, 0, 259, 412, 0, 413, 0,
	260, 261, 262, 263, 264, 265, 414, 415, 0, 0,
	416, 269, 0, 266, 0, 0, 267, 417, 268, 418,
	419, 420, 421, 422, 0, 423, 0, 270, 0, 271,
	272, 273, 0, 424, 425, 0, 0, 274, 275, 276,
	0, 278, 277, 0, 426, 0, 279, 280, 0, 0,
	281, 282, 0, 0, 283, 0, 284, 0, 0, 285,
	286, 288, 427, 287, 0, 289, 290, 292, 291, 0,
	0, 0, 428, 293, 429, 294, 295, 0, 296, 0,
	0, 297, 298, 0, 0, 299, 430, 0, 300, 0,
	431, 301, 302, 303, 304, 305, 306, 307, 0, 308,
	432, 309, 433, 310, 0, 311, 312, 313, 314, 315,
	434, 316, 317, 0, 318, 319, 320, 321, 322, 0,
	324, 325, 323, 326, 327, 328, 329, 0, 330, 0,
	0, 331, 332, 333, 435, 334, 0, 338, 339, 340,
	341, 342, 0, 344, 345, 436, 437, 438, 439, 343,
	346, 347, 0, 348, 335, 336, 349, 0, 350, 440,
	441, 351, 0, 359, 352, 353, 354, 337, 355, 358,
	442, 356, 0, 357, 443, 0, 360, 361, 201, 362,
	363, 364, 365, 366, 367, 368, 369, 0, 444, 445,
	446, 0, 0, 370, 371, 447, 448, 0, 372, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 0, 380,
	0, 449, 381, 382, 383, 450, 451, 885, 0, 384,
	0, 0, 0, 0, 385, 386, 0, 387, 388, 389,
	0, 0, 0, 210, 211, 212, 213, 0, 214, 0,
	0, 0, 0, 390, 0, 206, 0, 0, 215, 216,
	217, 391, 392, 393, 394, 218, 395, 396, 0, 219,
	397, 398, 220, 221, 222, 0, 0, 399, 400, 401,
	0, 223, 402, 0, 862, 0, 224, 225, 226, 227,
	228, 0, 230, 231, 232, 229, 0, 233, 0, 234,
	235, 0, 797, 236, 237, 238, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 460, 241, 403, 242, 404,
	405, 0, 243, 0, 244, 0, 245, 0, 0, 246,
	247, 0, 248, 0, 0, 0, 406, 249, 250, 251,
	252, 253, 407, 408, 0, 798, 0, 0, 0, 0,
	0, 254, 255, 409, 410, 411, 0, 256, 0, 257,
	0, 0, 799, 258, 0, 259, 412, 0, 413, 0,
	260, 261, 262, 263, 264, 265, 414, 415, 801, 0,
	416, 269, 0, 266, 0, 800, 267, 417, 268, 418,
	419, 420, 421, 422, 0, 423, 0, 270, 802, 271,
	272, 273, 803, 424, 425, 0, 0, 274, 275, 276,
	0, 278, 277, 0, 426, 804, 279, 280, 805, 0,
	281, 282, 0, 0, 283, 0, 284, 864, 863, 285,
	286, 288, 427, 287, 806, 289, 290, 292, 291, 0,
	0, 0, 428, 293, 429, 294, 295, 0, 296, 0,
	0, 297, 298, 0, 0, 299, 430, 807, 300, 808,
	431, 301, 302, 303, 304, 305, 306, 307, 0, 308,
	432, 309, 433, 310, 0, 311, 312, 313, 314, 315,
	434, 316, 317, 0, 318, 319, 320, 321, 322, 0,
	324, 325, 323, 326, 327, 328, 329, 0, 330, 809,
	0, 331, 332, 333, 435, 334, 0, 338, 339, 340,
	341, 342, 0, 344, 345, 436, 437, 438, 439, 343,
	346, 347, 0, 348, 335, 336, 349, 810, 350, 440,
	441, 351, 0, 359, 352, 353, 354, 337, 355, 358,
	442, 356, 0, 357, 443, 0, 360, 361, 0, 362,
	363, 364, 365, 366, 367, 368, 369, 0, 444, 445,
	446, 0, 0, 370, 371, 447, 448, 0, 372, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 0, 380,
	0, 449, 381, 382, 383, 450, 451, 207, 0, 384,
	0, 0, 0, 0, 385, 386, 0, 387, 388, 389,
	0, 0, 0, 210, 211, 212, 213, 0, 214, 0,
	0, 0, 0, 390, 0, 0, 0, 0, 215, 216,
	217, 391, 392, 393, 394, 218, 395, 396, 0, 219,
	397, 398, 220, 221, 222, 0, 0, 399, 400, 401,
	0, 223, 402, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 230, 231, 232, 229, 0, 233, 0, 234,
	235, 0, 0, 236, 237, 238, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 460, 241, 403, 242, 404,
	405, 0, 243, 0, 244, 0, 245, 0, 0, 246,
	247, 0, 248, 0, 0, 0, 406, 249, 250, 251,
	252, 253, 407, 408, 0, 0, 0, 0, 0, 0,
	0, 254, 255, 409, 410, 411, 0, 256, 0, 257,
	0, 0, 0, 258, 0, 259, 412, 0, 413, 0,
	260, 261, 262, 263, 264, 265, 414, 415, 0, 0,
	416, 269, 0, 266, 0, 0, 267, 417, 268, 418,
	419, 420, 421, 422, 0, 423, 0, 270, 0, 271,
	272, 273, 0, 424, 425, 0, 0, 274, 275, 276,
	0, 278, 277, 0, 426, 0, 279, 280, 0, 0,
	281, 282, 0, 0, 283, 0, 284, 0, 0, 285,
	286, 288, 427, 287, 0, 289, 290, 292, 291, 0,
	0, 0, 428, 293, 429, 294, 295, 0, 296, 0,
	0, 297, 298, 0, 0, 299, 430, 0, 300, 0,
	431, 301, 302, 303, 304, 305, 306, 307, 0, 308,
	432, 309, 433, 310, 0, 311, 312, 313, 314, 315,
	434, 316, 317, 0, 318, 319, 320, 321, 322, 0,
	324, 325, 323, 326, 327, 328, 329, 0, 330, 0,
	0, 331, 332, 333, 435, 334, 0, 338, 339, 340,
	341, 342, 0, 344, 345, 436, 437, 438, 439, 343,
	346, 347, 0, 348, 335, 336, 349, 0, 350, 440,
	441, 351, 0, 359, 352, 353, 354, 337, 355, 358,
	442, 356, 0, 357, 443, 0, 360, 361, 0, 362,
	363, 364, 365, 366, 367, 368, 369, 0, 444, 445,
	446, 0, 0, 370, 371, 447, 448, 0, 372, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 0, 380,
	0, 449, 381, 382, 383, 450, 451, 207, 0, 384,
	0, 0, 0, 0, 385, 386, 0, 387, 388, 389,
	0, 0, 0, 210, 211, 212, 213, 0, 214, 0,
	0, 0, 0, 390, 0, 206, 0, 0, 215, 216,
	217, 391, 392, 393, 394, 218, 395, 396, 0, 219,
	397, 398, 220, 221, 222, 0, 0, 399, 400, 401,
	1855, 223, 402, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 230, 231, 232, 229, 1852, 233, 0, 234,
	235, 0, 0, 236, 237, 238, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 460, 241, 403, 242, 404,
	405, 0, 243, 0, 244, 0, 245, 0, 0, 246,
	247, 0, 248, 0, 0, 0, 406, 249, 250, 251,
	252, 253, 407, 408, 0, 1926, 0, 0, 0, 0,
	0, 254, 255, 409, 410, 411, 0, 256, 0, 257,
	1858, 0, 0, 258, 0, 259, 412, 0, 413, 0,
	260, 261, 262, 263, 264, 265, 414, 415, 0, 0,
	416, 269, 1924, 266, 0, 0, 267, 417, 268, 418,
	419, 420, 421, 422, 0, 423, 0, 1923, 0, 271,
	272, 273, 0, 424, 425, 0, 0, 274, 275, 276,
	0, 278, 277, 0, 426, 0, 279, 280, 0, 0,
	281, 282, 0, 0, 283, 0, 284, 0, 0, 285,
	286, 288, 427, 287, 0, 289, 290, 292, 291, 0,
	0, 0, 428, 293, 429, 294, 295, 0, 296, 0,
	0, 297, 298, 0, 0, 299, 430, 0, 300, 0,
	431, 301, 302, 303, 304, 305, 306, 307, 0, 308,
	432, 309, 433, 310, 1857, 311, 312, 313, 314, 315,
	434, 316, 317, 0, 318, 319, 320, 321, 322, 0,
	324, 325, 323, 326, 327, 328, 329, 0, 330, 0,
	0, 331, 332, 333, 435, 334, 0, 338, 339, 340,
	341, 342, 0, 344, 345, 436, 437, 438, 439, 343,
	346, 347, 0, 348, 335, 336, 349, 0, 350, 440,
	441, 351, 0, 359, 352, 353, 354, 337, 355, 358,
	442, 356, 0, 357, 443, 0, 360, 361, 0, 362,
	363, 364, 365, 366, 367, 368, 369, 0, 444, 445,
	446, 0, 0, 370, 371, 447, 448, 0, 372, 373,
	374, 375, 0, 1925, 376, 377, 378, 379, 0, 380,
	0, 449, 381, 382, 383, 450, 451, 207, 0, 384,
	0, 0, 0, 0, 385, 386, 0, 387, 388, 389,
	0, 0, 0, 210, 211, 212, 213, 0, 214, 0,
	0, 0, 0, 390, 0, 0, 0, 0, 215, 216,
	217, 391, 392, 393, 394, 218, 395, 396, 0, 219,
	397, 398, 220, 221, 222, 0, 0, 399, 400, 401,
	1855, 223, 402, 0, 0, 1849, 224, 225, 226, 227,
	228, 0, 230, 231, 232, 229, 1852, 233, 0, 234,
	235, 0, 0, 236, 237, 238, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 460, 241, 403, 242, 404,
	405, 0, 243, 0, 244, 0, 245, 0, 0, 246,
	247, 0, 248, 0, 0, 0, 406, 249, 250, 251,
	252, 253, 407, 408, 0, 0, 0, 0, 0, 0,
	0, 254, 255, 409, 410, 411, 0, 256, 0, 257,
	1858, 0, 0, 258, 0, 259, 412, 0, 413, 0,
	260, 261, 262, 263, 264, 265, 1848, 415, 0, 0,
	416, 269, 0, 266, 0, 0, 267, 417, 268, 418,
	419, 420, 421, 422, 0, 423, 0, 270, 0, 271,
	272, 273, 0, 424, 425, 0, 0, 274, 275, 276,
	0, 278, 277, 0, 426, 0, 279, 280, 0, 0,
	281, 282, 0, 0, 283, 0, 284, 0, 0, 285,
	286, 288, 427, 287, 0, 289, 290, 292, 291, 0,
	0, 0, 428, 293, 429, 294, 295, 0, 296, 0,
	0, 297, 298, 0, 0, 299, 430, 0, 300, 0,
	431, 301, 302, 303, 304, 305, 306, 307, 0, 308,
	432, 309, 433, 310, 1857, 311, 312, 313, 314, 315,
	434, 316, 317, 0, 318, 319, 320, 321, 322, 0,
	324, 325, 323, 326, 327, 328, 329, 0, 330, 0,
	0, 331, 332, 333, 435, 334, 0, 338, 339, 340,
	341, 342, 0, 344, 345, 436, 437, 438, 439, 343,
	346, 347, 0, 348, 335, 336, 349, 0, 350, 440,
	441, 351, 0, 359, 352, 353, 354, 337, 355, 358,
	442, 356, 0, 357, 443, 0, 360, 361, 0, 362,
	363, 364, 365, 366, 367, 368, 369, 0, 444, 445,
	446, 0, 0, 370, 371, 447, 448, 0, 372, 373,
	374, 375, 0, 1856, 376, 377, 378, 379, 0, 380,
	0, 449, 381, 382, 383, 450, 451, 0, 560, 384,
	207, 0, 0, 0, 385, 386, 0, 387, 388, 389,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 559,
	541, 214, 0, 0, 0, 0, 390, 0, 0, 0,
	0, 215, 216, 217, 391, 392, 393, 394, 218, 395,
	396, 0, 219, 397, 398, 220, 221, 222, 0, 0,
	399, 400, 401, 0, 223, 402, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 230, 231, 232, 229, 0,
	233, 0, 234, 235, 544, 0, 236, 237, 238, 0,
	0, 0, 0, 0, 0, 0, 239, 240, 460, 241,
	403, 242, 404, 405, 0, 243, 0, 244, 0, 245,
	0, 0, 246, 247, 0, 248, 0, 0, 0, 406,
	249, 250, 251, 252, 253, 407, 408, 0, 0, 0,
	0, 0, 0, 0, 254, 255, 409, 410, 411, 0,
	256, 0, 257, 0, 0, 0, 258, 545, 259, 412,
	0, 413, 0, 260, 261, 262, 263, 264, 265, 414,
	415, 0, 0, 416, 269, 0, 266, 0, 0, 267,
	417, 268, 418, 419, 420, 421, 422, 0, 423, 0,
	270, 0, 271, 272, 273, 0, 424, 425, 0, 0,
	274, 275, 276, 0, 278, 277, 0, 426, 0, 279,
	280, 0, 0, 281, 282, 0, 0, 283, 0, 284,
	0, 0, 285, 286, 288, 427, 287, 0, 289, 290,
	292, 291, 0, 0, 0, 428, 293, 429, 294, 295,
	0, 296, 0, 0, 297, 298, 0, 0, 299, 430,
	0, 300, 0, 431, 301, 302, 303, 304, 305, 306,
	307, 0, 308, 432, 309, 433, 310, 0, 311, 312,
	313, 314, 315, 434, 316, 317, 0, 318, 319, 320,
	321, 322, 0, 324, 325, 323, 326, 327, 328, 329,
	0, 330, 0, 0, 331, 332, 333, 435, 334, 0,
	338, 339, 340, 341, 342, 546, 344, 345, 436, 437,
	438, 439, 343, 346, 347, 0, 348, 335, 336, 349,
	0, 350, 440, 441, 351, 0, 359, 352, 353, 354,
	337, 355, 358, 442, 356, 0, 357, 443, 0, 360,
	361, 0, 362, 363, 364, 365, 366, 367, 368, 369,
	0, 444, 445, 446, 0, 0, 370, 371, 447, 448,
	0, 372, 373, 374, 375, 0, 0, 376, 377, 378,
	379, 0, 380, 0, 449, 381, 382, 383, 450, 451,
	0, 540, 384, 207, 0, 0, 0, 385, 386, 0,
	387, 388, 389, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 541, 214, 0, 0, 0, 0, 390,
	0, 0, 0, 0, 215, 216, 217, 391, 392, 393,
	394, 218, 395, 396, 0, 219, 397, 398, 220, 221,
	222, 0, 0, 399, 400, 401, 0, 223, 402, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 230, 231,
	232, 229, 0, 233, 0, 234, 235, 544, 0, 236,
	237, 238, 0, 0, 0, 0, 0, 0, 0, 239,
	240, 460, 241, 403, 242, 404, 405, 0, 243, 0,
	244, 0, 245, 0, 0, 246, 247, 0, 248, 0,
	0, 0, 406, 249, 250, 251, 252, 253, 407, 408,
	0, 0, 0, 0, 0, 0, 0, 254, 255, 409,
	410, 411, 0, 256, 0, 257, 0, 0, 0, 258,
	545, 259, 412, 0, 413, 0, 260, 261, 262, 263,
	264, 265, 414, 415, 0, 0, 416, 269, 0, 266,
	0, 0, 267, 417, 268, 418, 419, 420, 421, 422,
	0, 423, 0, 270, 0, 271, 272, 273, 0, 424,
	425, 0, 0, 274, 275, 276, 0, 278, 277, 0,
	426, 0, 279, 280, 0, 0, 281, 282, 0, 0,
	283, 0, 284, 0, 0, 285, 286, 288, 427, 287,
	0, 289, 290, 292, 291, 0, 0, 0, 428, 293,
	429, 294, 295, 0, 296, 0, 0, 297, 298, 0,
	0, 299, 430, 0, 300, 0, 431, 301, 302, 303,
	304, 305, 306, 307, 0, 308, 432, 309, 433, 310,
	0, 311, 312, 313, 314, 315, 434, 316, 317, 0,
	318, 319, 320, 321, 322, 0, 324, 325, 323, 326,
	327, 328, 329, 0, 330, 0, 0, 331, 332, 333,
	435, 334, 0, 338, 339, 340, 341, 342, 546, 344,
	345, 436, 437, 438, 439, 343, 346, 347, 0, 348,
	335, 336, 349, 0, 350, 440, 441, 351, 0, 359,
	352, 353, 354, 337, 355, 358, 442, 356, 0, 357,
	443, 0, 360, 361, 0, 362, 363, 364, 365, 366,
	367, 368, 369, 0, 444, 445, 446, 0, 0, 370,
	371, 447, 448, 0, 372, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 0, 380, 0, 449, 381, 382,
	383, 450, 451, 207, 0, 384, 0, 0, 0, 0,
	385, 386, 0, 387, 388, 389, 0, 0, 0, 210,
	211, 212, 213, 0, 214, 0, 0, 0, 0, 390,
	0, 0, 0, 0, 215, 216, 217, 391, 392, 393,
	394, 218, 395, 396, 0, 219, 397, 398, 220, 221,
	222, 0, 0, 399, 400, 401, 0, 223, 402, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 230, 231,
	232, 229, 0, 233, 0, 234, 235, 544, 0, 236,
	237, 238, 0, 0, 0, 0, 0, 0, 0, 239,
	240, 460, 241, 403, 242, 404, 405, 0, 243, 0,
	244, 0, 245, 0, 0, 246, 247, 0, 248, 0,
	0, 0, 406, 249, 250, 251, 252, 253, 407, 408,
	0, 0, 0, 0, 0, 0, 0, 254, 255, 409,
	410, 411, 0, 256, 0, 257, 0, 0, 0, 258,
	545, 259, 412, 0, 413, 0, 260, 261, 262, 263,
	264, 265, 414, 415, 0, 0, 416, 269, 0, 266,
	0, 0, 267, 417, 268, 418, 419, 420, 421, 422,
	0, 423, 0, 270, 0, 271, 272, 273, 0, 424,
	425, 0, 0, 274, 275, 276, 0, 278, 277, 0,
	426, 0, 279, 280, 0, 0, 281, 282, 0, 0,
	283, 0, 284, 0, 0, 285, 286, 288, 427, 287,
	0, 289, 290, 292, 291, 0, 0, 0, 428, 293,
	429, 294, 295, 0, 296, 0, 0, 297, 298, 0,
	0, 299, 430, 0, 300, 0, 431, 301, 302, 303,
	304, 305, 306, 307, 0, 308, 432, 309, 433, 310,
	0, 311, 312, 313, 314, 315, 434, 316, 317, 0,
	318, 319, 320, 321, 322, 0, 324, 325, 323, 326,
	327, 328, 329, 0, 330, 0, 0, 331, 332, 333,
	435, 334, 0, 338, 339, 340, 341, 342, 546, 344,
	345, 436, 437, 438, 439, 343, 346, 347, 0, 348,
	335, 336, 349, 0, 350, 440, 441, 351, 0, 359,
	352, 353, 354, 337, 355, 358, 442, 356, 0, 357,
	443, 0, 360, 361, 0, 362, 363, 364, 365, 366,
	367, 368, 369, 0, 444, 445, 446, 0, 0, 370,
	371, 447, 448, 0, 372, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 0, 380, 0, 449, 381, 382,
	383, 450, 451, 0, 1037, 384, 207, 0, 0, 0,
	385, 386, 0, 387, 388, 389, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 0, 0,
	0, 0, 390, 0, 0, 0, 0, 215, 216, 217,
	391, 392, 393, 394, 218, 395, 396, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 399, 400, 401, 0,
	223, 402, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 0, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 403, 242, 404, 405,
	0, 243, 0, 244, 0, 245, 0, 0, 246, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 409, 410, 411, 0, 256, 0, 257, 0,
	0, 0, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 414, 415, 0, 0, 416,
	269, 0, 266, 0, 0, 267, 417, 268, 418, 419,
	420, 421, 422, 0, 423, 0, 270, 0, 271, 272,
	273, 0, 424, 425, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 0, 279, 280, 0, 0, 281,
	282, 0, 0, 283, 0, 284, 0, 0, 285, 286,
	288, 427, 287, 0, 289, 290, 292, 291, 0, 0,
	0, 428, 293, 429, 294, 295, 0, 296, 0, 855,
	297, 298, 0, 0, 299, 430, 0, 300, 0, 431,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 434,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 0, 0,
	331, 332, 333, 435, 334, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 348, 335, 336, 349, 0, 350, 440, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 442,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 444, 445, 446,
	0, 0, 370, 371, 447, 448, 0, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 451, 0, 873, 384, 207,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 0,
	0, 0, 0, 0, 0, 210, 211, 212, 213, 0,
	214, 0, 0, 0, 0, 390, 0, 0, 0, 0,
	215, 216, 217, 391, 392, 393, 394, 218, 395, 396,
	0, 219, 397, 398, 220, 221, 222, 0, 0, 399,
	400, 401, 0, 223, 402, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 230, 231, 232, 229, 0, 233,
	0, 234, 235, 0, 0, 236, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 460, 241, 403,
	242, 404, 405, 0, 243, 0, 244, 0, 245, 0,
	0, 246, 247, 0, 248, 0, 0, 0, 406, 249,
	250, 251, 252, 253, 407, 408, 0, 0, 0, 0,
	0, 0, 0, 254, 255, 409, 410, 411, 0, 256,
	0, 257, 0, 0, 0, 258, 0, 259, 412, 0,
	413, 0, 260, 261, 262, 263, 264, 265, 875, 415,
	0, 0, 416, 269, 0, 266, 0, 0, 267, 417,
	268, 418, 419, 420, 421, 422, 0, 423, 0, 270,
	0, 271, 272, 273, 0, 424, 425, 0, 0, 274,
	275, 276, 0, 278, 277, 0, 426, 0, 279, 280,
	0, 0, 281, 282, 0, 0, 283, 0, 284, 0,
	0, 285, 286, 288, 427, 287, 0, 289, 290, 292,
	291, 0, 0, 0, 428, 293, 429, 294, 295, 0,
	296, 0, 855, 297, 298, 0, 0, 299, 430, 0,
	300, 0, 431, 301, 302, 303, 304, 305, 306, 307,
	0, 308, 432, 309, 433, 310, 0, 311, 312, 313,
	314, 315, 434, 316, 317, 0, 318, 319, 320, 321,
	322, 0, 324, 325, 323, 326, 327, 328, 329, 0,
	330, 0, 0, 331, 332, 333, 435, 334, 0, 338,
	339, 340, 341, 342, 0, 344, 345, 436, 437, 438,
	439, 343, 346, 347, 0, 348, 335, 336, 349, 0,
	350, 440, 441, 351, 0, 359, 352, 353, 354, 337,
	355, 358, 442, 356, 0, 357, 443, 0, 360, 361,
	0, 362, 363, 364, 365, 366, 367, 368, 369, 0,
	444, 445, 446, 0, 0, 370, 371, 447, 448, 0,
	372, 373, 374, 375, 0, 0, 376, 377, 378, 379,
	0, 380, 0, 449, 381, 382, 383, 450, 451, 0,
	870, 384, 207, 0, 0, 0, 385, 386, 0, 387,
	388, 389, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 0, 214, 0, 0, 0, 0, 390, 0,
	0, 0, 0, 215, 216, 217, 391, 392, 393, 394,
	218, 395, 396, 0, 219, 397, 398, 220, 221, 222,
	0, 0, 399, 400, 401, 0, 223, 402, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 230, 231, 232,
	229, 0, 233, 0, 234, 235, 0, 0, 236, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	460, 241, 403, 242, 404, 405, 0, 243, 0, 244,
	0, 245, 0, 0, 246, 247, 0, 248, 0, 0,
	0, 406, 249, 250, 251, 252, 253, 407, 408, 0,
	0, 0, 0, 0, 0, 0, 254, 255, 409, 410,
	411, 0, 256, 0, 257, 0, 0, 0, 258, 0,
	259, 412, 0, 413, 0, 260, 261, 262, 263, 264,
	265, 872, 415, 0, 0, 416, 269, 0, 266, 0,
	0, 267, 417, 268, 418, 419, 420, 421, 422, 0,
	423, 0, 270, 0, 271, 272, 273, 0, 424, 425,
	0, 0, 274, 275, 276, 0, 278, 277, 0, 426,
	0, 279, 280, 0, 0, 281, 282, 0, 0, 283,
	0, 284, 0, 0, 285, 286, 288, 427, 287, 0,
	289, 290, 292, 291, 0, 0, 0, 428, 293, 429,
	294, 295, 0, 296, 0, 855, 297, 298, 0, 0,
	299, 430, 0, 300, 0, 431, 301, 302, 303, 304,
	305, 306, 307, 0, 308, 432, 309, 433, 310, 0,
	311, 312, 313, 314, 315, 434, 316, 317, 0, 318,
	319, 320, 321, 322, 0, 324, 325, 323, 326, 327,
	328, 329, 0, 330, 0, 0, 331, 332, 333, 435,
	334, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	436, 437, 438, 439, 343, 346, 347, 0, 348, 335,
	336, 349, 0, 350, 440, 441, 351, 0, 359, 352,
	353, 354, 337, 355, 358, 442, 356, 0, 357, 443,
	0, 360, 361, 0, 362, 363, 364, 365, 366, 367,
	368, 369, 0, 444, 445, 446, 0, 0, 370, 371,
	447, 448, 0, 372, 373, 374, 375, 0, 0, 376,
	377, 378, 379, 0, 380, 0, 449, 381, 382, 383,
	450, 451, 0, 866, 384, 207, 0, 0, 0, 385,
	386, 0, 387, 388, 389, 0, 0, 0, 0, 0,
	0, 210, 211, 212, 213, 0, 214, 0, 0, 0,
	0, 390, 0, 0, 0, 0, 215, 216, 217, 391,
	392, 393, 394, 218, 395, 396, 0, 219, 397, 398,
	220, 221, 222, 0, 0, 399, 400, 401, 0, 223,
	402, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	230, 231, 232, 229, 0, 233, 0, 234, 235, 0,
	0, 236, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 460, 241, 403, 242, 404, 405, 0,
	243, 0, 244, 0, 245, 0, 0, 246, 247, 0,
	248, 0, 0, 0, 406, 249, 250, 251, 252, 253,
	407, 408, 0, 0, 0, 0, 0, 0, 0, 254,
	255, 409, 410, 411, 0, 256, 0, 257, 0, 0,
	0, 258, 0, 259, 412, 0, 413, 0, 260, 261,
	262, 263, 264, 265, 868, 415, 0, 0, 416, 269,
	0, 266, 0, 0, 267, 417, 268, 418, 419, 420,
	421, 422, 0, 423, 0, 270, 0, 271, 272, 273,
	0, 424, 425, 0, 0, 274, 275, 276, 0, 278,
	277, 0, 426, 0, 279, 280, 0, 0, 281, 282,
	0, 0, 283, 0, 284, 0, 0, 285, 286, 288,
	427, 287, 0, 289, 290, 292, 291, 0, 0, 0,
	428, 293, 429, 294, 295, 0, 296, 0, 855, 297,
	298, 0, 0, 299, 430, 0, 300, 0, 431, 301,
	302, 303, 304, 305, 306, 307, 0, 308, 432, 309,
	433, 310, 0, 311, 312, 313, 314, 315, 434, 316,
	317, 0, 318, 319, 320, 321, 322, 0, 324, 325,
	323, 326, 327, 328, 329, 0, 330, 0, 0, 331,
	332, 333, 435, 334, 0, 338, 339, 340, 341, 342,
	0, 344, 345, 436, 437, 438, 439, 343, 346, 347,
	0, 348, 335, 336, 349, 0, 350, 440, 441, 351,
	0, 359, 352, 353, 354, 337, 355, 358, 442, 356,
	0, 357, 443, 0, 360, 361, 0, 362, 363, 364,
	365, 366, 367, 368, 369, 0, 444, 445, 446, 0,
	0, 370, 371, 447, 448, 0, 372, 373, 374, 375,
	0, 0, 376, 377, 378, 379, 0, 380, 0, 449,
	381, 382, 383, 450, 451, 0, 479, 384, 207, 0,
	0, 0, 385, 386, 0, 387, 388, 389, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 478, 214,
	0, 0, 0, 0, 390, 0, 0, 0, 0, 215,
	216, 217, 391, 392, 393, 394, 218, 395, 396, 0,
	219, 397, 398, 220, 221, 222, 0, 0, 399, 400,
	401, 0, 223, 402, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 230, 231, 232, 229, 0, 233, 0,
	234, 235, 0, 0, 236, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 460, 241, 403, 242,
	404, 405, 0, 243, 0, 244, 0, 245, 0, 0,
	246, 247, 0, 248, 0, 0, 0, 406, 249, 250,
	251, 252, 253, 407, 408, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 409, 410, 411, 0, 256, 0,
	257, 0, 0, 0, 258, 0, 259, 412, 0, 413,
	0, 260, 261, 262, 263, 264, 265, 414, 415, 0,
	0, 416, 269, 0, 266, 0, 0, 267, 417, 268,
	418, 419, 420, 421, 422, 0, 423, 0, 270, 0,
	271, 272, 273, 0, 424, 425, 0, 0, 274, 275,
	276, 0, 278, 277, 0, 426, 0, 279, 280, 0,
	0, 281, 282, 0, 0, 283, 0, 284, 0, 0,
	285, 286, 288, 427, 287, 0, 289, 290, 292, 291,
	0, 0, 0, 428, 293, 429, 294, 295, 0, 296,
	0, 0, 297, 298, 0, 0, 299, 430, 0, 300,
	0, 431, 301, 302, 303, 304, 305, 306, 307, 0,
	308, 432, 309, 433, 477, 0, 311, 312, 313, 314,
	315, 434, 316, 317, 0, 318, 319, 320, 321, 322,
	0, 324, 325, 323, 326, 327, 328, 329, 0, 330,
	0, 0, 331, 332, 333, 435, 334, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 436, 437, 438, 439,
	343, 346, 347, 0, 348, 335, 336, 349, 0, 350,
	440, 441, 351, 0, 359, 352, 353, 354, 337, 355,
	358, 442, 356, 0, 357, 443, 0, 360, 361, 0,
	362, 363, 364, 365, 366, 367, 368, 369, 0, 444,
	445, 446, 0, 0, 370, 371, 447, 448, 0, 372,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 0,
	380, 0, 449, 381, 382, 383, 450, 451, 207, 0,
	384, 0, 0, 0, 0, 385, 386, 0, 387, 388,
	389, 0, 0, 0, 210, 211, 212, 213, 0, 214,
	0, 0, 0, 0, 390, 0, 1835, 0, 0, 215,
	216, 217, 391, 392, 393, 394, 218, 395, 396, 0,
	219, 397, 398, 220, 221, 222, 0, 0, 399, 400,
	401, 0, 223, 402, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 230, 231, 232, 229, 0, 233, 0,
	234, 235, 0, 0, 236, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 460, 241, 403, 242,
	404, 405, 0, 243, 0, 244, 0, 245, 0, 0,
	246, 247, 0, 248, 0, 0, 0, 406, 249, 250,
	251, 252, 253, 407, 408, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 409, 410, 411, 0, 256, 0,
	257, 0, 0, 0, 258, 0, 259, 412, 0, 413,
	0, 260, 261, 262, 263, 264, 265, 414, 415, 0,
	0, 416, 269, 0, 266, 0, 0, 267, 417, 268,
	418, 419, 420, 421, 422, 0, 423, 0, 270, 0,
	271, 272, 273, 0, 424, 425, 0, 0, 274, 275,
	276, 0, 278, 277, 0, 426, 0, 279, 280, 0,
	0, 281, 282, 0, 0, 283, 0, 284, 0, 0,
	285, 286, 288, 427, 287, 0, 289, 290, 292, 291,
	0, 0, 0, 428, 293, 429, 294, 295, 0, 296,
	0, 0, 297, 298, 0, 0, 299, 430, 0, 300,
	0, 431, 301, 302, 303, 304, 305, 306, 307, 0,
	308, 432, 309, 433, 310, 0, 311, 312, 313, 314,
	315, 434, 316, 317, 0, 318, 319, 320, 321, 322,
	0, 324, 325, 323, 326, 327, 328, 329, 0, 330,
	0, 0, 331, 332, 333, 435, 334, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 436, 437, 438, 439,
	343, 346, 347, 0, 348, 335, 336, 349, 0, 350,
	440, 441, 351, 0, 359, 352, 353, 354, 337, 355,
	358, 442, 356, 0, 357, 443, 0, 360, 361, 0,
	362, 363, 364, 365, 366, 367, 368, 369, 0, 444,
	445, 446, 0, 0, 370, 371, 447, 448, 0, 372,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 0,
	380, 0, 449, 381, 382, 383, 450, 451, 207, 2309,
	384, 0, 0, 0, 0, 385, 386, 0, 387, 388,
	389, 0, 0, 0, 210, 211, 212, 213, 0, 214,
	0, 0, 0, 0, 390, 0, 0, 0, 0, 215,
	216, 217, 391, 392, 393, 394, 218, 395, 396, 0,
	219, 397, 398, 220, 221, 222, 0, 0, 399, 400,
	401, 0, 223, 402, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 230, 231, 232, 229, 0, 233, 0,
	234, 235, 0, 0, 236, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 460, 241, 403, 242,
	404, 405, 0, 243, 0, 244, 0, 245, 0, 0,
	246, 247, 0, 248, 0, 0, 0, 406, 249, 250,
	251, 252, 253, 407, 408, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 409, 410, 411, 0, 256, 0,
	257, 0, 0, 0, 258, 0, 259, 412, 0, 413,
	0, 260, 261, 262, 263, 264, 265, 414, 415, 0,
	0, 416, 269, 0, 266, 0, 0, 267, 417, 268,
	418, 419, 420, 421, 422, 0, 423, 0, 270, 0,
	271, 272, 273, 0, 424, 425, 0, 0, 274, 275,
	276, 0, 278, 277, 0, 426, 0, 279, 280, 0,
	0, 281, 282, 0, 0, 283, 0, 284, 0, 0,
	285, 286, 288, 427, 287, 0, 289, 290, 292, 291,
	0, 0, 0, 428, 293, 429, 294, 295, 0, 296,
	0, 0, 297, 298, 0, 0, 299, 430, 0, 300,
	0, 431, 301, 302, 303, 304, 305, 306, 307, 0,
	308, 432, 309, 433, 310, 0, 311, 312, 313, 314,
	315, 434, 316, 317, 0, 318, 319, 320, 321, 322,
	0, 324, 325, 323, 326, 327, 328, 329, 0, 330,
	0, 0, 331, 332, 333, 435, 334, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 436, 437, 438, 439,
	343, 346, 347, 0, 348, 335, 336, 349, 0, 350,
	440, 441, 351, 0, 359, 352, 353, 354, 337, 355,
	358, 442, 356, 0, 357, 443, 0, 360, 361, 0,
	362, 363, 364, 365, 366, 367, 368, 369, 0, 444,
	445, 446, 0, 0, 370, 371, 447, 448, 0, 372,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 0,
	380, 0, 449, 381, 382, 383, 450, 451, 207, 2309,
	384, 0, 0, 0, 0, 385, 386, 0, 387, 388,
	389, 0, 0, 0, 210, 211, 212, 213, 0, 214,
	0, 0, 0, 0, 390, 0, 0, 0, 0, 215,
	216, 217, 391, 392, 393, 394, 218, 395, 396, 0,
	219, 397, 398, 220, 221, 222, 0, 0, 399, 400,
	401, 0, 223, 402, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 230, 231, 232, 229, 0, 233, 0,
	234, 235, 0, 0, 236, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 460, 241, 403, 242,
	404, 405, 0, 243, 0, 244, 0, 245, 0, 0,
	246, 247, 0, 248, 0, 0, 0, 406, 249, 250,
	251, 252, 253, 407, 408, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 409, 410, 411, 0, 256, 0,
	257, 0, 0, 0, 258, 0, 259, 412, 0, 413,
	0, 260, 261, 262, 263, 264, 265, 414, 415, 0,
	0, 416, 269, 0, 266, 0, 0, 267, 417, 268,
	418, 419, 420, 421, 422, 0, 423, 0, 270, 0,
	271, 272, 273, 0, 424, 425, 0, 0, 274, 275,
	276, 0, 278, 277, 0, 426, 0, 279, 280, 0,
	0, 281, 282, 0, 0, 283, 0, 284, 0, 0,
	285, 286, 288, 427, 287, 0, 289, 290, 292, 291,
	0, 0, 0, 428, 293, 429, 294, 295, 0, 296,
	0, 0, 297, 2306, 0, 0, 299, 430, 0, 300,
	0, 431, 301, 302, 303, 304, 305, 306, 307, 0,
	308, 432, 309, 433, 310, 0, 311, 312, 313, 314,
	315, 434, 316, 317, 0, 318, 319, 320, 321, 322,
	0, 324, 325, 323, 326, 327, 328, 329, 0, 330,
	0, 0, 331, 332, 333, 435, 334, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 436, 437, 438, 439,
	343, 346, 347, 0, 348, 335, 336, 349, 0, 350,
	440, 441, 351, 0, 359, 352, 353, 354, 337, 355,
	358, 442, 356, 0, 357, 443, 0, 360, 361, 0,
	362, 363, 364, 365, 366, 367, 368, 369, 0, 444,
	445, 446, 0, 0, 370, 371, 447, 448, 0, 372,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 0,
	380, 0, 449, 381, 382, 383, 450, 451, 207, 0,
	384, 0, 0, 0, 0, 385, 386, 0, 387, 388,
	389, 0, 0, 0, 210, 211, 212, 213, 0, 214,
	0, 0, 0, 0, 390, 0, 0, 0, 0, 215,
	216, 217, 391, 392, 393, 394, 218, 395, 396, 0,
	219, 397, 398, 220, 221, 222, 0, 0, 399, 400,
	401, 0, 223, 402, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 230, 231, 232, 229, 0, 233, 0,
	234, 235, 0, 0, 236, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 460, 241, 403, 242,
	404, 405, 0, 243, 0, 244, 0, 245, 0, 0,
	246, 247, 0, 248, 0, 0, 0, 406, 249, 250,
	251, 252, 253, 407, 408, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 409, 410, 411, 0, 256, 0,
	257, 0, 0, 0, 258, 0, 259, 412, 0, 413,
	0, 260, 261, 262, 263, 264, 265, 414, 415, 0,
	0, 416, 269, 0, 266, 0, 0, 267, 417, 268,
	418, 419, 420, 421, 422, 0, 423, 0, 270, 0,
	271, 272, 273, 0, 424, 425, 0, 0, 274, 275,
	276, 0, 278, 277, 0, 426, 0, 279, 280, 0,
	0, 281, 282, 0, 0, 283, 0, 284, 0, 0,
	285, 286, 288, 427, 287, 0, 289, 290, 292, 291,
	0, 0, 0, 428, 293, 429, 294, 295, 0, 296,
	0, 855, 297, 298, 0, 0, 299, 430, 0, 300,
	0, 431, 301, 302, 303, 304, 305, 306, 307, 0,
	308, 432, 309, 433, 310, 0, 311, 312, 313, 314,
	315, 434, 316, 317, 0, 318, 319, 320, 321, 322,
	0, 324, 325, 323, 326, 327, 328, 329, 0, 330,
	0, 0, 331, 332, 333, 435, 334, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 436, 437, 438, 439,
	343, 346, 347, 0, 348, 335, 336, 349, 0, 350,
	440, 441, 351, 0, 359, 352, 353, 354, 337, 355,
	358, 442, 356, 0, 357, 443, 0, 360, 361, 0,
	362, 363, 364, 365, 366, 367, 368, 369, 0, 444,
	445, 446, 0, 0, 370, 371, 447, 448, 0, 372,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 0,
	380, 0, 449, 381, 382, 383, 450, 451, 0, 1601,
	384, 207, 0, 0, 0, 385, 386, 0, 387, 388,
	389, 0, 0, 0, 0, 0, 0, 210, 211, 212,
	213, 0, 214, 0, 0, 0, 0, 390, 0, 0,
	0, 0, 215, 216, 217, 391, 392, 393, 394, 218,
	395, 396, 0, 219, 397, 398, 220, 221, 222, 0,
	0, 399, 400, 401, 0, 223, 402, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 230, 231, 232, 229,
	0, 233, 0, 234, 235, 0, 0, 236, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 460,
	241, 403, 242, 404, 405, 0, 243, 0, 244, 0,
	245, 0, 0, 246, 247, 0, 248, 0, 0, 0,
	406, 249, 250, 251, 252, 253, 407, 408, 0, 0,
	0, 0, 0, 0, 0, 254, 255, 409, 410, 411,
	0, 256, 0, 257, 0, 0, 0, 258, 0, 259,
	412, 0, 413, 0, 260, 261, 262, 263, 264, 265,
	414, 415, 0, 0, 416, 269, 0, 266, 0, 0,
	267, 417, 268, 418, 419, 420, 421, 422, 0, 423,
	0, 270, 0, 271, 272, 273, 0, 424, 425, 0,
	0, 274, 275, 276, 0, 278, 277, 0, 426, 0,
	279, 280, 0, 0, 281, 282, 0, 0, 283, 0,
	284, 0, 0, 285, 286, 288, 427, 287, 0, 289,
	290, 292, 291, 0, 0, 0, 428, 293, 429, 294,
	295, 0, 296, 0, 0, 297, 298, 0, 0, 299,
	430, 0, 300, 0, 431, 301, 302, 303, 304, 305,
	306, 307, 0, 308, 432, 309, 433, 310, 0, 311,
	312, 313, 314, 315, 434, 316, 317, 0, 318, 319,
	320, 321, 322, 0, 324, 325, 323, 326, 327, 328,
	329, 0, 330, 0, 0, 331, 332, 333, 435, 334,
	0, 338, 339, 340, 341, 342, 0, 344, 345, 436,
	437, 438, 439, 343, 346, 347, 0, 348, 335, 336,
	349, 0, 350, 440, 441, 351, 0, 359, 352, 353,
	354, 337, 355, 358, 442, 356, 0, 357, 443, 0,
	360, 361, 0, 362, 363, 364, 365, 366, 367, 368,
	369, 0, 444, 445, 446, 0, 0, 370, 371, 447,
	448, 0, 372, 373, 374, 375, 0, 0, 376, 377,
	378, 379, 0, 380, 0, 449, 381, 382, 383, 450,
	451, 0, 1599, 384, 207, 0, 0, 0, 385, 386,
	0, 387, 388, 389, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 0, 214, 0, 0, 0, 0,
	390, 0, 0, 0, 0, 215, 216, 217, 391, 392,
	393, 394, 218, 395, 396, 0, 219, 397, 398, 220,
	221, 222, 0, 0, 399, 400, 401, 0, 223, 402,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 230,
	231, 232, 229, 0, 233, 0, 234, 235, 0, 0,
	236, 237, 238, 0, 0, 0, 0, 0, 0, 0,
	239, 240, 460, 241, 403, 242, 404, 405, 0, 243,
	0, 244, 0, 245, 0, 0, 246, 247, 0, 248,
	0, 0, 0, 406, 249, 250, 251, 252, 253, 407,
	408, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	409, 410, 411, 0, 256, 0, 257, 0, 0, 0,
	258, 0, 259, 412, 0, 413, 0, 260, 261, 262,
	263, 264, 265, 414, 415, 0, 0, 416, 269, 0,
	266, 0, 0, 267, 417, 268, 418, 419, 420, 421,
	422, 0, 423, 0, 270, 0, 271, 272, 273, 0,
	424, 425, 0, 0, 274, 275, 276, 0, 278, 277,
	0, 426, 0, 279, 280, 0, 0, 281, 282, 0,
	0, 283, 0, 284, 0, 0, 285, 286, 288, 427,
	287, 0, 289, 290, 292, 291, 0, 0, 0, 428,
	293, 429, 294, 295, 0, 296, 0, 0, 297, 298,
	0, 0, 299, 430, 0, 300, 0, 431, 301, 302,
	303, 304, 305, 306, 307, 0, 308, 432, 309, 433,
	310, 0, 311, 312, 313, 314, 315, 434, 316, 317,
	0, 318, 319, 320, 321, 322, 0, 324, 325, 323,
	326, 327, 328, 329, 0, 330, 0, 0, 331, 332,
	333, 435, 334, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 436, 437, 438, 439, 343, 346, 347, 0,
	348, 335, 336, 349, 0, 350, 440, 441, 351, 0,
	359, 352, 353, 354, 337, 355, 358, 442, 356, 0,
	357, 443, 0, 360, 361, 0, 362, 363, 364, 365,
	366, 367, 368, 369, 0, 444, 445, 446, 0, 0,
	370, 371, 447, 448, 0, 372, 373, 374, 375, 0,
	0, 376, 377, 378, 379, 0, 380, 0, 449, 381,
	382, 383, 450, 451, 0, 1597, 384, 207, 0, 0,
	0, 385, 386, 0, 387, 388, 389, 0, 0, 0,
	0, 0, 0, 210, 211, 212, 213, 0, 214, 0,
	0, 0, 0, 390, 0, 0, 0, 0, 215, 216,
	217, 391, 392, 393, 394, 218, 395, 396, 0, 219,
	397, 398, 220, 221, 222, 0, 0, 399, 400, 401,
	0, 223, 402, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 230, 231, 232, 229, 0, 233, 0, 234,
	235, 0, 0, 236, 237, 238, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 460, 241, 403, 242, 404,
	405, 0, 243, 0, 244, 0, 245, 0, 0, 246,
	247, 0, 248, 0, 0, 0, 406, 249, 250, 251,
	252, 253, 407, 408, 0, 0, 0, 0, 0, 0,
	0, 254, 255, 409, 410, 411, 0, 256, 0, 257,
	0, 0, 0, 258, 0, 259, 412, 0, 413, 0,
	260, 261, 262, 263, 264, 265, 414, 415, 0, 0,
	416, 269, 0, 266, 0, 0, 267, 417, 268, 418,
	419, 420, 421, 422, 0, 423, 0, 270, 0, 271,
	272, 273, 0, 424, 425, 0, 0, 274, 275, 276,
	0, 278, 277, 0, 426, 0, 279, 280, 0, 0,
	281, 282, 0, 0, 283, 0, 284, 0, 0, 285,
	286, 288, 427, 287, 0, 289, 290, 292, 291, 0,
	0, 0, 428, 293, 429, 294, 295, 0, 296, 0,
	0, 297, 298, 0, 0, 299, 430, 0, 300, 0,
	431, 301, 302, 303, 304, 305, 306, 307, 0, 308,
	432, 309, 433, 310, 0, 311, 312, 313, 314, 315,
	434, 316, 317, 0, 318, 319, 320, 321, 322, 0,
	324, 325, 323, 326, 327, 328, 329, 0, 330, 0,
	0, 331, 332, 333, 435, 334, 0, 338, 339, 340,
	341, 342, 0, 344, 345, 436, 437, 438, 439, 343,
	346, 347, 0, 348, 335, 336, 349, 0, 350, 440,
	441, 351, 0, 359, 352, 353, 354, 337, 355, 358,
	442, 356, 0, 357, 443, 0, 360, 361, 0, 362,
	363, 364, 365, 366, 367, 368, 369, 0, 444, 445,
	446, 0, 0, 370, 371, 447, 448, 0, 372, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 0, 380,
	0, 449, 381, 382, 383, 450, 451, 207, 0, 384,
	0, 0, 0, 0, 385, 386, 0, 387, 388, 389,
	0, 0, 0, 210, 211, 212, 213, 1576, 214, 0,
	0, 0, 0, 390, 0, 0, 0, 0, 215, 216,
	217, 391, 392, 393, 394, 218, 395, 396, 0, 219,
	397, 398, 220, 221, 222, 0, 0, 399, 400, 401,
	0, 223, 402, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 230, 231, 232, 229, 0, 233, 0, 234,
	235, 0, 0, 236, 237, 238, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 460, 241, 403, 242, 404,
	405, 0, 243, 0, 244, 0, 245, 0, 0, 246,
	247, 0, 248, 0, 0, 0, 406, 249, 250, 251,
	252, 253, 407, 408, 0, 0, 0, 0, 0, 0,
	0, 254, 255, 409, 410, 411, 0, 256, 0, 257,
	0, 0, 0, 258, 0, 259, 412, 0, 413, 0,
	260, 261, 262, 263, 264, 265, 414, 415, 0, 0,
	416, 269, 0, 266, 0, 0, 267, 417, 268, 418,
	419, 420, 421, 422, 0, 423, 0, 270, 0, 271,
	272, 273, 0, 424, 425, 0, 0, 274, 275, 276,
	0, 278, 277, 0, 426, 0, 279, 280, 0, 0,
	281, 282, 0, 0, 283, 0, 284, 0, 0, 285,
	286, 288, 427, 287, 0, 289, 290, 292, 291, 0,
	0, 0, 428, 293, 429, 294, 295, 0, 296, 0,
	0, 297, 298, 0, 0, 299, 430, 0, 300, 0,
	431, 301, 302, 303, 304, 305, 306, 307, 0, 308,
	432, 309, 433, 310, 0, 311, 312, 313, 314, 315,
	434, 316, 317, 0, 318, 319, 320, 321, 322, 0,
	324, 325, 323, 326, 327, 328, 329, 0, 330, 0,
	0, 331, 332, 333, 435, 334, 0, 338, 339, 340,
	341, 342, 0, 344, 345, 436, 437, 438, 439, 343,
	346, 347, 0, 348, 335, 336, 349, 0, 350, 440,
	441, 351, 0, 359, 352, 353, 354, 337, 355, 358,
	442, 356, 0, 357, 443, 0, 360, 361, 0, 362,
	363, 364, 365, 366, 367, 368, 369, 0, 444, 445,
	446, 0, 0, 370, 371, 447, 448, 0, 372, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 0, 380,
	0, 449, 381, 382, 383, 450, 451, 0, 1537, 384,
	207, 0, 0, 0, 385, 386, 0, 387, 388, 389,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	0, 214, 0, 0, 0, 0, 390, 0, 0, 0,
	0, 215, 216, 217, 391, 392, 393, 394, 218, 395,
	396, 0, 219, 397, 398, 220, 221, 222, 0, 0,
	399, 400, 401, 0, 223, 402, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 230, 231, 232, 229, 0,
	233, 0, 234, 235, 0, 0, 236, 237, 238, 0,
	0, 0, 0, 0, 0, 0, 239, 240, 460, 241,
	403, 242, 404, 405, 0, 243, 0, 244, 0, 245,
	0, 0, 246, 247, 0, 248, 0, 0, 0, 406,
	249, 250, 251, 252, 253, 407, 408, 0, 0, 0,
	0, 0, 0, 0, 254, 255, 409, 410, 411, 0,
	256, 0, 257, 0, 0, 0, 258, 0, 259, 412,
	0, 413, 0, 260, 261, 262, 263, 264, 265, 414,
	415, 0, 0, 416, 269, 0, 266, 0, 0, 267,
	417, 268, 418, 419, 420, 421, 422, 0, 423, 0,
	270, 0, 271, 272, 273, 0, 424, 425, 0, 0,
	274, 275, 276, 0, 278, 277, 0, 426, 0, 279,
	280, 0, 0, 281, 282, 0, 0, 283, 0, 284,
	0, 0, 285, 286, 288, 427, 287, 0, 289, 290,
	292, 291, 0, 0, 0, 428, 293, 429, 294, 295,
	0, 296, 0, 0, 297, 298, 0, 0, 299, 430,
	0, 300, 0, 431, 301, 302, 303, 304, 305, 306,
	307, 0, 308, 432, 309, 433, 310, 0, 311, 312,
	313, 314, 315, 434, 316, 317, 0, 318, 319, 320,
	321, 322, 0, 324, 325, 323, 326, 327, 328, 329,
	0, 330, 0, 0, 331, 332, 333, 435, 334, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 436, 437,
	438, 439, 343, 346, 347, 0, 348, 335, 336, 349,
	0, 350, 440, 441, 351, 0, 359, 352, 353, 354,
	337, 355, 358, 442, 356, 0, 357, 443, 0, 360,
	361, 0, 362, 363, 364, 365, 366, 367, 368, 369,
	0, 444, 445, 446, 0, 0, 370, 371, 447, 448,
	0, 372, 373, 374, 375, 0, 0, 376, 377, 378,
	379, 0, 380, 0, 449, 381, 382, 383, 450, 451,
	0, 1535, 384, 207, 0, 0, 0, 385, 386, 0,
	387, 388, 389, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 0, 214, 0, 0, 0, 0, 390,
	0, 0, 0, 0, 215, 216, 217, 391, 392, 393,
	394, 218, 395, 396, 0, 219, 397, 398, 220, 221,
	222, 0, 0, 399, 400, 401, 0, 223, 402, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 230, 231,
	232, 229, 0, 233, 0, 234, 235, 0, 0, 236,
	237, 238, 0, 0, 0, 0, 0, 0, 0, 239,
	240, 460, 241, 403, 242, 404, 405, 0, 243, 0,
	244, 0, 245, 0, 0, 246, 247, 0, 248, 0,
	0, 0, 406, 249, 250, 251, 252, 253, 407, 408,
	0, 0, 0, 0, 0, 0, 0, 254, 255, 409,
	410, 411, 0, 256, 0, 257, 0, 0, 0, 258,
	0, 259, 412, 0, 413, 0, 260, 261, 262, 263,
	264, 265, 414, 415, 0, 0, 416, 269, 0, 266,
	0, 0, 267, 417, 268, 418, 419, 420, 421, 422,
	0, 423, 0, 270, 0, 271, 272, 273, 0, 424,
	425, 0, 0, 274, 275, 276, 0, 278, 277, 0,
	426, 0, 279, 280, 0, 0, 281, 282, 0, 0,
	283, 0, 284, 0, 0, 285, 286, 288, 427, 287,
	0, 289, 290, 292, 291, 0, 0, 0, 428, 293,
	429, 294, 295, 0, 296, 0, 0, 297, 298, 0,
	0, 299, 430, 0, 300, 0, 431, 301, 302, 303,
	304, 305, 306, 307, 0, 308, 432, 309, 433, 310,
	0, 311, 312, 313, 314, 315, 434, 316, 317, 0,
	318, 319, 320, 321, 322, 0, 324, 325, 323, 326,
	327, 328, 329, 0, 330, 0, 0, 331, 332, 333,
	435, 334, 0, 338, 339, 340, 341, 342, 0, 344,
	345, 436, 437, 438, 439, 343, 346, 347, 0, 348,
	335, 336, 349, 0, 350, 440, 441, 351, 0, 359,
	352, 353, 354, 337, 355, 358, 442, 356, 0, 357,
	443, 0, 360, 361, 0, 362, 363, 364, 365, 366,
	367, 368, 369, 0, 444, 445, 446, 0, 0, 370,
	371, 447, 448, 0, 372, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 0, 380, 0, 449, 381, 382,
	383, 450, 451, 0, 584, 384, 207, 0, 0, 0,
	385, 386, 0, 387, 388, 389, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 0, 0,
	0, 0, 390, 0, 0, 0, 0, 215, 216, 217,
	391, 392, 393, 394, 218, 395, 396, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 399, 400, 1111, 0,
	223, 402, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 0, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 403, 242, 404, 405,
	0, 243, 0, 244, 0, 245, 0, 0, 246, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 409, 410, 411, 0, 256, 0, 257, 0,
	0, 0, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 414, 415, 0, 0, 416,
	269, 0, 266, 0, 0, 267, 417, 268, 418, 419,
	420, 421, 422, 0, 423, 0, 270, 0, 271, 272,
	273, 0, 424, 425, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 0, 279, 280, 0, 0, 281,
	282, 0, 0, 283, 0, 284, 0, 0, 285, 286,
	288, 427, 586, 0, 289, 290, 292, 291, 0, 0,
	0, 428, 293, 429, 294, 295, 0, 296, 0, 0,
	297, 298, 0, 0, 299, 430, 0, 300, 0, 431,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 434,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 0, 0,
	331, 332, 333, 435, 334, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 348, 335, 336, 349, 0, 350, 440, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 442,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 581, 445, 446,
	0, 0, 370, 371, 447, 448, 0, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 451, 0, 1431, 384, 207,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 0,
	0, 0, 0, 0, 0, 210, 211, 212, 213, 0,
	214, 0, 0, 0, 0, 390, 0, 0, 0, 0,
	215, 216, 217, 391, 392, 393, 394, 218, 395, 396,
	0, 219, 397, 398, 220, 221, 222, 0, 0, 399,
	400, 401, 0, 223, 402, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 230, 231, 232, 229, 0, 233,
	0, 234, 235, 0, 0, 236, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 460, 241, 403,
	242, 404, 405, 0, 243, 0, 244, 0, 245, 0,
	0, 246, 247, 0, 248, 0, 0, 0, 406, 249,
	250, 251, 252, 253, 407, 408, 0, 0, 0, 0,
	0, 0, 0, 254, 255, 409, 410, 411, 0, 256,
	0, 257, 0, 0, 0, 258, 0, 259, 412, 0,
	413, 0, 260, 261, 262, 263, 264, 265, 1430, 415,
	0, 0, 416, 269, 0, 266, 0, 0, 267, 417,
	268, 418, 419, 420, 421, 422, 0, 423, 0, 270,
	0, 271, 272, 273, 0, 424, 425, 0, 0, 274,
	275, 276, 0, 278, 277, 0, 426, 0, 279, 280,
	0, 0, 281, 282, 0, 0, 283, 0, 284, 0,
	0, 285, 286, 288, 427, 287, 0, 289, 290, 292,
	291, 0, 0, 0, 428, 293, 429, 294, 295, 0,
	296, 0, 0, 297, 298, 0, 0, 299, 430, 0,
	300, 0, 431, 301, 302, 303, 304, 305, 306, 307,
	0, 308, 432, 309, 433, 310, 0, 311, 312, 313,
	314, 315, 434, 316, 317, 0, 318, 319, 320, 321,
	322, 0, 324, 325, 323, 326, 327, 328, 329, 0,
	330, 0, 0, 331, 332, 333, 435, 334, 0, 338,
	339, 340, 341, 342, 0, 344, 345, 436, 437, 438,
	439, 343, 346, 347, 0, 348, 335, 336, 349, 0,
	350, 440, 441, 351, 0, 359, 352, 353, 354, 337,
	355, 358, 442, 356, 0, 357, 443, 0, 360, 361,
	0, 362, 363, 364, 365, 366, 367, 368, 369, 0,
	444, 445, 446, 0, 0, 370, 371, 447, 448, 0,
	372, 373, 374, 375, 0, 0, 376, 377, 378, 379,
	0, 380, 0, 449, 381, 382, 383, 450, 451, 0,
	584, 384, 207, 0, 0, 0, 385, 386, 0, 387,
	388, 389, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 0, 214, 0, 0, 0, 0, 390, 0,
	0, 0, 0, 215, 216, 217, 391, 392, 393, 394,
	218, 395, 396, 0, 219, 397, 398, 220, 221, 222,
	0, 0, 399, 400, 1111, 0, 223, 402, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 230, 231, 232,
	229, 0, 233, 0, 234, 235, 0, 0, 236, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	460, 241, 403, 242, 404, 405, 0, 243, 0, 244,
	0, 245, 0, 0, 246, 247, 0, 248, 0, 0,
	0, 406, 249, 250, 251, 252, 253, 407, 408, 0,
	0, 0, 0, 0, 0, 0, 254, 255, 409, 410,
	411, 0, 256, 0, 257, 0, 0, 0, 258, 0,
	259, 412, 0, 413, 0, 260, 261, 262, 263, 264,
	265, 414, 415, 0, 0, 416, 269, 0, 266, 0,
	0, 267, 417, 268, 418, 419, 420, 421, 422, 0,
	423, 0, 270, 0, 271, 272, 273, 0, 424, 425,
	0, 0, 274, 275, 276, 0, 278, 277, 0, 426,
	0, 279, 280, 0, 0, 281, 282, 0, 0, 283,
	0, 284, 0, 0, 285, 286, 288, 427, 586, 0,
	289, 290, 292, 291, 0, 0, 0, 428, 293, 429,
	294, 295, 0, 296, 0, 0, 297, 298, 0, 0,
	299, 430, 0, 300, 0, 431, 301, 302, 303, 304,
	305, 306, 307, 0, 308, 432, 309, 433, 310, 0,
	311, 312, 313, 314, 315, 434, 316, 317, 0, 318,
	319, 320, 321, 322, 0, 324, 325, 323, 326, 327,
	328, 329, 0, 330, 0, 0, 331, 332, 333, 435,
	334, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	436, 437, 438, 439, 343, 346, 347, 0, 348, 335,
	336, 349, 0, 350, 440, 441, 351, 0, 359, 352,
	353, 354, 337, 355, 358, 442, 356, 0, 357, 443,
	0, 360, 361, 0, 362, 363, 364, 365, 366, 367,
	368, 369, 0, 581, 445, 446, 0, 0, 370, 1112,
	447, 448, 0, 372, 373, 374, 375, 0, 0, 376,
	377, 378, 379, 0, 380, 0, 449, 381, 382, 383,
	450, 451, 0, 584, 384, 207, 0, 0, 0, 385,
	386, 0, 387, 388, 389, 0, 0, 0, 0, 0,
	0, 210, 211, 212, 213, 0, 214, 0, 0, 0,
	0, 390, 0, 0, 0, 0, 215, 216, 217, 391,
	392, 393, 394, 218, 395, 396, 0, 219, 397, 398,
	220, 221, 222, 0, 0, 399, 400, 401, 0, 575,
	402, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	230, 231, 232, 229, 0, 233, 0, 234, 235, 0,
	0, 236, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 460, 241, 403, 242, 404, 405, 0,
	243, 0, 244, 0, 245, 0, 0, 246, 247, 0,
	248, 0, 0, 0, 406, 249, 250, 251, 252, 253,
	407, 408, 0, 0, 0, 0, 0, 0, 0, 254,
	255, 409, 410, 411, 0, 256, 0, 257, 0, 0,
	0, 258, 0, 259, 412, 0, 413, 0, 260, 261,
	262, 263, 264, 265, 414, 415, 0, 0, 416, 269,
	0, 266, 0, 0, 267, 417, 268, 418, 419, 420,
	421, 422, 0, 423, 0, 270, 0, 271, 272, 273,
	0, 424, 425, 0, 0, 274, 275, 276, 0, 278,
	277, 0, 426, 0, 279, 280, 0, 0, 281, 282,
	0, 0, 283, 0, 284, 0, 0, 285, 286, 288,
	427, 586, 0, 289, 290, 292, 291, 0, 0, 0,
	428, 293, 429, 294, 295, 0, 296, 0, 0, 297,
	298, 0, 0, 299, 430, 0, 300, 0, 431, 301,
	302, 303, 304, 305, 306, 307, 0, 308, 432, 309,
	433, 310, 0, 311, 312, 313, 314, 315, 434, 316,
	317, 0, 318, 319, 320, 321, 322, 0, 324, 325,
	323, 326, 327, 328, 329, 0, 330, 0, 0, 331,
	332, 333, 435, 334, 0, 338, 339, 340, 341, 342,
	0, 344, 345, 436, 437, 438, 439, 343, 1087, 347,
	0, 348, 335, 336, 349, 0, 350, 440, 441, 351,
	0, 359, 352, 353, 354, 337, 355, 358, 442, 356,
	0, 357, 443, 0, 360, 361, 0, 362, 363, 364,
	365, 366, 367, 368, 369, 0, 581, 445, 446, 0,
	0, 370, 371, 447, 448, 0, 372, 373, 374, 375,
	0, 0, 376, 377, 378, 379, 0, 380, 0, 449,
	381, 382, 383, 450, 451, 0, 1055, 384, 207, 0,
	0, 0, 385, 386, 0, 387, 388, 389, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 0, 214,
	0, 0, 0, 0, 390, 0, 0, 0, 0, 215,
	216, 217, 391, 392, 393, 394, 218, 395, 396, 0,
	219, 397, 398, 220, 221, 222, 0, 0, 399, 400,
	401, 0, 223, 402, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 230, 231, 232, 229, 0, 233, 0,
	234, 235, 0, 0, 236, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 460, 241, 403, 242,
	404, 405, 0, 243, 0, 244, 0, 245, 0, 0,
	246, 247, 0, 248, 0, 0, 0, 406, 249, 250,
	251, 252, 253, 407, 408, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 409, 410, 411, 0, 256, 0,
	257, 0, 0, 0, 258, 0, 259, 412, 0, 413,
	0, 260, 261, 262, 263, 264, 265, 1054, 415, 0,
	0, 416, 269, 0, 266, 0, 0, 267, 417, 268,
	418, 419, 420, 421, 422, 0, 423, 0, 270, 0,
	271, 272, 273, 0, 424, 425, 0, 0, 274, 275,
	276, 0, 278, 277, 0, 426, 0, 279, 280, 0,
	0, 281, 282, 0, 0, 283, 0, 284, 0, 0,
	285, 286, 288, 427, 287, 0, 289, 290, 292, 291,
	0, 0, 0, 428, 293, 429, 294, 295, 0, 296,
	0, 0, 297, 298, 0, 0, 299, 430, 0, 300,
	0, 431, 301, 302, 303, 304, 305, 306, 307, 0,
	308, 432, 309, 433, 310, 0, 311, 312, 313, 314,
	315, 434, 316, 317, 0, 318, 319, 320, 321, 322,
	0, 324, 325, 323, 326, 327, 328, 329, 0, 330,
	0, 0, 331, 332, 333, 435, 334, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 436, 437, 438, 439,
	343, 346, 347, 0, 348, 335, 336, 349, 0, 350,
	440, 441, 351, 0, 359, 352, 353, 354, 337, 355,
	358, 442, 356, 0, 357, 443, 0, 360, 361, 0,
	362, 363, 364, 365, 366, 367, 368, 369, 0, 444,
	445, 446, 0, 0, 370, 371, 447, 448, 0, 372,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 0,
	380, 0, 449, 381, 382, 383, 450, 451, 0, 1051,
	384, 207, 0, 0, 0, 385, 386, 0, 387, 388,
	389, 0, 0, 0, 0, 0, 0, 210, 211, 212,
	213, 0, 214, 0, 0, 0, 0, 390, 0, 0,
	0, 0, 215, 216, 217, 391, 392, 393, 394, 218,
	395, 396, 0, 219, 397, 398, 220, 221, 222, 0,
	0, 399, 400, 401, 0, 223, 402, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 230, 231, 232, 229,
	0, 233, 0, 234, 235, 0, 0, 236, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 460,
	241, 403, 242, 404, 405, 0, 243, 0, 244, 0,
	245, 0, 0, 246, 247, 0, 248, 0, 0, 0,
	406, 249, 250, 251, 252, 253, 407, 408, 0, 0,
	0, 0, 0, 0, 0, 254, 255, 409, 410, 411,
	0, 256, 0, 257, 0, 0, 0, 258, 0, 259,
	412, 0, 413, 0, 260, 261, 262, 263, 264, 265,
	1050, 415, 0, 0, 416, 269, 0, 266, 0, 0,
	267, 417, 268, 418, 419, 420, 421, 422, 0, 423,
	0, 270, 0, 271, 272, 273, 0, 424, 425, 0,
	0, 274, 275, 276, 0, 278, 277, 0, 426, 0,
	279, 280, 0, 0, 281, 282, 0, 0, 283, 0,
	284, 0, 0, 285, 286, 288, 427, 287, 0, 289,
	290, 292, 291, 0, 0, 0, 428, 293, 429, 294,
	295, 0, 296, 0, 0, 297, 298, 0, 0, 299,
	430, 0, 300, 0, 431, 301, 302, 303, 304, 305,
	306, 307, 0, 308, 432, 309, 433, 310, 0, 311,
	312, 313, 314, 315, 434, 316, 317, 0, 318, 319,
	320, 321, 322, 0, 324, 325, 323, 326, 327, 328,
	329, 0, 330, 0, 0, 331, 332, 333, 435, 334,
	0, 338, 339, 340, 341, 342, 0, 344, 345, 436,
	437, 438, 439, 343, 346, 347, 0, 348, 335, 336,
	349, 0, 350, 440, 441, 351, 0, 359, 352, 353,
	354, 337, 355, 358, 442, 356, 0, 357, 443, 0,
	360, 361, 0, 362, 363, 364, 365, 366, 367, 368,
	369, 0, 444, 445, 446, 0, 0, 370, 371, 447,
	448, 0, 372, 373, 374, 375, 0, 0, 376, 377,
	378, 379, 0, 380, 0, 449, 381, 382, 383, 450,
	451, 0, 1048, 384, 207, 0, 0, 0, 385, 386,
	0, 387, 388, 389, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 0, 214, 0, 0, 0, 0,
	390, 0, 0, 0, 0, 215, 216, 217, 391, 392,
	393, 394, 218, 395, 396, 0, 219, 397, 398, 220,
	221, 222, 0, 0, 399, 400, 401, 0, 223, 402,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 230,
	231, 232, 229, 0, 233, 0, 234, 235, 0, 0,
	236, 237, 238, 0, 0, 0, 0, 0, 0, 0,
	239, 240, 460, 241, 403, 242, 404, 405, 0, 243,
	0, 244, 0, 245, 0, 0, 246, 247, 0, 248,
	0, 0, 0, 406, 249, 250, 251, 252, 253, 407,
	408, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	409, 410, 411, 0, 256, 0, 257, 0, 0, 0,
	258, 0, 259, 412, 0, 413, 0, 260, 261, 262,
	263, 264, 265, 1047, 415, 0, 0, 416, 269, 0,
	266, 0, 0, 267, 417, 268, 418, 419, 420, 421,
	422, 0, 423, 0, 270, 0, 271, 272, 273, 0,
	424, 425, 0, 0, 274, 275, 276, 0, 278, 277,
	0, 426, 0, 279, 280, 0, 0, 281, 282, 0,
	0, 283, 0, 284, 0, 0, 285, 286, 288, 427,
	287, 0, 289, 290, 292, 291, 0, 0, 0, 428,
	293, 429, 294, 295, 0, 296, 0, 0, 297, 298,
	0, 0, 299, 430, 0, 300, 0, 431, 301, 302,
	303, 304, 305, 306, 307, 0, 308, 432, 309, 433,
	310, 0, 311, 312, 313, 314, 315, 434, 316, 317,
	0, 318, 319, 320, 321, 322, 0, 324, 325, 323,
	326, 327, 328, 329, 0, 330, 0, 0, 331, 332,
	333, 435, 334, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 436, 437, 438, 439, 343, 346, 347, 0,
	348, 335, 336, 349, 0, 350, 440, 441, 351, 0,
	359, 352, 353, 354, 337, 355, 358, 442, 356, 0,
	357, 443, 0, 360, 361, 0, 362, 363, 364, 365,
	366, 367, 368, 369, 0, 444, 445, 446, 0, 0,
	370, 371, 447, 448, 0, 372, 373, 374, 375, 0,
	0, 376, 377, 378, 379, 0, 380, 0, 449, 381,
	382, 383, 450, 451, 0, 1045, 384, 207, 0, 0,
	0, 385, 386, 0, 387, 388, 389, 0, 0, 0,
	0, 0, 0, 210, 211, 212, 213, 0, 214, 0,
	0, 0, 0, 390, 0, 0, 0, 0, 215, 216,
	217, 391, 392, 393, 394, 218, 395, 396, 0, 219,
	397, 398, 220, 221, 222, 0, 0, 399, 400, 401,
	0, 223, 402, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 230, 231, 232, 229, 0, 233, 0, 234,
	235, 0, 0, 236, 237, 238, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 460, 241, 403, 242, 404,
	405, 0, 243, 0, 244, 0, 245, 0, 0, 246,
	247, 0, 248, 0, 0, 0, 406, 249, 250, 251,
	252, 253, 407, 408, 0, 0, 0, 0, 0, 0,
	0, 254, 255, 409, 410, 411, 0, 256, 0, 257,
	0, 0, 0, 258, 0, 259, 412, 0, 413, 0,
	260, 261, 262, 263, 264, 265, 1044, 415, 0, 0,
	416, 269, 0, 266, 0, 0, 267, 417, 268, 418,
	419, 420, 421, 422, 0, 423, 0, 270, 0, 271,
	272, 273, 0, 424, 425, 0, 0, 274, 275, 276,
	0, 278, 277, 0, 426, 0, 279, 280, 0, 0,
	281, 282, 0, 0, 283, 0, 284, 0, 0, 285,
	286, 288, 427, 287, 0, 289, 290, 292, 291, 0,
	0, 0, 428, 293, 429, 294, 295, 0, 296, 0,
	0, 297, 298, 0, 0, 299, 430, 0, 300, 0,
	431, 301, 302, 303, 304, 305, 306, 307, 0, 308,
	432, 309, 433, 310, 0, 311, 312, 313, 314, 315,
	434, 316, 317, 0, 318, 319, 320, 321, 322, 0,
	324, 325, 323, 326, 327, 328, 329, 0, 330, 0,
	0, 331, 332, 333, 435, 334, 0, 338, 339, 340,
	341, 342, 0, 344, 345, 436, 437, 438, 439, 343,
	346, 347, 0, 348, 335, 336, 349, 0, 350, 440,
	441, 351, 0, 359, 352, 353, 354, 337, 355, 358,
	442, 356, 0, 357, 443, 0, 360, 361, 0, 362,
	363, 364, 365, 366, 367, 368, 369, 0, 444, 445,
	446, 0, 0, 370, 371, 447, 448, 0, 372, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 0, 380,
	0, 449, 381, 382, 383, 450, 451, 0, 1041, 384,
	207, 0, 0, 0, 385, 386, 0, 387, 388, 389,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	0, 214, 0, 0, 0, 0, 390, 0, 0, 0,
	0, 215, 216, 217, 391, 392, 393, 394, 218, 395,
	396, 0, 219, 397, 398, 220, 221, 222, 0, 0,
	399, 400, 401, 0, 223, 402, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 230, 231, 232, 229, 0,
	233, 0, 234, 235, 0, 0, 236, 237, 238, 0,
	0, 0, 0, 0, 0, 0, 239, 240, 460, 241,
	403, 242, 404, 405, 0, 243, 0, 244, 0, 245,
	0, 0, 246, 247, 0, 248, 0, 0, 0, 406,
	249, 250, 251, 252, 253, 407, 408, 0, 0, 0,
	0, 0, 0, 0, 254, 255, 409, 410, 411, 0,
	256, 0, 257, 0, 0, 0, 258, 0, 259, 412,
	0, 413, 0, 260, 261, 262, 263, 264, 265, 1040,
	415, 0, 0, 416, 269, 0, 266, 0, 0, 267,
	417, 268, 418, 419, 420, 421, 422, 0, 423, 0,
	270, 0, 271, 272, 273, 0, 424, 425, 0, 0,
	274, 275, 276, 0, 278, 277, 0, 426, 0, 279,
	280, 0, 0, 281, 282, 0, 0, 283, 0, 284,
	0, 0, 285, 286, 288, 427, 287, 0, 289, 290,
	292, 291, 0, 0, 0, 428, 293, 429, 294, 295,
	0, 296, 0, 0, 297, 298, 0, 0, 299, 430,
	0, 300, 0, 431, 301, 302, 303, 304, 305, 306,
	307, 0, 308, 432, 309, 433, 310, 0, 311, 312,
	313, 314, 315, 434, 316, 317, 0, 318, 319, 320,
	321, 322, 0, 324, 325, 323, 326, 327, 328, 329,
	0, 330, 0, 0, 331, 332, 333, 435, 334, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 436, 437,
	438, 439, 343, 346, 347, 0, 348, 335, 336, 349,
	0, 350, 440, 441, 351, 0, 359, 352, 353, 354,
	337, 355, 358, 442, 356, 0, 357, 443, 0, 360,
	361, 0, 362, 363, 364, 365, 366, 367, 368, 369,
	0, 444, 445, 446, 0, 0, 370, 371, 447, 448,
	0, 372, 373, 374, 375, 0, 0, 376, 377, 378,
	379, 0, 380, 0, 449, 381, 382, 383, 450, 451,
	207, 0, 384, 0, 0, 0, 0, 385, 386, 0,
	387, 388, 389, 0, 0, 0, 210, 211, 212, 213,
	1029, 214, 0, 0, 0, 0, 390, 0, 0, 0,
	0, 215, 216, 217, 391, 392, 393, 394, 218, 395,
	396, 0, 219, 397, 398, 220, 221, 222, 0, 0,
	399, 400, 401, 0, 223, 402, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 230, 231, 232, 229, 0,
	233, 0, 234, 235, 0, 0, 236, 237, 238, 0,
	0, 0, 0, 0, 0, 0, 239, 240, 460, 241,
	403, 242, 404, 405, 0, 243, 0, 244, 0, 245,
	0, 0, 246, 247, 0, 248, 0, 0, 0, 406,
	249, 250, 251, 252, 253, 407, 408, 0, 0, 0,
	0, 0, 0, 0, 254, 255, 409, 410, 411, 0,
	256, 0, 257, 0, 0, 0, 258, 0, 259, 412,
	0, 413, 0, 260, 261, 262, 263, 264, 265, 414,
	415, 0, 0, 416, 269, 0, 266, 0, 0, 267,
	417, 268, 418, 419, 420, 421, 422, 0, 423, 0,
	270, 0, 271, 272, 273, 0, 424, 425, 0, 0,
	274, 275, 276, 0, 278, 277, 0, 426, 0, 279,
	280, 0, 0, 281, 282, 0, 0, 283, 0, 284,
	0, 0, 285, 286, 288, 427, 287, 0, 289, 290,
	292, 291, 0, 0, 0, 428, 293, 429, 294, 295,
	0, 296, 0, 0, 297, 298, 0, 0, 299, 430,
	0, 300, 0, 431, 301, 302, 303, 304, 305, 306,
	307, 0, 308, 432, 309, 433, 310, 0, 311, 312,
	313, 314, 315, 434, 316, 317, 0, 318, 319, 320,
	321, 322, 0, 324, 325, 323, 326, 327, 328, 329,
	0, 330, 0, 0, 331, 332, 333, 435, 334, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 436, 437,
	438, 439, 343, 346, 347, 0, 348, 335, 336, 349,
	0, 350, 440, 441, 351, 0, 359, 352, 353, 354,
	337, 355, 358, 442, 356, 0, 357, 443, 0, 360,
	361, 0, 362, 363, 364, 365, 366, 367, 368, 369,
	0, 444, 445, 446, 0, 0, 370, 371, 447, 448,
	0, 372, 373, 374, 375, 0, 0, 376, 377, 378,
	379, 0, 380, 0, 449, 381, 382, 383, 450, 451,
	0, 1027, 384, 207, 0, 0, 0, 385, 386, 0,
	387, 388, 389, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 0, 214, 0, 0, 0, 0, 390,
	0, 0, 0, 0, 215, 216, 217, 391, 392, 393,
	394, 218, 395, 396, 0, 219, 397, 398, 220, 221,
	222, 0, 0, 399, 400, 401, 0, 223, 402, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 230, 231,
	232, 229, 0, 233, 0, 234, 235, 0, 0, 236,
	237, 238, 0, 0, 0, 0, 0, 0, 0, 239,
	240, 460, 241, 403, 242, 404, 405, 0, 243, 0,
	244, 0, 245, 0, 0, 246, 247, 0, 248, 0,
	0, 0, 406, 249, 250, 251, 252, 253, 407, 408,
	0, 0, 0, 0, 0, 0, 0, 254, 255, 409,
	410, 411, 0, 256, 0, 257, 0, 0, 0, 258,
	0, 259, 412, 0, 413, 0, 260, 261, 262, 263,
	264, 265, 1026, 415, 0, 0, 416, 269, 0, 266,
	0, 0, 267, 417, 268, 418, 419, 420, 421, 422,
	0, 423, 0, 270, 0, 271, 272, 273, 0, 424,
	425, 0, 0, 274, 275, 276, 0, 278, 277, 0,
	426, 0, 279, 280, 0, 0, 281, 282, 0, 0,
	283, 0, 284, 0, 0, 285, 286, 288, 427, 287,
	0, 289, 290, 292, 291, 0, 0, 0, 428, 293,
	429, 294, 295, 0, 296, 0, 0, 297, 298, 0,
	0, 299, 430, 0, 300, 0, 431, 301, 302, 303,
	304, 305, 306, 307, 0, 308, 432, 309, 433, 310,
	0, 311, 312, 313, 314, 315, 434, 316, 317, 0,
	318, 319, 320, 321, 322, 0, 324, 325, 323, 326,
	327, 328, 329, 0, 330, 0, 0, 331, 332, 333,
	435, 334, 0, 338, 339, 340, 341, 342, 0, 344,
	345, 436, 437, 438, 439, 343, 346, 347, 0, 348,
	335, 336, 349, 0, 350, 440, 441, 351, 0, 359,
	352, 353, 354, 337, 355, 358, 442, 356, 0, 357,
	443, 0, 360, 361, 0, 362, 363, 364, 365, 366,
	367, 368, 369, 0, 444, 445, 446, 0, 0, 370,
	371, 447, 448, 0, 372, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 0, 380, 0, 449, 381, 382,
	383, 450, 451, 0, 1021, 384, 207, 0, 0, 0,
	385, 386, 0, 387, 388, 389, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 0, 0,
	0, 0, 390, 0, 0, 0, 0, 215, 216, 217,
	391, 392, 393, 394, 218, 395, 396, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 399, 400, 401, 0,
	223, 402, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 0, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 403, 242, 404, 405,
	0, 243, 0, 244, 0, 245, 0, 0, 246, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 409, 410, 411, 0, 256, 0, 257, 0,
	0, 0, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 414, 415, 0, 0, 416,
	269, 0, 266, 0, 0, 267, 417, 268, 418, 419,
	420, 421, 422, 0, 423, 0, 270, 0, 271, 272,
	273, 0, 424, 425, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 0, 279, 280, 0, 0, 281,
	282, 0, 0, 283, 0, 284, 0, 0, 285, 286,
	288, 427, 287, 0, 289, 290, 292, 291, 0, 0,
	0, 428, 293, 429, 294, 295, 0, 296, 0, 0,
	297, 298, 0, 0, 299, 430, 0, 300, 0, 431,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 434,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 0, 0,
	331, 332, 333, 435, 334, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 348, 335, 336, 349, 0, 350, 440, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 442,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 444, 445, 446,
	0, 0, 370, 371, 447, 448, 0, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 451, 0, 1012, 384, 207,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 0,
	0, 0, 0, 0, 0, 210, 211, 212, 213, 0,
	214, 0, 0, 0, 0, 390, 0, 0, 0, 0,
	215, 216, 217, 391, 392, 393, 394, 218, 395, 396,
	0, 219, 397, 398, 220, 221, 222, 0, 0, 399,
	400, 401, 0, 223, 402, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 230, 231, 232, 229, 0, 233,
	0, 234, 235, 0, 0, 236, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 460, 241, 403,
	242, 404, 405, 0, 243, 0, 244, 0, 245, 0,
	0, 246, 247, 0, 248, 0, 0, 0, 406, 249,
	250, 251, 252, 253, 407, 408, 0, 0, 0, 0,
	0, 0, 0, 254, 255, 409, 410, 411, 0, 256,
	0, 257, 0, 0, 0, 258, 0, 259, 412, 0,
	413, 0, 260, 261, 262, 263, 264, 265, 1011, 415,
	0, 0, 416, 269, 0, 266, 0, 0, 267, 417,
	268, 418, 419, 420, 421, 422, 0, 423, 0, 270,
	0, 271, 272, 273, 0, 424, 425, 0, 0, 274,
	275, 276, 0, 278, 277, 0, 426, 0, 279, 280,
	0, 0, 281, 282, 0, 0, 283, 0, 284, 0,
	0, 285, 286, 288, 427, 287, 0, 289, 290, 292,
	291, 0, 0, 0, 428, 293, 429, 294, 295, 0,
	296, 0, 0, 297, 298, 0, 0, 299, 430, 0,
	300, 0, 431, 301, 302, 303, 304, 305, 306, 307,
	0, 308, 432, 309, 433, 310, 0, 311, 312, 313,
	314, 315, 434, 316, 317, 0, 318, 319, 320, 321,
	322, 0, 324, 325, 323, 326, 327, 328, 329, 0,
	330, 0, 0, 331, 332, 333, 435, 334, 0, 338,
	339, 340, 341, 342, 0, 344, 345, 436, 437, 438,
	439, 343, 346, 347, 0, 348, 335, 336, 349, 0,
	350, 440, 441, 351, 0, 359, 352, 353, 354, 337,
	355, 358, 442, 356, 0, 357, 443, 0, 360, 361,
	0, 362, 363, 364, 365, 366, 367, 368, 369, 0,
	444, 445, 446, 0, 0, 370, 371, 447, 448, 0,
	372, 373, 374, 375, 0, 0, 376, 377, 378, 379,
	0, 380, 0, 449, 381, 382, 383, 450, 451, 0,
	1008, 384, 207, 0, 0, 0, 385, 386, 0, 387,
	388, 389, 0, 0, 0, 0, 0, 0, 210, 211,
	212, 213, 0, 214, 0, 0, 0, 0, 390, 0,
	0, 0, 0, 215, 216, 217, 391, 392, 393, 394,
	218, 395, 396, 0, 219, 397, 398, 220, 221, 222,
	0, 0, 399, 400, 401, 0, 223, 402, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 230, 231, 232,
	229, 0, 233, 0, 234, 235, 0, 0, 236, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	460, 241, 403, 242, 404, 405, 0, 243, 0, 244,
	0, 245, 0, 0, 246, 247, 0, 248, 0, 0,
	0, 406, 249, 250, 251, 252, 253, 407, 408, 0,
	0, 0, 0, 0, 0, 0, 254, 255, 409, 410,
	411, 0, 256, 0, 257, 0, 0, 0, 258, 0,
	259, 412, 0, 413, 0, 260, 261, 262, 263, 264,
	265, 414, 415, 0, 0, 416, 269, 0, 266, 0,
	0, 267, 417, 268, 418, 419, 420, 421, 422, 0,
	423, 0, 270, 0, 271, 272, 273, 0, 424, 425,
	0, 0, 274, 275, 276, 0, 278, 277, 0, 426,
	0, 279, 280, 0, 0, 281, 282, 0, 0, 283,
	0, 284, 0, 0, 285, 286, 288, 427, 287, 0,
	289, 290, 292, 291, 0, 0, 0, 428, 293, 429,
	294, 295, 0, 296, 0, 0, 297, 298, 0, 0,
	299, 430, 0, 300, 0, 431, 301, 302, 303, 304,
	305, 306, 307, 0, 308, 432, 309, 433, 310, 0,
	311, 312, 313, 314, 315, 434, 316, 317, 0, 318,
	319, 320, 321, 322, 0, 324, 325, 323, 326, 327,
	328, 329, 0, 330, 0, 0, 331, 332, 333, 435,
	334, 0, 338, 339, 340, 341, 342, 0, 344, 345,
	436, 437, 438, 439, 343, 346, 347, 0, 348, 335,
	336, 349, 0, 350, 440, 441, 351, 0, 359, 352,
	353, 354, 337, 355, 358, 442, 356, 0, 357, 443,
	0, 360, 361, 0, 362, 363, 364, 365, 366, 367,
	368, 369, 0, 444, 445, 446, 0, 0, 370, 371,
	447, 448, 0, 372, 373, 374, 375, 0, 0, 376,
	377, 378, 379, 0, 380, 0, 449, 381, 382, 383,
	450, 451, 0, 1004, 384, 207, 0, 0, 0, 385,
	386, 0, 387, 388, 389, 0, 0, 0, 0, 0,
	0, 210, 211, 212, 213, 0, 214, 0, 0, 0,
	0, 390, 0, 0, 0, 0, 215, 216, 217, 391,
	392, 393, 394, 218, 395, 396, 0, 219, 397, 398,
	220, 221, 222, 0, 0, 399, 400, 401, 0, 223,
	402, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	230, 231, 232, 229, 0, 233, 0, 234, 235, 0,
	0, 236, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 460, 241, 403, 242, 404, 405, 0,
	243, 0, 244, 0, 245, 0, 0, 246, 247, 0,
	248, 0, 0, 0, 406, 249, 250, 251, 252, 253,
	407, 408, 0, 0, 0, 0, 0, 0, 0, 254,
	255, 409, 410, 411, 0, 256, 0, 257, 0, 0,
	0, 258, 0, 259, 412, 0, 413, 0, 260, 261,
	262, 263, 264, 265, 1006, 415, 0, 0, 416, 269,
	0, 266, 0, 0, 267, 417, 268, 418, 419, 420,
	421, 422, 0, 423, 0, 270, 0, 271, 272, 273,
	0, 424, 425, 0, 0, 274, 275, 276, 0, 278,
	277, 0, 426, 0, 279, 280, 0, 0, 281, 282,
	0, 0, 283, 0, 284, 0, 0, 285, 286, 288,
	427, 287, 0, 289, 290, 292, 291, 0, 0, 0,
	428, 293, 429, 294, 295, 0, 296, 0, 0, 297,
	298, 0, 0, 299, 430, 0, 300, 0, 431, 301,
	302, 303, 304, 305, 306, 307, 0, 308, 432, 309,
	433, 310, 0, 311, 312, 313, 314, 315, 434, 316,
	317, 0, 318, 319, 320, 321, 322, 0, 324, 325,
	323, 326, 327, 328, 329, 0, 330, 0, 0, 331,
	332, 333, 435, 334, 0, 338, 339, 340, 341, 342,
	0, 344, 345, 436, 437, 438, 439, 343, 346, 347,
	0, 348, 335, 336, 349, 0, 350, 440, 441, 351,
	0, 359, 352, 353, 354, 337, 355, 358, 442, 356,
	0, 357, 443, 0, 360, 361, 0, 362, 363, 364,
	365, 366, 367, 368, 369, 0, 444, 445, 446, 0,
	0, 370, 371, 447, 448, 0, 372, 373, 374, 375,
	0, 0, 376, 377, 378, 379, 0, 380, 0, 449,
	381, 382, 383, 450, 451, 0, 892, 384, 207, 0,
	0, 0, 385, 386, 0, 387, 388, 389, 0, 0,
	0, 0, 0, 0, 210, 211, 212, 213, 0, 214,
	0, 0, 0, 0, 390, 0, 0, 0, 0, 215,
	216, 217, 391, 392, 393, 394, 218, 395, 396, 0,
	219, 397, 398, 220, 221, 222, 0, 0, 399, 400,
	401, 0, 223, 402, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 230, 231, 232, 229, 0, 233, 0,
	234, 235, 0, 0, 236, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 460, 241, 403, 242,
	404, 405, 0, 243, 0, 244, 0, 245, 0, 0,
	246, 247, 0, 248, 0, 0, 0, 406, 249, 250,
	251, 252, 253, 407, 408, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 409, 410, 411, 0, 256, 0,
	257, 0, 0, 0, 258, 0, 259, 412, 0, 413,
	0, 260, 261, 262, 263, 264, 265, 894, 415, 0,
	0, 416, 269, 0, 266, 0, 0, 267, 417, 268,
	418, 419, 420, 421, 422, 0, 423, 0, 270, 0,
	271, 272, 273, 0, 424, 425, 0, 0, 274, 275,
	276, 0, 278, 277, 0, 426, 0, 279, 280, 0,
	0, 281, 282, 0, 0, 283, 0, 284, 0, 0,
	285, 286, 288, 427, 287, 0, 289, 290, 292, 291,
	0, 0, 0, 428, 293, 429, 294, 295, 0, 296,
	0, 0, 297, 298, 0, 0, 299, 430, 0, 300,
	0, 431, 301, 302, 303, 304, 305, 306, 307, 0,
	308, 432, 309, 433, 310, 0, 311, 312, 313, 314,
	315, 434, 316, 317, 0, 318, 319, 320, 321, 322,
	0, 324, 325, 323, 326, 327, 328, 329, 0, 330,
	0, 0, 331, 332, 333, 435, 334, 0, 338, 339,
	340, 341, 342, 0, 344, 345, 436, 437, 438, 439,
	343, 346, 347, 0, 348, 335, 336, 349, 0, 350,
	440, 441, 351, 0, 359, 352, 353, 354, 337, 355,
	358, 442, 356, 0, 357, 443, 0, 360, 361, 0,
	362, 363, 364, 365, 366, 367, 368, 369, 0, 444,
	445, 446, 0, 0, 370, 371, 447, 448, 0, 372,
	373, 374, 375, 0, 0, 376, 377, 378, 379, 0,
	380, 0, 449, 381, 382, 383, 450, 451, 0, 889,
	384, 207, 0, 0, 0, 385, 386, 0, 387, 388,
	389, 0, 0, 0, 0, 0, 0, 210, 211, 212,
	213, 0, 214, 0, 0, 0, 0, 390, 0, 0,
	0, 0, 215, 216, 217, 391, 392, 393, 394, 218,
	395, 396, 0, 219, 397, 398, 220, 221, 222, 0,
	0, 399, 400, 401, 0, 223, 402, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 230, 231, 232, 229,
	0, 233, 0, 234, 235, 0, 0, 236, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 460,
	241, 403, 242, 404, 405, 0, 243, 0, 244, 0,
	245, 0, 0, 246, 247, 0, 248, 0, 0, 0,
	406, 249, 250, 251, 252, 253, 407, 408, 0, 0,
	0, 0, 0, 0, 0, 254, 255, 409, 410, 411,
	0, 256, 0, 257, 0, 0, 0, 258, 0, 259,
	412, 0, 413, 0, 260, 261, 262, 263, 264, 265,
	414, 415, 0, 0, 416, 269, 0, 266, 0, 0,
	267, 417, 268, 418, 419, 420, 421, 422, 0, 423,
	0, 270, 0, 271, 272, 273, 0, 424, 425, 0,
	0, 274, 275, 276, 0, 278, 277, 0, 426, 0,
	279, 280, 0, 0, 281, 282, 0, 0, 283, 0,
	284, 0, 0, 285, 286, 288, 427, 287, 0, 289,
	290, 292, 291, 0, 0, 0, 428, 293, 429, 294,
	295, 0, 296, 0, 0, 297, 298, 0, 0, 299,
	430, 0, 300, 0, 431, 301, 302, 303, 304, 305,
	306, 307, 0, 308, 432, 309, 433, 310, 0, 311,
	312, 313, 314, 315, 434, 316, 317, 0, 318, 319,
	320, 321, 322, 0, 324, 325, 323, 326, 327, 328,
	329, 0, 330, 0, 0, 331, 332, 333, 435, 334,
	0, 338, 339, 340, 341, 342, 0, 344, 345, 436,
	437, 438, 439, 343, 346, 347, 0, 348, 335, 336,
	349, 0, 350, 440, 441, 351, 0, 359, 352, 353,
	354, 337, 355, 358, 442, 356, 0, 357, 443, 0,
	360, 361, 0, 362, 363, 364, 365, 366, 367, 368,
	369, 0, 444, 445, 446, 0, 0, 370, 371, 447,
	448, 0, 372, 373, 374, 375, 0, 0, 376, 377,
	378, 379, 0, 380, 0, 449, 381, 382, 383, 450,
	451, 0, 584, 384, 207, 0, 0, 0, 385, 386,
	0, 387, 388, 389, 0, 0, 0, 0, 0, 0,
	210, 211, 212, 213, 0, 214, 0, 0, 0, 0,
	390, 0, 0, 0, 0, 215, 216, 217, 391, 392,
	393, 394, 218, 395, 396, 0, 219, 397, 398, 220,
	221, 222, 0, 0, 399, 400, 401, 0, 575, 402,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 230,
	231, 232, 229, 0, 233, 0, 234, 235, 0, 0,
	236, 237, 238, 0, 0, 0, 0, 0, 0, 0,
	239, 240, 460, 241, 403, 242, 404, 405, 0, 243,
	0, 244, 0, 245, 0, 0, 246, 247, 0, 248,
	0, 0, 0, 406, 249, 250, 251, 252, 253, 407,
	408, 0, 0, 0, 0, 0, 0, 0, 254, 255,
	409, 410, 411, 0, 256, 0, 257, 0, 0, 0,
	258, 0, 259, 412, 0, 413, 0, 260, 261, 262,
	263, 264, 265, 414, 415, 0, 0, 416, 269, 0,
	266, 0, 0, 267, 417, 268, 418, 419, 420, 421,
	422, 0, 423, 0, 270, 0, 271, 272, 273, 0,
	424, 425, 0, 0, 274, 275, 276, 0, 278, 277,
	0, 426, 0, 279, 280, 0, 0, 281, 574, 0,
	0, 283, 0, 284, 0, 0, 285, 286, 288, 427,
	586, 0, 289, 290, 292, 291, 0, 0, 0, 428,
	293, 429, 294, 295, 0, 296, 0, 0, 297, 298,
	0, 0, 299, 430, 0, 300, 0, 431, 301, 302,
	303, 304, 305, 306, 307, 0, 308, 432, 309, 433,
	310, 0, 311, 312, 313, 314, 315, 434, 316, 317,
	0, 318, 319, 320, 321, 322, 0, 324, 325, 323,
	326, 327, 328, 329, 0, 330, 0, 0, 331, 332,
	333, 576, 334, 0, 338, 339, 340, 341, 342, 0,
	344, 345, 436, 437, 438, 439, 343, 577, 347, 0,
	348, 335, 336, 349, 0, 350, 440, 441, 351, 0,
	359, 352, 353, 354, 337, 355, 358, 442, 356, 0,
	357, 443, 0, 360, 361, 0, 362, 363, 364, 365,
	366, 367, 368, 369, 0, 581, 445, 446, 0, 0,
	370, 579, 447, 448, 0, 372, 373, 374, 375, 0,
	0, 376, 377, 378, 379, 0, 380, 0, 449, 381,
	382, 383, 450, 451, 0, 566, 384, 207, 0, 0,
	0, 385, 386, 0, 387, 388, 389, 0, 0, 0,
	0, 0, 0, 210, 211, 212, 213, 0, 214, 0,
	0, 0, 0, 390, 0, 0, 0, 0, 215, 216,
	217, 391, 392, 393, 394, 218, 395, 396, 0, 219,
	397, 398, 220, 221, 222, 0, 0, 399, 400, 401,
	0, 223, 402, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 230, 231, 232, 229, 0, 233, 0, 234,
	235, 0, 0, 236, 237, 238, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 460, 241, 403, 242, 404,
	405, 0, 243, 0, 244, 0, 245, 0, 0, 246,
	247, 0, 248, 0, 0, 0, 406, 249, 250, 251,
	252, 253, 407, 408, 0, 0, 0, 0, 0, 0,
	0, 254, 255, 409, 410, 411, 0, 256, 0, 257,
	0, 0, 0, 258, 0, 259, 412, 0, 413, 0,
	260, 261, 262, 263, 264, 265, 414, 415, 0, 0,
	416, 269, 0, 266, 0, 0, 267, 417, 268, 418,
	419, 420, 421, 422, 0, 423, 0, 270, 0, 271,
	272, 273, 0, 424, 425, 0, 0, 274, 275, 276,
	0, 278, 277, 0, 426, 0, 279, 280, 0, 0,
	281, 282, 0, 0, 283, 0, 284, 0, 0, 285,
	286, 288, 427, 287, 0, 289, 290, 292, 291, 0,
	0, 0, 428, 293, 429, 294, 295, 0, 296, 0,
	0, 297, 298, 0, 0, 299, 430, 0, 300, 0,
	431, 301, 302, 303, 304, 305, 306, 307, 0, 308,
	432, 309, 433, 310, 0, 311, 312, 313, 314, 315,
	434, 316, 317, 0, 318, 319, 320, 321, 322, 0,
	324, 325, 323, 326, 327, 328, 329, 0, 330, 0,
	0, 331, 332, 333, 435, 334, 0, 567, 339, 340,
	341, 342, 0, 344, 345, 436, 437, 438, 439, 343,
	346, 347, 0, 348, 335, 336, 349, 0, 350, 440,
	441, 351, 0, 359, 352, 353, 354, 337, 355, 358,
	442, 356, 0, 357, 443, 0, 360, 361, 0, 362,
	363, 364, 365, 366, 367, 368, 369, 0, 444, 445,
	446, 0, 0, 370, 371, 447, 448, 0, 372, 373,
	374, 375, 0, 0, 376, 377, 378, 379, 0, 380,
	0, 449, 381, 382, 383, 450, 451, 0, 562, 384,
	207, 0, 0, 0, 385, 386, 0, 387, 388, 389,
	0, 0, 0, 0, 0, 0, 210, 211, 212, 213,
	0, 214, 0, 0, 0, 0, 390, 0, 0, 0,
	0, 215, 216, 217, 391, 392, 393, 394, 218, 395,
	396, 0, 219, 397, 398, 220, 221, 222, 0, 0,
	399, 400, 401, 0, 223, 402, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 230, 231, 232, 229, 0,
	233, 0, 234, 235, 0, 0, 236, 237, 238, 0,
	0, 0, 0, 0, 0, 0, 239, 240, 460, 241,
	403, 242, 404, 405, 0, 243, 0, 244, 0, 245,
	0, 0, 246, 247, 0, 248, 0, 0, 0, 406,
	249, 250, 251, 252, 253, 407, 408, 0, 0, 0,
	0, 0, 0, 0, 254, 255, 409, 410, 411, 0,
	256, 0, 257, 0, 0, 0, 258, 0, 259, 412,
	0, 413, 0, 260, 261, 262, 263, 264, 265, 414,
	415, 0, 0, 416, 269, 0, 266, 0, 0, 267,
	417, 268, 418, 419, 420, 421, 422, 0, 423, 0,
	270, 0, 271, 272, 273, 0, 424, 425, 0, 0,
	274, 275, 276, 0, 278, 277, 0, 426, 0, 279,
	280, 0, 0, 281, 282, 0, 0, 283, 0, 284,
	0, 0, 285, 286, 288, 427, 287, 0, 289, 290,
	292, 291, 0, 0, 0, 428, 293, 429, 294, 295,
	0, 296, 0, 0, 297, 298, 0, 0, 299, 430,
	0, 300, 0, 431, 301, 302, 303, 304, 305, 306,
	307, 0, 308, 432, 309, 433, 310, 0, 311, 312,
	313, 314, 315, 434, 316, 317, 0, 318, 319, 320,
	321, 322, 0, 324, 325, 323, 326, 327, 328, 329,
	0, 330, 0, 0, 331, 332, 333, 435, 334, 0,
	338, 339, 340, 341, 342, 0, 344, 345, 436, 437,
	438, 439, 343, 346, 347, 0, 348, 335, 336, 349,
	0, 350, 440, 441, 351, 0, 359, 352, 353, 354,
	337, 355, 358, 442, 356, 0, 357, 443, 0, 360,
	361, 0, 362, 363, 364, 365, 366, 367, 368, 369,
	0, 444, 445, 446, 0, 0, 370, 371, 447, 448,
	0, 372, 373, 374, 375, 0, 0, 376, 377, 378,
	379, 0, 380, 0, 449, 381, 382, 383, 450, 451,
	0, 552, 384, 207, 0, 0, 0, 385, 386, 0,
	387, 388, 389, 0, 0, 0, 0, 0, 0, 210,
	211, 212, 213, 0, 214, 0, 0, 0, 0, 390,
	0, 0, 0, 0, 215, 216, 217, 391, 392, 393,
	394, 218, 395, 396, 0, 219, 397, 398, 220, 221,
	222, 0, 0, 399, 400, 401, 0, 223, 402, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 230, 231,
	232, 229, 0, 233, 0, 234, 235, 0, 0, 236,
	237, 238, 0, 0, 0, 0, 0, 0, 0, 239,
	240, 460, 241, 403, 242, 404, 405, 0, 243, 0,
	244, 0, 245, 0, 0, 246, 247, 0, 248, 0,
	0, 0, 406, 249, 250, 251, 252, 253, 407, 408,
	0, 0, 0, 0, 0, 0, 0, 254, 255, 409,
	410, 411, 0, 256, 0, 257, 0, 0, 0, 258,
	0, 259, 412, 0, 413, 0, 260, 261, 262, 263,
	264, 265, 414, 415, 0, 0, 416, 269, 0, 266,
	0, 0, 267, 417, 268, 418, 419, 420, 421, 422,
	0, 423, 0, 270, 0, 271, 272, 273, 0, 424,
	425, 0, 0, 274, 275, 276, 0, 278, 277, 0,
	426, 0, 279, 280, 0, 0, 281, 282, 0, 0,
	283, 0, 284, 0, 0, 285, 286, 288, 427, 287,
	0, 289, 290, 292, 291, 0, 0, 0, 428, 293,
	429, 294, 295, 0, 296, 0, 0, 297, 298, 0,
	0, 299, 430, 0, 300, 0, 431, 301, 302, 303,
	304, 305, 306, 307, 0, 308, 432, 309, 433, 310,
	0, 311, 312, 313, 314, 315, 434, 316, 317, 0,
	318, 319, 320, 321, 322, 0, 324, 325, 323, 326,
	327, 328, 329, 0, 330, 0, 0, 331, 332, 333,
	435, 334, 0, 338, 339, 340, 341, 342, 0, 344,
	345, 436, 437, 438, 439, 343, 346, 347, 0, 348,
	335, 336, 349, 0, 350, 440, 441, 351, 0, 359,
	352, 353, 354, 337, 355, 358, 442, 356, 0, 357,
	443, 0, 360, 361, 0, 362, 363, 364, 365, 366,
	367, 368, 369, 0, 444, 445, 446, 0, 0, 370,
	371, 447, 448, 0, 372, 373, 374, 375, 0, 0,
	376, 377, 378, 379, 0, 380, 0, 449, 381, 382,
	383, 450, 451, 0, 501, 384, 207, 0, 0, 0,
	385, 386, 0, 387, 388, 389, 0, 0, 0, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 0, 0,
	0, 0, 390, 0, 0, 0, 0, 215, 216, 217,
	391, 392, 393, 394, 218, 395, 396, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 399, 400, 401, 0,
	223, 402, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 0, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 403, 242, 404, 405,
	0, 243, 0, 244, 0, 245, 0, 0, 246, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 409, 410, 411, 0, 256, 0, 257, 0,
	0, 0, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 414, 415, 0, 0, 416,
	269, 0, 266, 0, 0, 267, 417, 268, 418, 419,
	420, 421, 422, 0, 423, 0, 270, 0, 271, 272,
	273, 0, 424, 425, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 0, 279, 280, 0, 0, 281,
	282, 0, 0, 283, 0, 284, 0, 0, 285, 286,
	288, 427, 287, 0, 289, 290, 292, 291, 0, 0,
	0, 428, 293, 429, 294, 295, 0, 296, 0, 0,
	297, 298, 0, 0, 299, 430, 0, 300, 0, 431,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 434,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 0, 0,
	331, 332, 333, 435, 334, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 348, 335, 336, 349, 0, 350, 440, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 442,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 444, 445, 446,
	0, 0, 370, 371, 447, 448, 0, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 451, 207, 0, 384, 0,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 0, 0,
	0, 0, 390, 0, 0, 0, 0, 215, 216, 217,
	391, 392, 393, 394, 218, 395, 396, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 399, 400, 401, 0,
	223, 402, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 0, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 403, 242, 404, 405,
	0, 243, 0, 244, 0, 245, 0, 0, 246, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 409, 410, 411, 0, 256, 0, 257, 0,
	0, 0, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 414, 415, 0, 0, 416,
	269, 0, 266, 0, 0, 267, 417, 268, 418, 419,
	420, 421, 422, 0, 423, 0, 270, 0, 271, 272,
	273, 0, 424, 425, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 0, 279, 280, 0, 0, 281,
	282, 0, 0, 283, 0, 284, 0, 0, 285, 286,
	288, 427, 287, 0, 289, 290, 292, 291, 0, 0,
	0, 428, 293, 429, 294, 295, 0, 296, 0, 0,
	297, 298, 0, 0, 299, 430, 0, 300, 0, 431,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 434,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 0, 0,
	331, 332, 333, 435, 334, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 348, 335, 336, 349, 0, 350, 440, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 442,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 444, 445, 446,
	0, 0, 370, 371, 447, 448, 0, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 451, 207, 0, 384, 0,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 0, 0,
	0, 0, 390, 0, 0, 0, 0, 215, 216, 217,
	391, 392, 393, 394, 218, 395, 396, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 399, 400, 401, 0,
	223, 402, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 0, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 403, 242, 404, 405,
	0, 243, 0, 244, 0, 245, 0, 0, 246, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 409, 410, 411, 0, 256, 0, 257, 0,
	0, 0, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 2206, 415, 0, 0, 416,
	269, 0, 266, 0, 0, 267, 417, 268, 418, 419,
	420, 421, 422, 0, 423, 0, 270, 0, 271, 272,
	273, 0, 424, 425, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 0, 279, 280, 0, 0, 281,
	282, 0, 0, 283, 0, 284, 0, 0, 285, 286,
	288, 427, 287, 0, 289, 290, 292, 291, 0, 0,
	0, 428, 293, 429, 294, 295, 0, 296, 0, 0,
	297, 298, 0, 0, 299, 430, 0, 300, 0, 431,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 434,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 0, 0,
	331, 332, 333, 435, 334, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 348, 335, 336, 349, 0, 350, 440, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 442,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 444, 445, 446,
	0, 0, 370, 371, 447, 448, 0, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 451, 207, 0, 384, 0,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 0, 0,
	0, 0, 390, 0, 0, 0, 0, 215, 216, 217,
	391, 392, 393, 394, 218, 395, 396, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 399, 400, 401, 0,
	223, 402, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 0, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 403, 242, 404, 405,
	0, 243, 0, 244, 0, 245, 0, 0, 246, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 409, 410, 411, 0, 256, 0, 257, 0,
	0, 0, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 2204, 415, 0, 0, 416,
	269, 0, 266, 0, 0, 267, 417, 268, 418, 419,
	420, 421, 422, 0, 423, 0, 270, 0, 271, 272,
	273, 0, 424, 425, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 0, 279, 280, 0, 0, 281,
	282, 0, 0, 283, 0, 284, 0, 0, 285, 286,
	288, 427, 287, 0, 289, 290, 292, 291, 0, 0,
	0, 428, 293, 429, 294, 295, 0, 296, 0, 0,
	297, 298, 0, 0, 299, 430, 0, 300, 0, 431,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 434,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 0, 0,
	331, 332, 333, 435, 334, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 348, 335, 336, 349, 0, 350, 440, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 442,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 444, 445, 446,
	0, 0, 370, 371, 447, 448, 0, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 451, 207, 0, 384, 0,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 0, 0,
	0, 0, 390, 0, 0, 0, 0, 215, 216, 217,
	391, 392, 393, 394, 218, 395, 396, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 399, 400, 401, 0,
	223, 402, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 0, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 403, 242, 404, 405,
	0, 243, 0, 244, 0, 245, 0, 0, 246, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 409, 410, 411, 0, 256, 0, 257, 0,
	0, 0, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 2193, 415, 0, 0, 416,
	269, 0, 266, 0, 0, 267, 417, 268, 418, 419,
	420, 421, 422, 0, 423, 0, 270, 0, 271, 272,
	273, 0, 424, 425, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 0, 279, 280, 0, 0, 281,
	282, 0, 0, 283, 0, 284, 0, 0, 285, 286,
	288, 427, 287, 0, 289, 290, 292, 291, 0, 0,
	0, 428, 293, 429, 294, 295, 0, 296, 0, 0,
	297, 298, 0, 0, 299, 430, 0, 300, 0, 431,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 434,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 0, 0,
	331, 332, 333, 435, 334, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 348, 335, 336, 349, 0, 350, 440, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 442,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 444, 445, 446,
	0, 0, 370, 371, 447, 448, 0, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 451, 207, 0, 384, 0,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 0, 0,
	0, 0, 390, 0, 0, 0, 0, 215, 216, 217,
	391, 392, 393, 394, 218, 395, 396, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 399, 400, 401, 0,
	223, 402, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 0, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 403, 242, 404, 405,
	0, 243, 0, 244, 0, 245, 0, 0, 246, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 409, 410, 411, 0, 256, 0, 257, 0,
	0, 0, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 414, 415, 0, 0, 416,
	269, 0, 266, 0, 0, 267, 417, 268, 418, 419,
	420, 421, 422, 0, 423, 0, 270, 0, 271, 272,
	273, 0, 424, 425, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 0, 279, 280, 0, 0, 281,
	282, 0, 0, 283, 0, 284, 0, 0, 285, 286,
	288, 427, 287, 0, 289, 290, 292, 291, 0, 0,
	0, 428, 293, 429, 294, 295, 0, 296, 0, 0,
	297, 298, 0, 0, 299, 430, 0, 300, 0, 431,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 434,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 0, 0,
	331, 332, 333, 435, 334, 0, 567, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 348, 335, 336, 349, 0, 350, 440, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 442,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 444, 445, 446,
	0, 0, 370, 371, 447, 448, 0, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 451, 207, 0, 384, 0,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 0, 0,
	0, 0, 390, 0, 1444, 0, 0, 215, 216, 217,
	391, 392, 393, 394, 218, 395, 396, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 399, 400, 401, 0,
	223, 402, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 0, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 403, 242, 404, 405,
	0, 243, 0, 244, 0, 245, 0, 0, 246, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 409, 410, 411, 0, 256, 0, 257, 0,
	0, 0, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 414, 415, 0, 0, 416,
	269, 0, 266, 0, 0, 267, 417, 268, 418, 419,
	420, 421, 422, 0, 423, 0, 270, 0, 271, 272,
	273, 0, 424, 425, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 0, 279, 280, 0, 0, 281,
	282, 0, 0, 283, 0, 284, 0, 0, 285, 286,
	288, 427, 287, 0, 289, 290, 292, 291, 0, 0,
	0, 428, 293, 429, 294, 295, 0, 296, 0, 0,
	297, 298, 0, 0, 299, 430, 0, 300, 0, 431,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 434,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 0, 0,
	331, 332, 333, 435, 334, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 0, 335, 336, 349, 0, 350, 440, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 442,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 444, 445, 446,
	0, 0, 370, 371, 447, 448, 0, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 451, 207, 0, 384, 0,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 0, 0,
	0, 0, 390, 0, 0, 0, 0, 215, 216, 217,
	391, 392, 393, 394, 218, 395, 396, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 399, 400, 401, 0,
	223, 402, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 0, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 403, 242, 404, 405,
	0, 243, 0, 244, 0, 245, 0, 0, 246, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 409, 410, 411, 0, 256, 0, 257, 0,
	0, 0, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 1435, 415, 0, 0, 416,
	269, 0, 266, 0, 0, 267, 417, 268, 418, 419,
	420, 421, 422, 0, 423, 0, 270, 0, 271, 272,
	273, 0, 424, 425, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 0, 279, 280, 0, 0, 281,
	282, 0, 0, 283, 0, 284, 0, 0, 285, 286,
	288, 427, 287, 0, 289, 290, 292, 291, 0, 0,
	0, 428, 293, 429, 294, 295, 0, 296, 0, 0,
	297, 298, 0, 0, 299, 430, 0, 300, 0, 431,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 434,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 0, 0,
	331, 332, 333, 435, 334, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 348, 335, 336, 349, 0, 350, 440, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 442,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 444, 445, 446,
	0, 0, 370, 371, 447, 448, 0, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 451, 207, 0, 384, 0,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 0, 0,
	0, 0, 390, 0, 0, 0, 0, 215, 216, 217,
	391, 392, 393, 394, 218, 395, 396, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 399, 400, 401, 0,
	223, 402, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 0, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 403, 242, 404, 405,
	0, 243, 0, 244, 0, 245, 0, 0, 246, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 409, 410, 411, 0, 256, 0, 257, 0,
	0, 0, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 414, 415, 0, 0, 416,
	269, 0, 266, 0, 0, 267, 417, 268, 418, 419,
	420, 421, 422, 0, 423, 0, 270, 0, 271, 272,
	273, 0, 424, 425, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 0, 279, 280, 0, 0, 281,
	282, 0, 0, 283, 0, 284, 0, 0, 285, 286,
	288, 427, 287, 0, 289, 290, 292, 291, 0, 0,
	0, 428, 293, 429, 294, 295, 0, 296, 0, 0,
	297, 298, 0, 0, 299, 430, 0, 300, 0, 431,
	301, 302, 303, 304, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 314, 315, 434,
	829, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 0, 0,
	331, 332, 333, 435, 334, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 348, 335, 336, 349, 0, 350, 440, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 442,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 444, 445, 446,
	0, 0, 370, 371, 447, 448, 0, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 451, 207, 0, 384, 0,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 0,
	0, 0, 210, 211, 212, 213, 0, 214, 0, 0,
	0, 0, 390, 0, 0, 0, 0, 215, 216, 217,
	391, 392, 393, 394, 218, 395, 396, 0, 219, 397,
	398, 220, 221, 222, 0, 0, 399, 400, 401, 0,
	223, 402, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 230, 231, 232, 229, 0, 233, 0, 234, 235,
	0, 0, 236, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 460, 241, 403, 242, 404, 405,
	0, 243, 0, 244, 0, 245, 0, 0, 246, 247,
	0, 248, 0, 0, 0, 406, 249, 250, 251, 252,
	253, 407, 408, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 409, 410, 411, 0, 256, 0, 257, 0,
	0, 0, 258, 0, 259, 412, 0, 413, 0, 260,
	261, 262, 263, 264, 265, 414, 415, 0, 0, 416,
	269, 0, 266, 0, 0, 267, 417, 268, 418, 419,
	420, 421, 422, 0, 423, 0, 270, 0, 271, 272,
	273, 0, 424, 425, 0, 0, 274, 275, 276, 0,
	278, 277, 0, 426, 0, 279, 280, 0, 0, 281,
	282, 0, 0, 283, 0, 284, 0, 0, 285, 286,
	288, 427, 287, 0, 289, 290, 292, 291, 0, 0,
	0, 428, 293, 429, 294, 295, 0, 296, 0, 0,
	297, 298, 0, 0, 299, 430, 0, 300, 0, 431,
	301, 302, 303, 0, 305, 306, 307, 0, 308, 432,
	309, 433, 310, 0, 311, 312, 313, 0, 315, 434,
	316, 317, 0, 318, 319, 320, 321, 322, 0, 324,
	325, 323, 326, 327, 328, 329, 0, 330, 0, 0,
	331, 332, 333, 435, 0, 0, 338, 339, 340, 341,
	342, 0, 344, 345, 436, 437, 438, 439, 343, 346,
	347, 0, 348, 335, 336, 349, 0, 350, 440, 441,
	351, 0, 359, 352, 353, 354, 337, 355, 358, 442,
	356, 0, 357, 443, 0, 360, 361, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 0, 444, 445, 446,
	0, 0, 370, 371, 447, 448, 0, 372, 373, 374,
	375, 0, 0, 376, 377, 378, 379, 0, 380, 0,
	449, 381, 382, 383, 450, 451, 0, 0, 384, 0,
	0, 0, 0, 385, 386, 0, 387, 388, 389, 1204,
	1205, 0, 1234, 1235, 1236, 1244, 1245, 1246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1237, 0, 0,
	0, 0, 0, 0, 1207, 0, 0, 1248, 0, 0,
	0, 0, 0, 1204, 1205, 0, 1234, 1235, 1236, 1244,
	1245, 1246, 0, 0, 0, 0, 0, 0, 0, 1206,
	0, 1237, 0, 0, 0, 0, 0, 1226, 1207, 0,
	0, 1248, 0, 0, 1223, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1206, 0, 0, 0, 0, 0, 0,
	0, 1226, 0, 0, 0, 0, 0, 0, 1223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1229, 1230, 1231, 1232, 0, 0, 0,
	0, 0, 1212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1241, 1249, 0, 1229, 1230, 1231,
	1232, 0, 0, 0, 0, 0, 1212, 0, 0, 0,
	0, 0, 0, 0, 1247, 0, 0, 0, 0, 0,
	0, 1221, 1222, 0, 0, 0, 0, 0, 1241, 1249,
	0, 0, 0, 0, 1239, 0, 0, 0, 0, 0,
	0, 1227, 0, 0, 0, 0, 0, 0, 1247, 0,
	0, 0, 0, 0, 0, 1221, 1222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1239, 1238,
	0, 0, 0, 0, 0, 1227, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1238, 0, 1233, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1228, 0, 1204, 1205, 0, 1234, 1235, 1236,
	1244, 1245, 1246, 0, 0, 0, 0, 0, 0, 1233,
	0, 0, 1237, 1242, 0, 0, 0, 0, 0, 1207,
	0, 0, 1248, 0, 0, 0, 1228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1206, 0, 0, 1242, 0, 0,
	0, 0, 1226, 0, 0, 0, 0, 1204, 1205, 1223,
	1234, 1235, 1236, 1244, 1245, 1246, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1237, 0, 0, 0, 0,
	0, 0, 1207, 0, 0, 1248, 1240, 0, 0, 1218,
	1219, 1225, 1224, 1220, 1243, 0, 1217, 1215, 1216, 1208,
	1209, 1210, 1211, 1213, 1214, 0, 0, 1206, 1229, 1230,
	1231, 1232, 0, 2087, 0, 1226, 0, 1212, 0, 0,
	1240, 0, 1223, 1218, 1219, 1225, 1224, 1220, 1243, 0,
	1217, 1215, 1216, 1208, 1209, 1210, 1211, 1213, 1214, 1241,
	1249, 0, 0, 2859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1247,
	0, 0, 0, 0, 0, 0, 1221, 1222, 0, 0,
	0, 1229, 1230, 1231, 1232, 0, 0, 0, 0, 1239,
	1212, 0, 0, 0, 0, 0, 1227, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1241, 1249, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1238, 0, 0, 0, 0, 0,
	0, 0, 1247, 0, 0, 0, 0, 0, 0, 1221,
	1222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1239, 0, 0, 0, 0, 0, 0, 1227,
	1233, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1238, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1204, 1205,
	0, 1234, 1235, 1236, 1244, 1245, 1246, 0, 0, 0,
	0, 0, 0, 1233, 0, 0, 1237, 0, 0, 0,
	0, 0, 0, 1207, 0, 0, 1248, 0, 0, 0,
	1228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1206, 0,
	0, 1242, 0, 0, 0, 0, 1226, 0, 0, 0,
	0, 1240, 0, 1223, 1218, 1219, 1225, 1224, 1220, 1243,
	0, 1217, 1215, 1216, 1208, 1209, 1210, 1211, 1213, 1214,
	0, 0, 0, 0, 2799, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1229, 1230, 1231, 1232, 0, 0, 0, 0,
	0, 1212, 0, 0, 1240, 0, 0, 1218, 1219, 1225,
	1224, 1220, 1243, 0, 1217, 1215, 1216, 1208, 1209, 1210,
	1211, 1213, 1214, 1241, 1249, 0, 0, 2748, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1247, 0, 0, 0, 0, 0, 0,
	1221, 1222, 0, 0, 1204, 1205, 0, 1234, 1235, 1236,
	1244, 1245, 1246, 1239, 0, 0, 0, 0, 0, 0,
	1227, 0, 1237, 0, 0, 0, 0, 0, 0, 1207,
	0, 0, 1248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1238, 0,
	0, 0, 0, 0, 1206, 0, 0, 0, 0, 0,
	0, 0, 1226, 0, 0, 0, 0, 0, 0, 1223,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1233, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1229, 1230,
	1231, 1232, 1242, 0, 0, 0, 0, 1212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1241,
	1249, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1247,
	0, 0, 0, 0, 0, 0, 1221, 1222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1239,
	0, 0, 0, 0, 0, 1240, 1227, 0, 1218, 1219,
	1225, 1224, 1220, 1243, 0, 1217, 1215, 1216, 1208, 1209,
	1210, 1211, 1213, 1214, 0, 0, 0, 0, 2717, 0,
	0, 0, 0, 0, 1238, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1204, 1205, 0, 1234, 1235,
	1236, 1244, 1245, 1246, 0, 0, 0, 0, 0, 0,
	1233, 0, 0, 1237, 0, 0, 0, 0, 0, 0,
	1207, 0, 0, 1248, 0, 0, 0, 1228, 0, 0,
	0, 0, 0, 0, 0, 0, 1204, 1205, 0, 1234,
	1235, 1236, 1244, 1245, 1246, 1206, 0, 0, 1242, 0,
	0, 0, 0, 1226, 1237, 0, 0, 0, 0, 0,
	1223, 1207, 0, 0, 1248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1206, 0, 0, 0,
	0, 0, 0, 0, 1226, 0, 0, 0, 0, 0,
	0, 1223, 0, 0, 0, 0, 0, 0, 0, 1229,
	1230, 1231, 1232, 0, 0, 0, 0, 0, 1212, 0,
	0, 1240, 0, 0, 1218, 1219, 1225, 1224, 1220, 1243,
	0, 1217, 1215, 1216, 1208, 1209, 1210, 1211, 1213, 1214,
	1241, 1249, 0, 0, 2711, 0, 0, 0, 0, 0,
	1229, 1230, 1231, 1232, 0, 0, 0, 0, 0, 1212,
	1247, 0, 0, 0, 0, 0, 0, 1221, 1222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1239, 1241, 1249, 0, 0, 0, 0, 1227, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1247, 0, 0, 0, 0, 0, 0, 1221, 1222,
	0, 0, 0, 0, 0, 1238, 0, 0, 0, 0,
	0, 1239, 0, 0, 0, 0, 0, 0, 1227, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1233, 0, 0, 0, 0, 1238, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1228, 0,
	0, 0, 0, 0, 0, 0, 0, 1204, 1205, 0,
	1234, 1235, 1236, 1244, 1245, 1246, 0, 0, 0, 1242,
	0, 0, 1233, 0, 0, 1237, 0, 0, 0, 0,
	0, 0, 1207, 0, 0, 1248, 0, 0, 0, 1228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1206, 0, 0,
	1242, 0, 0, 0, 0, 1226, 0, 0, 0, 0,
	0, 0, 1223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1240, 0, 0, 1218, 1219, 1225, 1224, 1220,
	1243, 0, 1217, 1215, 1216, 1208, 1209, 1210, 1211, 1213,
	1214, 0, 0, 0, 0, 2705, 0, 0, 0, 0,
	0, 1229, 1230, 1231, 1232, 0, 0, 0, 0, 0,
	1212, 0, 0, 1240, 0, 0, 1218, 1219, 1225, 1224,
	1220, 1243, 0, 1217, 1215, 1216, 1208, 1209, 1210, 1211,
	1213, 1214, 1241, 1249, 0, 0, 2624, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1247, 0, 0, 0, 0, 0, 0, 1221,
	1222, 0, 0, 1204, 1205, 0, 1234, 1235, 1236, 1244,
	1245, 1246, 1239, 0, 0, 0, 0, 0, 0, 1227,
	0, 1237, 0, 0, 0, 0, 0, 0, 1207, 0,
	0, 1248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1238, 0, 0,
	0, 0, 0, 1206, 0, 0, 0, 0, 0, 0,
	0, 1226, 0, 0, 0, 0, 0, 0, 1223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1233, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1229, 1230, 1231,
	1232, 1242, 0, 0, 0, 0, 1212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1241, 1249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1247, 0,
	0, 0, 0, 0, 0, 1221, 1222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1239, 0,
	0, 0, 0, 0, 1240, 1227, 0, 1218, 1219, 1225,
	1224, 1220, 1243, 0, 1217, 1215, 1216, 1208, 1209, 1210,
	1211, 1213, 1214, 0, 0, 0, 0, 2581, 0, 0,
	0, 0, 0, 1238, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1204, 1205, 0, 1234, 1235, 1236,
	1244, 1245, 1246, 0, 0, 0, 0, 0, 0, 1233,
	0, 0, 1237, 0, 0, 0, 0, 0, 0, 1207,
	0, 0, 1248, 0, 0, 0, 1228, 0, 0, 0,
	0, 0, 0, 0, 0, 1204, 1205, 0, 1234, 1235,
	1236, 1244, 1245, 1246, 1206, 0, 0, 1242, 0, 0,
	0, 0, 1226, 1237, 0, 0, 0, 0, 0, 1223,
	1207, 0, 0, 1248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1206, 0, 0, 0, 0,
	0, 0, 0, 1226, 0, 0, 0, 0, 0, 0,
	1223, 0, 0, 0, 0, 0, 0, 0, 1229, 1230,
	1231, 1232, 0, 0, 0, 0, 0, 1212, 0, 0,
	1240, 0, 0, 1218, 1219, 1225, 1224, 1220, 1243, 0,
	1217, 1215, 1216, 1208, 1209, 1210, 1211, 1213, 1214, 1241,
	1249, 0, 0, 2580, 0, 0, 0, 0, 0, 1229,
	1230, 1231, 1232, 0, 0, 0, 0, 0, 1212, 1247,
	0, 0, 0, 0, 0, 0, 1221, 1222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1239,
	1241, 1249, 0, 0, 0, 0, 1227, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1247, 0, 0, 0, 0, 0, 0, 1221, 1222, 0,
	0, 0, 0, 0, 1238, 0, 0, 0, 0, 0,
	1239, 0, 0, 0, 0, 0, 0, 1227, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1233, 0, 0, 0, 0, 1238, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1228, 0, 0,
	0, 0, 0, 0, 0, 0, 1204, 1205, 0, 1234,
	1235, 1236, 1244, 1245, 1246, 0, 0, 0, 1242, 0,
	0, 1233, 0, 0, 1237, 0, 0, 0, 0, 0,
	0, 1207, 0, 0, 1248, 0, 0, 0, 1228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1206, 0, 0, 1242,
	0, 0, 0, 0, 1226, 0, 0, 0, 0, 0,
	0, 1223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1240, 0, 0, 1218, 1219, 1225, 1224, 1220, 1243,
	0, 1217, 1215, 1216, 1208, 1209, 1210, 1211, 1213, 1214,
	0, 0, 0, 0, 2552, 0, 0, 0, 0, 0,
	1229, 1230, 1231, 1232, 0, 0, 0, 0, 0, 1212,
	0, 0, 1240, 0, 0, 1218, 1219, 1225, 1224, 1220,
	1243, 0, 1217, 1215, 1216, 1208, 1209, 1210, 1211, 1213,
	1214, 1241, 1249, 0, 0, 2376, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1247, 0, 0, 0, 0, 0, 0, 1221, 1222,
	0, 0, 1204, 1205, 0, 1234, 1235, 1236, 1244, 1245,
	1246, 1239, 0, 0, 0, 0, 0, 0, 1227, 0,
	1237, 0, 0, 0, 0, 0, 0, 1207, 0, 0,
	1248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1238, 0, 0, 0,
	0, 0, 1206, 0, 0, 0, 0, 0, 0, 0,
	1226, 0, 0, 0, 0, 0, 0, 1223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1229, 1230, 1231, 1232,
	1242, 0, 0, 0, 0, 1212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1241, 1249, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1247, 0, 0,
	0, 0, 0, 0, 1221, 1222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1239, 0, 0,
	0, 0, 0, 1240, 1227, 0, 1218, 1219, 1225, 1224,
	1220, 1243, 0, 1217, 1215, 1216, 1208, 1209, 1210, 1211,
	1213, 1214, 0, 0, 0, 0, 2349, 0, 0, 0,
	0, 0, 1238, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1204, 1205, 0, 1234, 1235, 1236, 1244,
	1245, 1246, 0, 0, 0, 0, 0, 0, 1233, 0,
	0, 1237, 0, 0, 0, 0, 0, 0, 1207, 0,
	0, 1248, 0, 0, 0, 1228, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1206, 0, 0, 1242, 0, 0, 0,
	0, 1226, 0, 0, 0, 0, 1204, 1205, 1223, 1234,
	1235, 1236, 1244, 1245, 1246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1237, 0, 0, 0, 0, 0,
	0, 1207, 0, 0, 1248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1206, 1229, 1230, 1231,
	1232, 0, 0, 0, 1226, 0, 1212, 0, 0, 1240,
	0, 1223, 1218, 1219, 1225, 1224, 1220, 1243, 0, 1217,
	1215, 1216, 1208, 1209, 1210, 1211, 1213, 1214, 1241, 1249,
	0, 0, 1708, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1247, 0,
	0, 0, 0, 0, 0, 1221, 1222, 0, 0, 0,
	1229, 1230, 1231, 1232, 0, 0, 0, 0, 1239, 1212,
	2938, 0, 0, 0, 0, 1227, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1241, 1249, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1238, 0, 0, 0, 0, 0, 0,
	0, 1247, 0, 0, 0, 0, 0, 0, 1221, 1222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1239, 0, 0, 0, 0, 0, 0, 1227, 1233,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1238, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1242, 0, 0,
	0, 0, 0, 0, 2937, 0, 0, 1204, 1205, 0,
	1234, 1235, 1236, 1244, 1245, 1246, 0, 0, 0, 0,
	0, 0, 1233, 0, 0, 1237, 0, 0, 0, 0,
	0, 0, 1207, 0, 0, 1248, 0, 0, 0, 1228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1206, 0, 0,
	1242, 0, 0, 0, 0, 1226, 0, 0, 0, 0,
	1240, 0, 1223, 1218, 1219, 1225, 1224, 1220, 1243, 0,
	1217, 1215, 1216, 1208, 1209, 1210, 1211, 1213, 1214, 0,
	0, 2056, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1229, 1230, 1231, 1232, 0, 0, 0, 0, 0,
	1212, 0, 2137, 1240, 0, 2136, 1218, 1219, 1225, 1224,
	1220, 1243, 0, 1217, 1215, 1216, 1208, 1209, 1210, 1211,
	1213, 1214, 1241, 1249, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1247, 0, 0, 0, 0, 0, 0, 1221,
	1222, 0, 0, 1204, 1205, 0, 1234, 1235, 1236, 1244,
	1245, 1246, 1239, 0, 0, 0, 0, 0, 0, 1227,
	0, 1237, 0, 0, 0, 0, 2029, 0, 1207, 0,
	0, 1248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1238, 0, 0,
	0, 0, 0, 1206, 0, 0, 0, 0, 0, 0,
	0, 1226, 0, 0, 0, 0, 0, 0, 1223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1233, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2030, 0, 0, 0, 0,
	1228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1229, 1230, 1231,
	1232, 1242, 0, 0, 0, 0, 1212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1241, 1249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1247, 0,
	0, 0, 0, 0, 0, 1221, 1222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1239, 0,
	0, 0, 0, 0, 1240, 1227, 0, 1218, 1219, 1225,
	1224, 1220, 1243, 0, 1217, 1215, 1216, 1208, 1209, 1210,
	1211, 1213, 1214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1238, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1808, 0,
	0, 0, 0, 0, 1204, 1205, 0, 1234, 1235, 1236,
	1244, 1245, 1246, 0, 0, 0, 0, 0, 0, 1233,
	0, 0, 1237, 0, 0, 0, 1807, 0, 0, 1207,
	0, 0, 1248, 0, 0, 0, 1228, 0, 1204, 1205,
	0, 1234, 1235, 1236, 1244, 1245, 1246, 0, 0, 0,
	0, 0, 0, 0, 1206, 0, 1237, 1242, 0, 0,
	0, 0, 1226, 1207, 0, 0, 1248, 0, 0, 1223,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1206, 0,
	0, 0, 0, 0, 0, 0, 1226, 0, 0, 0,
	0, 0, 0, 1223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1229, 1230,
	1231, 1232, 0, 0, 0, 0, 0, 1212, 0, 0,
	1240, 0, 0, 1218, 1219, 1225, 1224, 1220, 1243, 0,
	1217, 1215, 1216, 1208, 1209, 1210, 1211, 1213, 1214, 1241,
	1249, 0, 1229, 1230, 1231, 1232, 0, 0, 0, 0,
	0, 1212, 0, 0, 0, 0, 0, 0, 0, 1247,
	0, 0, 0, 0, 0, 0, 1221, 1222, 0, 0,
	0, 0, 0, 1241, 1249, 0, 0, 0, 0, 1239,
	0, 0, 0, 0, 0, 0, 1227, 0, 0, 0,
	0, 0, 0, 1247, 0, 0, 0, 0, 0, 0,
	1221, 1222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1239, 1238, 0, 0, 0, 0, 0,
	1227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1238, 675,
	1233, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1228, 0, 1204,
	1205, 0, 1234, 1235, 1236, 1244, 1245, 1246, 0, 0,
	0, 0, 0, 0, 1233, 0, 0, 1237, 1242, 0,
	0, 0, 0, 0, 1207, 0, 0, 1248, 0, 0,
	0, 1228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1206,
	0, 0, 1242, 0, 0, 0, 0, 1226, 0, 0,
	0, 0, 1204, 1205, 1223, 1234, 1235, 1236, 1244, 1245,
	1246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1237, 0, 0, 0, 0, 0, 0, 1207, 0, 0,
	1248, 1240, 0, 0, 1218, 1219, 1225, 1224, 1220, 1243,
	0, 1217, 1215, 1216, 1208, 1209, 1210, 1211, 1213, 1214,
	0, 0, 1206, 1229, 1230, 1231, 1232, 0, 0, 0,
	1226, 0, 1212, 0, 0, 1240, 0, 1223, 1218, 1219,
	1225, 1224, 1220, 1243, 0, 1217, 1215, 1216, 1208, 1209,
	1210, 1211, 1213, 1214, 1241, 1249, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1247, 0, 0, 0, 0, 0,
	0, 1221, 1222, 0, 0, 0, 1229, 1230, 1231, 1232,
	0, 0, 0, 0, 1239, 1212, 0, 0, 0, 0,
	2146, 1227, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1241, 1249, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1238,
	0, 0, 0, 0, 0, 0, 0, 1247, 0, 0,
	0, 0, 0, 0, 1221, 1222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1239, 0, 0,
	0, 0, 0, 0, 1227, 1233, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1238, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1204, 1205, 0, 1234, 1235, 1236, 1244,
	1245, 1246, 0, 0, 0, 0, 0, 0, 1233, 0,
	0, 1237, 0, 2353, 0, 2141, 0, 0, 1207, 0,
	0, 1248, 0, 0, 0, 1228, 0, 1204, 1205, 0,
	1234, 1235, 1236, 1244, 1245, 1246, 0, 0, 0, 0,
	0, 0, 0, 1206, 0, 1237, 1242, 0, 0, 0,
	0, 1226, 1207, 0, 0, 1248, 1240, 0, 1223, 1218,
	1219, 1225, 1224, 1220, 1243, 0, 1217, 1215, 1216, 1208,
	1209, 1210, 1211, 1213, 1214, 0, 0, 1206, 0, 0,
	0, 0, 0, 0, 0, 1226, 0, 0, 0, 0,
	0, 0, 1223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1229, 1230, 1231,
	1232, 0, 0, 0, 0, 0, 1212, 0, 0, 1240,
	0, 0, 1218, 1219, 1225, 1224, 1220, 1243, 0, 1217,
	1215, 1216, 1208, 1209, 1210, 1211, 1213, 1214, 1241, 1249,
	0, 1229, 1230, 1231, 1232, 0, 0, 0, 0, 0,
	1212, 0, 0, 0, 0, 0, 0, 0, 1247, 0,
	0, 0, 0, 0, 0, 1221, 1222, 0, 0, 0,
	0, 0, 1241, 1249, 0, 0, 0, 0, 1239, 0,
	0, 0, 0, 0, 0, 1227, 0, 0, 0, 0,
	0, 0, 1247, 0, 0, 0, 0, 0, 0, 1221,
	1222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1239, 1238, 0, 0, 0, 0, 0, 1227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1238, 0, 1233,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2103, 0, 0, 0, 1228, 0, 1204, 1205,
	0, 1234, 1235, 1236, 1244, 1245, 1246, 0, 0, 0,
	0, 0, 0, 1233, 0, 0, 1237, 1242, 0, 0,
	2086, 0, 0, 1207, 0, 0, 1248, 0, 0, 0,
	1228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1206, 0,
	0, 1242, 0, 0, 0, 0, 1226, 0, 0, 0,
	0, 1204, 1205, 1223, 1234, 1235, 1236, 1244, 1245, 1246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1237,
	0, 0, 0, 0, 0, 0, 1207, 0, 0, 1248,
	1240, 0, 0, 1218, 1219, 1225, 1224, 1220, 1243, 0,
	1217, 1215, 1216, 1208, 1209, 1210, 1211, 1213, 1214, 0,
	0, 1206, 1229, 1230, 1231, 1232, 0, 0, 0, 1226,
	0, 1212, 0, 0, 1240, 0, 1223, 1218, 1219, 1225,
	1224, 1220, 1243, 0, 1217, 1215, 1216, 1208, 1209, 1210,
	1211, 1213, 1214, 1241, 1249, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1247, 0, 0, 0, 0, 0, 0,
	1221, 1222, 0, 0, 0, 1229, 1230, 1231, 1232, 0,
	0, 0, 0, 1239, 1212, 0, 0, 0, 0, 0,
	1227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1241, 1249, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1238, 0,
	0, 0, 0, 0, 0, 0, 1247, 0, 0, 0,
	0, 0, 0, 1221, 1222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1239, 0, 0, 0,
	0, 0, 0, 1227, 1233, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1238, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1242, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1204, 1205, 0, 1234, 1235, 1236, 1244, 1245,
	1246, 0, 0, 0, 0, 0, 0, 1233, 0, 0,
	1237, 0, 0, 0, 0, 0, 0, 1207, 0, 0,
	1248, 0, 0, 0, 1228, 0, 1204, 1205, 0, 1234,
	1235, 1236, 1244, 1245, 1246, 0, 0, 0, 0, 0,
	0, 0, 1206, 0, 0, 1242, 0, 0, 0, 0,
	1226, 1207, 0, 0, 1248, 1240, 0, 1223, 1218, 1219,
	1225, 1224, 1220, 1243, 0, 1217, 1215, 1216, 1208, 1209,
	1210, 1211, 1213, 1214, 0, 0, 1206, 0, 0, 0,
	0, 0, 0, 0, 1226, 0, 0, 0, 0, 0,
	0, 1223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1229, 1230, 1231, 1232,
	0, 0, 0, 0, 0, 1212, 0, 0, 1240, 0,
	0, 1218, 1219, 1225, 1224, 1220, 1243, 0, 1217, 1215,
	1216, 1208, 1209, 1210, 1211, 1213, 1214, 1241, 1249, 0,
	1229, 1230, 1231, 1232, 0, 0, 0, 0, 0, 1212,
	0, 0, 0, 0, 0, 0, 0, 1247, 0, 0,
	0, 0, 0, 0, 1221, 1222, 0, 0, 0, 0,
	0, 1241, 1249, 0, 0, 0, 0, 1239, 0, 0,
	0, 0, 0, 0, 1227, 0, 0, 0, 0, 0,
	0, 1247, 0, 0, 0, 0, 0, 0, 1221, 1222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1239, 0, 0, 0, 0, 0, 0, 1227, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1233, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1228, 0, 1204, 1205, 0,
	1234, 1235, 1236, 1244, 1245, 1246, 0, 0, 0, 0,
	0, 0, 1233, 0, 0, 0, 1242, 0, 0, 0,
	0, 0, 1207, 0, 0, 1248, 0, 0, 0, 1228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1206, 0, 0,
	1242, 0, 0, 0, 0, 1226, 0, 0, 0, 0,
	0, 0, 1223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1240,
	0, 0, 1218, 1219, 1225, 1224, 1220, 1243, 0, 1217,
	1215, 1216, 1208, 1209, 1210, 1211, 1213, 1214, 0, 0,
	0, 1229, 1230, 1231, 1232, 0, 0, 0, 0, 0,
	1212, 0, 0, 1240, 0, 0, 1218, 1219, 1225, 1224,
	1220, 1243, 0, 1217, 1215, 1216, 1208, 1209, 1210, 1211,
	1213, 1214, 1241, 1249, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1221,
	1222, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 1239, 0, 0, 0, 0, 0, 0, 1227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1503, 1492, 1525, 1480, 1513, 1512,
	0, 0, 1482, 1481, 0, 0, 0, 0, 0, 1527,
	1526, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1233, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1518,
	1228, 1510, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 1508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1242, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 1505, 1506, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1491, 0, 0, 0, 0, 0, 0, 1496,
	1494, 1497, 1498, 1499, 1500, 1501, 0, 1522, 0, 0,
	0, 609, 0, 639, 0, 1523, 1524, 0, 0, 0,
	0, 0, 0, 0, 1240, 0, 0, 1218, 1219, 1225,
	1224, 1220, 1243, 616, 1217, 1215, 1216, 1208, 1209, 1210,
	1211, 1213, 1214, 0, 1484, 614, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1511, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 615, 0, 0,
	0, 0, 617, 1495, 0, 0, 644, 0, 0, 0,
	0, 0, 623, 624, 0, 0, 0, 634, 0, 0,
	0, 0, 1504, 0, 0, 0, 1632, 1630, 1631, 1634,
	1633, 640, 618, 0, 0, 0, 0, 0, 1503, 1492,
	1525, 1480, 1513, 1512, 0, 0, 1482, 1481, 0, 0,
	0, 0, 0, 1527, 1526, 638, 629, 1485, 1486, 1487,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1502, 1489, 0, 0, 0, 0, 0, 0, 0,
	0, 619, 1529, 0, 0, 0, 0, 613, 0, 0,
	0, 0, 0, 1518, 0, 1510, 1509, 1483, 620, 621,
	1519, 1520, 1521, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 627, 0, 0,
	0, 0, 0, 1490, 622, 0, 0, 0, 1528, 1507,
	1505, 1506, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 641,
	0, 0, 0, 0, 0, 0, 1491, 0, 0, 0,
	0, 0, 0, 1496, 1494, 1497, 1498, 1499, 1500, 1501,
	0, 1522, 0, 0, 0, 0, 0, 0, 0, 1523,
	1524, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 625, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 0, 0, 0, 0, 636, 0, 0,
	1511, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 611, 630, 642, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 612, 0, 0, 0, 1504, 0, 0, 0,
	0, 0, 632, 0, 0, 631, 0, 0, 0, 637,
	0, 0, 0, 0, 643, 0, 0, 0, 0, 0,
	633, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1485, 1486, 1487, 1488, 635, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 1489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1529, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 1519, 1520, 1521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	0, 0, 1528,
}
var sqlPact = [...]int{

	520, -1000, 9, -1000, -1000, -1000, 279, -1000, -1000, -1000,
	-1000, 278, 271, 270, -1000, 269, 265, 261, 260, 257,
	248, 244, 231, 229, 227, 226, -1000, -1000, 224, -1000,
	-1000, -1000, -1000, 223, 222, 220, -1000, 216, 1501, 27903,
	215, 203, 1509, 44922, 1506, 201, 200, -1000, 195, 1237,
	32964, 1111, 1769, -1000, 192, 181, 1542, 44562, 4501, 30789,
	1320, 1884, 44199, 27540, 1879, 30426, 43836, -1000, -1000, 1047,
	-1000, -1000, 43473, 180, 178, 175, 172, 170, -1000, -1000,
	43110, 169, 165, 163, 162, 160, 159, 157, 149, 147,
	145, 141, 134, 127, 121, 119, 118, 112, 111, 110,
	-1000, 108, 105, 103, -1000, 53079, 102, 101, 91, -1000,
	1317, 85, 83, 81, 78, 77, -1000, -1000, 75, 71,
	61, 60, 59, 54, 128, 53, 49, 48, 47, 46,
	-1000, 1328, 564, 1868, 11922, 1248, 1231, 1224, 1212, 1238,
	788, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 47442,
	44922, 45, -15, 44, -1000, 2277, 832, 21649, 520, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	32601, 32238, 31875, 26457, 42747, 42384, 9190, 9190, 959, -1000,
	7, 29343, 44922, -1000, -1000, 304, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 17883, 17481, 445, -1000, 302,
	-1000, 1255, -1000, -1000, -1000, -1000, 42021, 41658, 41295, 26082,
	25707, 40932, 1759, 1739, 40569, -1000, -1000, 40206, -1000, -1000,
	2227, 1918, 1885, 31512, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 39846, 39483, 39120, 38757, 38394, 25332, 24957,
	609, -1000, -1000, -1000, -1000, 22379, -1000, -1000, -1000, -1000,
	-1000, 43, -1000, 42, 36, -1000, 35, 34, 33, 29,
	28, 25, 23, 22, -1000, 20, 17, -1000, 16, 14,
	-1000, 13, 12, 1354, 1388, 1356, 38031, 1031, 1500, 37,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 44922, -1000, 18271,
	-1000, 608, -1000, 1949, -1000, 18271, -1000, 1496, 197, 1429,
	-1000, -1000, -1000, 1313, 1059, -1000, -1000, 44922, -1000, -1000,
	-1000, -1000, -1000, -1000, 2479, 1346, 600, 37668, -1000, 1727,
	-1000, 747, 896, -1000, -1000, 299, 12698, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1669, 2148, 2422, 24582, 1530, 2317, 2161, 2472, 1663,
	2119, 2086, 2080, 2075, 2063, 2470, 1088, 2468, 1051, 869,
	2467, 2000, 2457, 1380, 864, 2466, 2465, 1948, 1947, -1000,
	-1000, -1000, -1000, 1102, -1000, -1000, -1000, -1000, 34404, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1328, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1611, 2274, 2274, 2274, 2352, 431, 424, -1000, 128,
	-1000, 1375, -1000, 1340, -1000, -1000, -1000, 52201, -1000, -1000,
	18271, 18271, 18271, 18271, 18271, 1318, -1000, -1000, -1000, 633,
	-1000, 599, 598, 10355, -1000, -1000, 2420, -1000, -1000, -1000,
	443, -1000, -1000, 18271, -1000, 297, -1000, -1000, -1000, -1000,
	595, 2456, -1000, 748, -1000, -1000, -1000, 764, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1972,
	560, 558, 555, -1000, 554, -1000, -1000, 594, 590, 589,
	588, 587, 586, -1000, 1193, -1000, 790, -1000, -1000, 790,
	790, -1000, 541, 541, 585, 583, 544, -1000, -1000, 582,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 581, 541,
	576, 575, -1000, -1000, -1000, 573, 753, 722, -1000, 572,
	571, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 566, 1514, -1000, -1000, 1514, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 955, 46362, -1000, -1000, -1000, 2, 44922,
	-1000, 445, 2, -1000, -1000, 565, -1000, 13086, 13086, 13086,
	-1000, -1000, 1494, 18271, -1000, 1897, -1000, 3169, -155, 563,
	659, 659, -1000, 20554, 640, 24207, -1000, 560, 558, 555,
	554, 290, -1000, -1000, -1000, -1000, -1000, 1714, 2163, 928,
	-1000, 1133, 2155, -1000, 2586, 2153, 1125, -1000, -1000, 772,
	2129, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1258, -1000, -1000, 1418, 2128, -130, 2004, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1538, -1000, 26817,
	29343, 7, -62, -1000, 8817, 52201, -1000, 52201, -1000, 1946,
	44922, 9190, 44922, 44922, -1000, 553, 1599, 1492, -1000, -1000,
	2586, 1593, -1000, -1000, 769, 1590, -1000, -1000, 1588, -1000,
	445, -1000, -1000, 37305, 47082, 769, 1587, -1000, -1000, -1000,
	34404, -1000, 44922, -1000, 44922, -1000, 1040, -1000, 46722, 148,
	2123, -1000, -1000, 148, 2113, -1000, 148, 2112, -1000, 137,
	2102, -1000, -1000, 1417, 2093, -1000, -77, 2092, -1000, -1000,
	-77, 2074, -1000, -1000, 18271, -14, -1000, -1000, -1000, 832,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 36942, 28623, 44922,
	31149, 751, 52201, 2383, 53139, 26817, 52201, 28623, 44922, 1969,
	-1000, 36579, 36216, 2302, 745, -1000, -1000, 44922, -1000, 18271,
	-1000, 2380, 1432, -10, -1000, -1000, -1000, -1000, -1000, 1643,
	1729, 907, 1158, 12698, 12698, 2208, 289, 9190, -1000, -1000,
	-1000, 1002, -1000, -1000, -1000, -1000, -1000, 35853, -1000, -1000,
	-1000, 1337, 44922, -1000, -1000, 27177, 1960, -1000, 44922, -1000,
	44922, -1000, 44922, -1000, 44922, -1000, 44922, -1000, -1000, -1000,
	-1000, -1000, 2097, 1230, 1967, -1000, 44922, -1000, -1000, -1000,
	1636, -1000, -1000, -1000, 35493, 35130, 34767, -1000, -1000, 1154,
	1001, -1000, -1000, 154, -1000, -1000, 1611, -1000, 1503, 1700,
	17079, 1705, 18271, 128, -1000, -1000, 128, 128, 11520, -1000,
	-1000, -1000, 44922, -1000, 52905, 53139, 9190, 975, 18271, 18271,
	18271, 18271, 18271, 18271, 18271, 18271, 18271, 18271, 18271, 18271,
	18271, 18271, 18271, 18271, 18271, 18271, 18271, 18271, 18271, 18271,
	18271, 18271, 18271, 18271, 18271, 18271, 18271, 18271, 18271, 18271,
	1536, 18271, 954, 18271, 18271, 18271, 18271, 1078, 1332, 476,
	1453, -1000, 2412, 2412, 2412, 52476, 52476, 547, 633, -1000,
	18271, -1000, 139, 18271, 424, 50322, 6, 9967, -1000, -1000,
	-1000, -1000, 16677, 785, 52201, 8444, 9565, -1000, 2438, 1188,
	1936, 1831, 551, 697, 693, 684, 577, 18271, 18271, 18271,
	18271, 18271, 18271, -1000, 549, -1000, -1000, -1000, -1000, 2420,
	-1000, 16289, 15887, -1000, 2435, 15485, 15083, -1000, 14681, 19435,
	14279, 967, 966, 964, 18271, 10743, 2420, -1000, -10, -1000,
	46362, -1000, 44922, 2, 2375, 18271, 177, -1000, 51284, -1000,
	177, 177, 546, -16, 52201, 1694, 1690, 22014, 1575, 1327,
	1327, 1327, -1000, 545, 621, 659, 6560, 13877, 33324, 1364,
	33324, 311, 422, 20189, 1897, -1000, -1000, 44922, 9190, -6,
	1200, -1000, 30063, 2267, 2252, 2236, -1000, 2351, 34404, 2365,
	139, 2289, 1943, 953, 34404, 2586, -1000, 53139, -1000, 1735,
	2350, 1048, 1046, 1048, 1048, 1033, 34404, 952, 1289, 26817,
	2288, 951, -7, 2364, 139, 2286, 1935, 946, -1000, -1000,
	44922, 9190, 2278, 1000, 687, -1000, 44922, 284, -1000, 1017,
	-19, 281, 1699, 1672, 38, -1000, 29703, 2374, 2072, 44922,
	-1000, 2586, 2069, -1000, 1288, -1000, 2066, 2062, 2373, 1491,
	1586, -1000, -1000, -1000, 1481, 1582, 917, 2059, 777, 471,
	2372, 471, 23109, -1000, 44922, -1000, 44922, -1000, -1000, 44922,
	-1000, 44922, -1000, 44922, -1000, 44922, 44922, -1000, 44922, 26817,
	26817, 26817, -22, 4516, 28983, 942, -25, -1000, 821, 29703,
	4577, -28, -1000, 987, -1000, -1000, -1000, -1000, 285, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 544, 1193, 541,
	541, 541, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 753,
	722, -1000, -1000, -1000, -1000, 790, 790, 790, -1000, -1000,
	72, 1929, -62, 31149, 687, -1000, 687, -1000, 1966, -1000,
	2275, 700, -30, 865, -10, -1000, 1514, -1000, 1344, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2455, -1000, 2424, -1000, -1000, 2432, 1, -1000,
	1, -1000, 9190, -1000, 44922, -1000, -1000, -1000, -1000, -1000,
	44922, -1000, -1000, 44922, -1000, -1000, -1000, -1000, -1000, 658,
	-1000, 1962, -1000, 4516, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 44922, 44922, 44922, -1000, 34404, -1000, -1000, -1000,
	-1000, 52201, -1000, 436, -1000, -1000, 52201, 1128, 1704, -1000,
	1704, 0, -1000, 51043, 1671, 44922, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 743, 721,
	721, 957, 957, 957, 957, 2366, 250, 263, 198, 5263,
	5263, 5263, 5263, 5263, 5263, 5263, 5263, 219, 515, 515,
	219, 219, 219, 219, 219, 5263, 5263, 5263, 52476, 52442,
	3621, 18271, 18271, 937, 1302, 476, 3621, 18271, 3621, 3621,
	3621, 3621, -1000, 1448, -1000, -1000, -1000, -1000, 1924, 540,
	19435, 19435, -1000, -1000, -1000, 10355, 18271, -1000, -1000, -1000,
	-1000, 538, 18271, -1000, 50563, -227, 421, -176, -1000, 18271,
	618, -31, -1000, 1060, -1000, 18271, 251, -1000, -1000, 3,
	18271, 18271, 18271, 415, -1000, 412, -1000, 933, -1000, 931,
	930, 920, -1000, 534, 1325, 533, 531, 18271, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 52138, 48169, 5964, 5901,
	5055, -35, 2420, -38, 411, -1000, 1917, -176, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 407, -1000, 406, -44, -1000,
	-45, -1000, 405, -1000, 51897, -176, 402, 5997, -1000, 19435,
	19435, 19435, 10355, 528, 400, -1000, 50867, -1000, 742, 735,
	731, 51863, 13475, 13475, 13475, 398, 51622, 18271, -176, 392,
	-1000, -1000, 526, -46, 777, 13086, 21284, 9190, -1000, 777,
	777, 18271, -1000, 18271, 22014, 22014, 2141, 1679, 22014, -1000,
	-1000, -1000, -1000, 33324, 535, 659, 33324, -1000, 2420, 1702,
	-1000, 387, -1000, -1000, -1000, 44922, 445, -1000, -1000, 659,
	386, 199, 1260, 44922, 44922, 44922, -1000, -1000, 1573, 46002,
	1572, 53139, 44922, -1000, -1000, 524, 522, 1668, 1665, 44922,
	44922, 45642, 45282, 44922, 1478, 1546, 139, -1000, 730, 521,
	44922, 1118, -1000, -1000, -1000, -1000, -1000, 44922, -1000, -1000,
	2431, -1000, 1048, -1000, -1000, -1000, 1048, 2586, 1095, 44922,
	26817, 771, 725, 44922, 1261, 139, -1000, 719, 514, 9190,
	1259, -1000, 711, 44922, 1796, -1000, 1522, -1000, 8071, -1000,
	-1000, 9190, 1767, 1767, 9190, 385, -1, -1000, -1000, -1000,
	-1000, -1000, -1000, 1736, 44922, 574, 44922, 139, 44922, 156,
	44922, 26817, 26817, 26817, 139, 44922, 2057, 44922, 2055, 2090,
	670, 44922, 1347, 18271, 1157, -1000, 22744, 808, 44922, 1094,
	140, -1000, -1000, -1000, 31, 44922, -1000, -1000, 148, 148,
	148, -1000, 137, 1417, -1000, -77, -77, -1000, -1000, -1000,
	44922, 2395, 26817, -47, -1000, 826, 910, 909, -1000, 53139,
	-1000, 630, 908, -1000, 2429, -1000, 687, 34044, 44922, 130,
	-1000, 770, 1336, -1000, 12698, 12698, -1000, 1514, -1000, -1000,
	1135, -1000, 1148, -1000, -1000, -1000, -1000, 12698, -1000, -1000,
	1960, -62, -62, -1000, -1000, 404, -1000, -1000, -1000, -1000,
	-1000, 1128, -1000, 18271, -1000, -1000, -1000, 11520, -1000, -1000,
	-1000, 44922, -146, 18271, 3621, 3621, 18271, 19435, 19435, -1000,
	3621, -1000, -1000, -1000, -1000, -1000, 1903, 512, 18271, 53139,
	5829, 5472, -68, 219, 18271, -2, -1000, 18271, -1000, 50146,
	-1000, -1000, 626, 2078, -1000, 18271, 51559, 7698, 384, 12310,
	-1000, 51318, -27, -27, -1000, 2447, 1609, 1208, 1209, 1067,
	2428, -1000, 23842, 780, 1347, 49905, 52905, 53139, 18271, 18271,
	18271, -1000, 383, -1000, 2420, -1000, 18271, -1000, -1000, -1000,
	-1000, -1000, 1899, 18271, -1000, 52905, 53139, 19435, 19435, 19435,
	19435, 19435, 19435, 19435, 19435, 19435, 19435, 19435, 19435, 19435,
	19435, 19435, 19435, 19435, 19435, 19435, 1661, 19435, 2410, 2410,
	2410, -5, 18271, -1000, 1959, 1899, 18271, 18271, -1000, -1000,
	-1000, 53139, 380, 379, 378, -1000, 18271, -176, -1000, 4577,
	-1000, 1823, -1000, -66, -1000, 1897, -1000, -1000, 1823, 1823,
	-70, 52201, -1000, 2141, -1000, 505, 18271, 22014, -1000, 617,
	-1000, -71, -1000, 33324, -1000, 616, -218, -1000, 683, -1000,
	659, 445, -1000, 33324, -1000, 9190, -1000, -1000, 915, 914,
	-1000, 2046, -1000, 1570, -1000, 812, -1000, 1179, 18271, 20919,
	504, 501, 1236, -1000, 2039, 1417, 2038, 1417, -1000, 500,
	496, -1000, -6, 1182, -1000, 23482, 18271, -1000, 913, -1000,
	-1000, -1000, 2586, 911, -1000, -1000, 1242, 23482, -1000, -1000,
	-1000, 23482, 18271, -1000, -7, 905, 23482, 2001, 766, 1890,
	1007, -1000, -1000, -1000, -1000, -1000, -1000, 138, 1730, 29703,
	44922, 495, 44922, 493, -1000, -1000, 492, 44922, 2586, -1000,
	769, -1000, -1000, 488, 9190, 487, 9190, 1652, 670, 28263,
	-1000, 769, 1700, 52201, -1000, 1094, 11131, 2255, -78, -1000,
	129, -1000, -1000, -1000, 777, 23109, 22014, 18271, 2462, -79,
	-1000, -1000, -1000, -1000, -1000, -62, 1423, 2220, 2220, -1000,
	2427, -1000, 615, 377, 766, -9, 486, -1000, 682, 674,
	-62, 44922, -1000, 1372, 9190, 44922, 44922, 9190, 44922, -1000,
	-1000, -10, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1387,
	49864, -1000, 2245, 9190, 2381, 3621, 4825, 4282, 18271, 53139,
	52717, -80, 18271, 18271, -1000, 375, 18271, 611, 52201, -1000,
	-1000, -1000, 52201, 18271, 73, -1000, 2446, 18271, 371, 368,
	367, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 364,
	-1000, -1000, 47802, -1000, 18271, 362, -1000, 361, 359, 333,
	49623, 49447, -1000, 358, 52201, 1959, 52201, -1000, -1000, 677,
	677, 1011, 1011, 1011, 1011, 2410, 827, 655, 1386, 686,
	686, 686, 353, 668, 668, 686, 686, 686, 1881, 1637,
	485, 5229, 18271, 355, -1000, -1000, 52201, 52201, 352, -1000,
	-1000, -1000, -176, 349, 1815, 2342, -1000, 22014, 1815, 1815,
	-1000, -1000, 44922, 52201, -1000, -155, -1000, 2420, -1000, -1000,
	1702, -1000, 6947, 33324, -1000, -1000, 32, 44922, 44922, 44922,
	2030, -1000, 2962, -1000, 49206, -86, -1000, 2308, 2308, 18271,
	38, -1000, -1000, 484, 20919, 44922, -1000, 1692, 1703, 856,
	44922, -1000, 44922, -1000, 44922, 44922, 44922, 44922, 44922, -1000,
	482, 38, -95, 44922, 44922, 26817, -1000, -1000, -97, 9190,
	-1000, 2260, -1000, 26817, 963, 9190, 1261, 1772, -1000, 481,
	20919, 480, 44922, 29703, 2371, -1000, -1000, -1000, 20919, 1476,
	20919, 1474, 1655, 670, 28263, -1000, 917, 1094, -1000, -1000,
	-12, -1000, 513, 139, 44922, 2461, 1347, -1000, -13, 52201,
	-1000, 672, -1000, 2194, -1000, 2190, 578, -1000, -1000, -1000,
	33684, 33684, 26817, 26817, -62, 1576, -1000, -1000, 1299, 1516,
	-1000, -1000, -1000, -1000, 2245, 18271, 18271, 52717, -98, -1000,
	3621, 3621, -1000, 49165, -1000, 52201, 7325, -1000, 51318, -1000,
	-1000, -1000, -1000, 1301, -1000, 48924, -1000, -1000, -1000, 18271,
	-1000, -1000, -1000, -1000, 19435, 1852, 479, 53139, 48748, -1000,
	-1000, -1000, 775, 18271, 18271, 1897, 775, 775, -103, 659,
	-1000, -1000, -1000, 2420, -1000, 9190, -1000, -1000, -1000, 44922,
	-1000, 44922, -1000, 9190, 44922, 1926, 1555, -1000, -1000, 1664,
	478, 19435, 44922, 19435, -1000, 1277, 20919, 2245, 9190, 2245,
	48507, 9565, -104, -105, 1551, -1000, 1550, 18271, -1000, 53139,
	1417, 1417, -111, -114, -1000, 904, 892, 18271, 889, -1000,
	-1000, -1000, 873, -1000, 709, -77, 23482, 32, -1000, -1000,
	1300, 20919, -116, 20919, -117, 338, 139, -124, 44922, -133,
	44922, -1000, 670, 28263, -1000, 2090, -1000, 2156, 44922, 2229,
	-1000, -1000, -1000, 1700, 476, 474, 473, -1000, -1000, -134,
	-1000, -1000, -92, -1000, 733, 727, -1000, -1000, -1000, 9190,
	999, -1000, 3621, 3621, -1000, -1000, -1000, -1000, 335, 1347,
	2338, -1000, 48444, 4373, 19435, 53139, -135, -1000, -1000, 44922,
	52201, -176, -1000, -1000, -1000, 33324, 516, -1000, 2177, -1000,
	-1000, -1000, 44922, 1568, -1000, -1000, 18271, 5229, 470, 803,
	1730, 469, -1000, -1000, -1000, -1000, -1000, -1000, 2308, 3,
	-1000, 1110, -1000, -1000, 52201, 2303, -1000, -1000, 468, 467,
	44922, 44922, -27, 462, 459, 23482, -1000, 44922, -148, 1277,
	-151, -1000, 1730, -1000, 1277, 456, -1000, 452, 28263, -1000,
	1652, 983, -153, 44922, 1094, -1000, 26817, 26817, -1000, 1576,
	-1000, 44922, -1000, 44922, -1000, 44922, -1000, 1116, 18271, -1000,
	4373, -156, -1000, -100, -1000, 2370, -1000, -1000, -1000, -1000,
	2018, 48203, 1619, 44922, -1000, 1261, 44922, 2245, 334, 44922,
	817, 9190, 1299, 1299, -1000, -1000, 330, 18271, 18271, -1000,
	451, -1000, 1730, 1277, 1261, 1730, 20919, 20919, -1000, 1655,
	1038, -1000, 777, -1000, -1000, -158, -159, -1000, -161, -164,
	-1000, 319, 19047, 19047, -176, -1000, 44922, 449, 1993, -1000,
	1450, 1377, 312, -1000, -169, -1000, -1000, 445, -1000, 18271,
	-1000, -177, -1000, 797, -178, -1000, 796, 2446, -179, -180,
	44922, 1261, 1730, -1000, 1261, -185, -186, -1000, 23109, -1000,
	766, 766, -1000, -1000, -1000, -1000, -1000, 19808, 1298, 1079,
	50626, -1000, -1000, -1000, 44922, -1000, 1471, 1470, 1103, -1000,
	-1000, -1000, -1000, -1000, 1619, 52201, -1000, 1299, 1768, -1000,
	1299, 1849, -1000, -1000, -187, -1000, 1261, 815, 1277, -1000,
	-167, -1000, -1000, 2388, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2173, -1000, 836, 1539, 1539, 1450, -1000, 444, -1000,
	440, 1390, -1000, -1000, 1840, 1730, -1000, 18659, -1000, 2398,
	-1000, -1000, 1666, -1000, -1000, 18271, 18271, -1000, -1000, -1000,
	-1000, 1261, -1000, -1000, -1000, -1000, -188, -193, 815, 1261,
	867, -1000, -1000, 437, 18271, -194, 1261, -1000,
}
var sqlPgo = [...]int{

	0, 2957, 2954, 1885, 2953, 2296, 2950, 2949, 2948, 2947,
	2946, 2287, 2945, 2943, 2941, 2940, 2939, 2936, 2935, 2928,
	2926, 2925, 2921, 2917, 2916, 2911, 2910, 2903, 2902, 2901,
	2900, 2899, 2271, 2895, 2244, 2894, 2892, 2884, 2883, 2882,
	2880, 2877, 29, 2873, 2871, 2870, 2869, 2239, 2867, 2865,
	2221, 2864, 2862, 2210, 2860, 2859, 2197, 2195, 2858, 2855,
	2177, 2853, 2851, 2161, 2849, 2157, 2847, 2846, 2155, 2845,
	87, 118, 2153, 2844, 2843, 2144, 2139, 2135, 2841, 2126,
	2838, 2835, 2124, 2011, 2834, 103, 2833, 2829, 2827, 2825,
	2007, 2000, 2823, 2810, 2809, 172, 2808, 1977, 2807, 2805,
	2804, 2803, 2800, 2797, 2795, 2793, 2786, 2785, 2781, 2774,
	2773, 2769, 2767, 2766, 2765, 2760, 2757, 2755, 2752, 2751,
	2750, 2747, 182, 115, 2746, 2745, 1945, 1921, 2742, 2740,
	46, 54, 23, 62, 158, 183, 3894, 167, 2739, 2736,
	2729, 2727, 2719, 2716, 36, 120, 132, 119, 117, 2714,
	83, 2713, 2709, 65, 31, 25, 21, 80, 2705, 2703,
	2699, 1555, 99, 2697, 2696, 170, 154, 2694, 956, 28,
	78, 91, 84, 124, 48, 2690, 98, 15, 2688, 121,
	90, 2687, 55, 35, 26, 3082, 135, 52, 126, 178,
	127, 876, 2685, 175, 68, 141, 2684, 2682, 2678, 53,
	139, 3, 5, 174, 13, 2677, 11, 2675, 10, 2673,
	2670, 2668, 2667, 20, 116, 106, 39, 2665, 151, 74,
	2661, 134, 2656, 159, 2651, 75, 1833, 173, 2, 105,
	2641, 77, 19, 69, 2639, 2638, 96, 157, 2637, 47,
	125, 85, 82, 185, 147, 88, 153, 163, 2636, 2633,
	2632, 171, 2630, 137, 114, 2625, 2624, 107, 1, 2622,
	33, 164, 34, 2621, 2617, 110, 2613, 144, 2607, 2603,
	180, 112, 133, 8, 49, 92, 7, 149, 108, 57,
	56, 2601, 2912, 1583, 1740, 32, 2600, 97, 72, 30,
	71, 101, 165, 43, 2599, 2598, 155, 2593, 2592, 2589,
	2585, 2583, 128, 2578, 2576, 2575, 89, 38, 42, 2564,
	109, 45, 143, 156, 148, 177, 129, 2561, 113, 100,
	146, 2555, 41, 2554, 2553, 2457, 138, 2551, 2548, 2545,
	2455, 2249, 1937, 140, 1248, 2538, 2537, 1241, 1011, 2535,
	2533, 102, 2532, 136, 131, 123, 76, 122, 162, 169,
	423, 2531, 145, 37, 2530, 61, 24, 0, 3452, 3059,
	2529, 142, 86, 2528, 2526, 2522, 2521, 27, 12, 4,
	6, 16, 14, 317, 59, 95, 2520, 2519, 79, 93,
	2516, 176, 150, 2513, 2512, 2511, 50, 2510, 22, 2509,
	17, 2508, 2506, 18, 9, 2505, 2502, 168, 2495, 111,
	2348, 2492, 2489, 2003, 2488, 2483, 70, 130,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 6, 8, 8,
	9, 9, 9, 31, 31, 11, 11, 10, 10, 10,
	12, 7, 7, 7, 7, 7, 7, 7, 14, 14,
	23, 23, 15, 25, 18, 27, 13, 21, 19, 19,
	28, 17, 17, 24, 24, 146, 146, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 148, 148, 147, 143, 143, 150, 150,
	150, 152, 152, 149, 149, 142, 142, 32, 32, 83,
	83, 83, 133, 76, 76, 76, 355, 355, 356, 356,
	129, 129, 130, 130, 130, 130, 131, 131, 132, 132,
	132, 45, 34, 34, 34, 34, 34, 35, 35, 36,
	36, 43, 43, 123, 123, 46, 46, 46, 46, 46,
	46, 46, 46, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 56, 56, 57, 57,
	58, 58, 58, 58, 58, 58, 59, 59, 59, 59,
	59, 59, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 66, 66, 66, 67, 67, 67, 64, 64,
	64, 62, 62, 62, 61, 61, 61, 65, 65, 65,
	63, 63, 63, 227, 227, 68, 68, 68, 68, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 71, 71, 71, 71, 71,
	71, 71, 71, 321, 321, 69, 69, 294, 294, 72,
	72, 252, 252, 73, 73, 73, 73, 73, 74, 74,
	74, 74, 84, 84, 84, 84, 397, 397, 397, 400,
	400, 221, 221, 165, 165, 165, 165, 79, 79, 79,
	79, 80, 80, 80, 81, 81, 128, 128, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 37, 37, 37,
	38, 38, 39, 39, 40, 40, 41, 41, 42, 42,
	42, 42, 42, 91, 91, 91, 93, 90, 90, 90,
	92, 92, 92, 92, 94, 94, 95, 95, 95, 95,
	95, 96, 96, 349, 349, 230, 230, 347, 347, 348,
	348, 197, 197, 197, 197, 197, 198, 198, 198, 354,
	354, 354, 354, 354, 354, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 112, 112, 112, 122, 122, 122, 122, 122,
	122, 122, 114, 114, 107, 107, 98, 98, 104, 104,
	104, 104, 104, 99, 99, 105, 105, 106, 106, 106,
	108, 108, 108, 108, 108, 108, 100, 100, 100, 100,
	110, 110, 110, 110, 109, 109, 118, 118, 118, 118,
	118, 118, 118, 309, 309, 113, 113, 113, 113, 116,
	116, 116, 115, 115, 119, 119, 119, 119, 101, 101,
	102, 102, 103, 103, 120, 120, 111, 111, 121, 121,
	121, 121, 121, 121, 121, 117, 117, 117, 398, 398,
	399, 399, 77, 77, 51, 51, 52, 52, 199, 199,
	200, 200, 275, 275, 275, 275, 201, 201, 151, 151,
	151, 204, 205, 205, 202, 202, 203, 203, 203, 207,
	207, 206, 209, 209, 208, 274, 365, 365, 366, 366,
	366, 366, 366, 366, 366, 367, 367, 367, 367, 367,
	367, 367, 367, 363, 363, 363, 364, 361, 361, 362,
	362, 362, 362, 401, 401, 273, 273, 213, 213, 368,
	368, 368, 368, 369, 369, 369, 369, 369, 372, 371,
	370, 370, 370, 370, 370, 305, 305, 305, 55, 55,
	55, 241, 241, 240, 240, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 125, 125,
	53, 53, 53, 157, 157, 50, 50, 50, 54, 54,
	49, 49, 49, 49, 49, 258, 258, 256, 256, 218,
	218, 311, 311, 311, 169, 169, 144, 144, 144, 20,
	22, 22, 16, 16, 16, 16, 16, 16, 29, 29,
	30, 30, 26, 26, 257, 257, 259, 259, 78, 78,
	82, 82, 88, 88, 124, 124, 124, 124, 124, 124,
	124, 33, 33, 33, 33, 44, 44, 44, 44, 86,
	404, 404, 404, 87, 87, 403, 403, 164, 164, 164,
	164, 166, 166, 270, 270, 271, 271, 405, 405, 272,
	272, 272, 159, 158, 160, 160, 48, 48, 48, 153,
	153, 154, 154, 155, 155, 156, 156, 406, 406, 75,
	75, 75, 127, 127, 193, 193, 267, 267, 267, 214,
	214, 174, 174, 269, 269, 268, 268, 268, 239, 239,
	239, 126, 126, 224, 224, 232, 232, 233, 233, 317,
	317, 234, 85, 85, 136, 136, 134, 134, 134, 134,
	134, 134, 135, 135, 135, 137, 137, 137, 137, 137,
	137, 137, 140, 140, 140, 140, 141, 141, 141, 139,
	139, 379, 379, 379, 381, 381, 382, 378, 378, 380,
	380, 402, 402, 243, 243, 243, 211, 212, 210, 210,
	216, 216, 215, 217, 217, 310, 310, 310, 237, 237,
	237, 237, 262, 262, 260, 260, 261, 261, 263, 263,
	264, 264, 264, 265, 265, 266, 266, 236, 236, 290,
	290, 138, 138, 138, 223, 223, 223, 225, 225, 280,
	280, 280, 281, 281, 279, 279, 279, 279, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 395, 395, 395,
	396, 396, 308, 308, 313, 313, 313, 313, 313, 313,
	306, 306, 307, 307, 318, 319, 319, 246, 246, 246,
	246, 244, 244, 245, 245, 314, 314, 314, 314, 238,
	238, 315, 315, 315, 276, 276, 322, 322, 322, 341,
	341, 222, 222, 222, 334, 334, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 324,
	324, 324, 324, 324, 326, 326, 326, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 340, 340, 340, 340, 340,
	327, 327, 335, 335, 336, 336, 337, 338, 328, 328,
	329, 329, 330, 331, 339, 339, 339, 339, 343, 343,
	332, 332, 332, 332, 332, 332, 332, 333, 253, 253,
	253, 253, 253, 253, 253, 253, 253, 253, 253, 253,
	253, 253, 254, 254, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 284,
	284, 284, 284, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 373, 373, 373, 373, 373, 373,
	373, 373, 376, 376, 377, 377, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 383, 383, 384,
	384, 386, 386, 387, 387, 388, 389, 389, 389, 390,
	391, 391, 385, 385, 392, 392, 392, 393, 393, 394,
	394, 394, 394, 394, 296, 296, 297, 298, 304, 304,
	304, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 167, 167, 167,
	167, 167, 229, 229, 228, 228, 293, 293, 291, 291,
	295, 295, 247, 247, 342, 342, 342, 342, 342, 342,
	342, 248, 248, 248, 255, 249, 249, 250, 250, 250,
	250, 250, 287, 288, 251, 251, 251, 289, 289, 299,
	303, 303, 302, 301, 301, 300, 300, 277, 277, 278,
	278, 235, 235, 407, 407, 231, 231, 316, 316, 316,
	316, 195, 195, 226, 226, 194, 194, 189, 189, 189,
	189, 219, 219, 220, 220, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 344, 344, 344, 345,
	346, 292, 184, 183, 171, 172, 182, 181, 180, 170,
	173, 177, 178, 179, 175, 176, 187, 186, 185, 320,
	190, 190, 191, 191, 191, 192, 192, 192, 192, 168,
	168, 188, 188, 188, 161, 161, 161, 162, 162, 163,
	163, 353, 353, 351, 351, 351, 352, 352, 352, 352,
	350, 350, 350, 350, 350, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 0, 1, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 1, 3, 4, 6, 1, 3, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 6, 5, 5, 7, 7, 7, 10,
	7, 4, 12, 4, 12, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 1, 1, 3, 1, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 2, 5,
	7, 2, 1, 12, 12, 2, 1, 1, 1, 3,
	3, 0, 3, 1, 3, 1, 1, 3, 2, 5,
	0, 5, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 6, 6, 1, 1, 1, 2, 1, 2, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 3, 1, 2, 1, 2, 7, 3, 8, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 2, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 3, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 4,
	7, 2, 6, 4, 7, 2, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 3, 1, 1, 3,
	5, 4, 6, 4, 3, 0, 1, 3, 2, 4,
	2, 4, 1, 6, 6, 3, 5, 3, 2, 6,
	3, 3, 4, 4, 3, 3, 1, 3, 3, 1,
	1, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	3, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 1, 1, 1, 1, 1,
	2, 2, 5, 3, 3, 3, 3, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 6, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 5, 4, 6, 4,
	5, 6, 5, 1, 0, 2, 3, 3, 3, 4,
	2, 3, 3, 3, 4, 3, 3, 3, 4, 4,
	4, 4, 4, 4, 2, 3, 2, 3, 7, 7,
	8, 10, 7, 4, 5, 5, 5, 5, 2, 0,
	2, 0, 3, 2, 8, 11, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 2, 1, 0, 1, 0, 9, 9, 3, 1,
	3, 7, 1, 3, 11, 3, 2, 0, 3, 1,
	2, 2, 3, 2, 6, 2, 1, 1, 2, 4,
	2, 5, 3, 8, 9, 6, 5, 3, 1, 4,
	7, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 7,
	3, 1, 0, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 2, 2, 2, 2, 2, 3, 4, 2,
	4, 7, 3, 3, 0, 3, 6, 3, 6, 3,
	13, 16, 9, 12, 4, 2, 0, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 8, 10, 8, 10, 6, 8,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 3, 2, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 0, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 0, 1, 3, 1, 0, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 3, 6, 3, 1, 3, 1, 4, 2, 1,
	3, 1, 3, 8, 5, 4, 3, 0, 2, 2,
	0, 10, 3, 2, 0, 1, 3, 1, 1, 3,
	3, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 2, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 8, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 5, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	6, 3, 3, 3, 1, 5, 5, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	3, 2, 1, 0, 5, 1, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 1, 1,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 3, 1, 1,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 3, 4, 1, 1, 1, 5, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 8, 6, 6, 4,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 5, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 3, 1, 1, 5, 3,
	1, 1, 3, 1, 0, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 2, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 7, 1, 7, 5, 3, 1,
	1, 1, 3, 5, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 402, -4, -32, -34, -45, -43,
	-46, -73, -57, -58, -59, -72, -68, -74, -75, -76,
	-77, -69, -83, -82, -84, -88, -37, -85, -78, -79,
	-89, -97, -124, -125, -126, -127, -5, -11, 25, 36,
	-35, -36, 50, 76, 64, -53, -50, -47, -56, 78,
	99, -380, 103, -60, -63, -65, 107, 114, 118, 141,
	150, 243, 250, 271, 273, 275, 284, -39, -38, 115,
	-134, -136, 269, -80, -81, -90, -91, -92, -93, -128,
	300, -98, -99, -100, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, 303, -33, -44, -87, -86,
	345, -6, -7, -8, -9, -10, -12, -22, -48, -49,
	-51, -52, -54, -55, -379, -61, -62, -64, -66, -67,
	-137, -135, 399, 270, 354, 37, 312, 65, 110, 279,
	20, -14, -15, -18, -17, -19, -16, -23, -25, -27,
	-24, -26, -28, -29, -30, -31, -20, -21, -13, 370,
	378, -140, -138, -139, -141, 289, 362, 325, 403, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 2,
	325, 365, 290, 355, 92, 159, 255, 241, -397, 2,
	-226, 325, 92, -189, -188, -161, 392, 4, -357, -359,
	20, 21, 22, 23, 25, 35, 36, 37, 42, 46,
	49, 50, 51, 58, 63, 64, 65, 66, 67, 72,
	69, 70, 71, 74, 76, 77, 80, 81, 82, 90,
	91, 93, 95, 99, 101, 103, 106, 107, 109, 114,
	115, 116, 117, 118, 128, 129, 134, 136, 140, 142,
	147, 148, 149, 150, 151, 152, 160, 163, 165, 158,
	174, 176, 177, 178, 184, 185, 186, 189, 188, 193,
	194, 197, 198, 201, 203, 206, 207, 210, 208, 212,
	213, 215, 214, 220, 222, 223, 225, 228, 229, 232,
	235, 238, 239, 240, 241, 242, 243, 244, 246, 248,
	250, 252, 253, 254, 255, 256, 258, 259, 261, 262,
	263, 264, 265, 269, 267, 268, 270, 271, 272, 273,
	275, 278, 279, 280, 282, 301, 302, 314, 284, 285,
	286, 287, 288, 296, 290, 291, 297, 298, 300, 303,
	305, 308, 311, 312, 313, 315, 318, 320, 316, 310,
	323, 324, 326, 327, 328, 329, 330, 331, 332, 333,
	340, 341, 345, 346, 347, 348, 351, 352, 353, 354,
	356, 359, 360, 361, 366, 371, 372, 374, 375, 376,
	30, 38, 39, 40, 41, 43, 44, 47, 48, 54,
	55, 56, 59, 94, 96, 97, 113, 119, 120, 130,
	131, 132, 143, 145, 153, 154, 157, 164, 166, 167,
	168, 169, 170, 172, 180, 181, 191, 209, 219, 221,
	233, 237, 247, 249, 257, 281, 292, 293, 294, 295,
	306, 307, 317, 321, 335, 336, 337, 342, 343, 358,
	362, 363, 402, 402, 2, 177, 254, -185, -188, -161,
	92, 226, 402, 402, 402, 2, 325, 313, 290, 355,
	277, 365, -256, 174, 92, 350, -161, 250, 24, 2,
	101, 163, 353, 352, 24, 246, 291, 327, 329, 2,
	402, 402, 2, 365, 290, 325, 159, 92, 355, 277,
	-179, 2, -161, -71, 2, 399, -70, -5, -47, -56,
	-60, -72, -68, -11, -32, -34, -53, -50, -57, -63,
	-65, -76, -75, -77, -79, -83, -82, -85, -90, -91,
	-97, -126, -127, 78, 25, 107, 300, 115, -400, -221,
	2, 24, -165, -161, 78, 141, 289, 325, 2, 177,
	2, -179, 2, -397, 2, 177, 2, -400, -221, 23,
	2, -161, 2, 286, 303, -166, 2, 284, -161, 402,
	402, 402, 402, 402, 198, 58, 281, 297, -95, 341,
	-94, 335, -349, -96, 2, -161, 210, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 2,
	-122, 297, 313, 148, 36, 58, 24, 63, 93, 142,
	159, 160, 185, 73, 74, 253, 198, 178, -309, 117,
	298, 326, 323, 341, 78, 356, 278, 330, 116, 4,
	92, 210, 299, 335, 67, 402, 402, 402, -402, 2,
	325, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, -135, -137, -136, 402, 402, 402, 402, 402,
	-215, -216, 349, 171, 112, 231, -134, -136, 2, -379,
	-122, 297, 2, 58, 24, -347, 2, -282, 226, -284,
	390, 391, 385, 216, 377, -296, 98, 205, 204, -286,
	-299, 113, 281, 399, -192, -285, 405, 9, -376, -136,
	31, -297, -298, 52, -190, -161, 7, 8, 5, 6,
	-168, -324, -292, -333, 344, 121, 218, -373, -374, -191,
	4, -357, -351, -325, -336, -329, -332, -334, 172, 61,
	84, 85, 88, 86, 89, 299, 355, 53, 30, 153,
	219, 154, 59, -375, 106, 39, 41, 43, 44, 54,
	55, 94, 96, 97, 119, 120, 130, 131, 132, 143,
	164, 166, 167, 168, 169, 170, 180, 181, 191, 221,
	237, 247, 257, 306, 317, 321, 335, 336, 337, 342,
	343, 363, -358, -337, -338, -330, -331, 79, 122, 139,
	162, 155, 175, 179, 192, 195, 211, 234, 236, 276,
	304, -339, -403, 2, 341, 341, 2, -403, 2, -403,
	2, -164, 2, 341, 338, -404, 341, 373, -381, 258,
	-382, -179, -381, 402, 402, 404, 402, -210, -211, -212,
	2, 24, 104, 399, 2, -312, 2, 397, -314, -168,
	-375, -136, -313, 399, -185, 227, -191, 84, 85, 88,
	89, -161, 61, 205, 204, -3, 2, -314, 153, -185,
	2, -314, 153, 2, -186, 153, -314, -188, 2, -355,
	153, -353, 9, -352, 5, 4, -357, -359, -358, 2,
	-170, -161, 2, -194, 153, -185, -182, -350, 4, -357,
	-359, -358, -360, 24, 26, 27, 28, 29, 31, 32,
	33, 34, 45, 52, 53, 57, 60, 62, 73, 78,
	83, 84, 86, 85, 87, 88, 89, 98, 100, 102,
	104, 105, 108, 110, 112, 121, 123, 135, 137, 138,
	141, 144, 146, 156, 159, 161, 171, 173, 187, 190,
	196, 199, 200, 216, 217, 218, 224, 226, 227, 230,
	231, 245, 251, 260, 274, 277, 289, 299, 309, 319,
	322, 325, 334, 338, 339, 344, 349, 350, 355, 357,
	364, 365, 367, 368, 369, 370, 373, -183, -350, 338,
	404, -226, -219, -161, 401, -282, 2, -282, 2, -213,
	399, 401, 325, 62, 2, -185, 153, -175, 2, -161,
	-186, 153, 2, -188, -355, 153, 2, -355, 153, 2,
	-187, 2, -185, 159, 159, -170, 153, 2, -161, 24,
	138, 2, 173, 2, 173, 2, -315, 2, -314, -227,
	153, 2, -185, -227, 153, 2, -227, 153, 2, -195,
	153, 2, -194, -170, 153, 2, -356, 153, 2, -355,
	-356, 153, 2, -252, 399, -321, 2, -320, -352, 362,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 297, 226, 338,
	404, -185, -282, -294, 399, 138, -282, 226, 138, 228,
	2, 92, 325, 376, 24, -161, 2, 301, 2, 399,
	-95, 56, 341, -271, 2, -272, -158, -159, -160, 176,
	252, 256, 376, 338, 382, 138, -230, 401, -347, -122,
	2, 135, 2, 7, 2, -355, 2, 301, 2, 253,
	298, 58, 138, 2, 2, 226, -398, 2, 138, 2,
	138, 2, 138, 2, 138, 2, 138, 2, 2, 253,
	298, 2, 340, 186, 340, 2, 138, 2, 5, 2,
	176, 252, 314, 2, 325, 365, 290, 2, 2, 138,
	138, 376, 2, -238, -314, -215, -216, -237, -260, -261,
	196, 123, 224, -243, 24, 104, -243, -243, 46, 400,
	400, -122, 301, 2, 10, 11, 60, 35, 390, 391,
	392, 393, 133, 394, 395, 388, 389, 387, 380, 381,
	384, 182, 183, 75, 383, 382, 68, 202, 283, 124,
	125, 126, 127, 266, 13, 14, 15, 28, 230, 195,
	377, 155, 304, 385, 16, 17, 18, 175, 38, 156,
	-167, -196, -282, -282, -282, -282, -282, 236, -235, -277,
	397, -136, 399, 399, -136, -282, -228, 399, -346, 7,
	-136, -291, 397, -300, -282, 401, 399, 5, 399, 5,
	-383, 371, 135, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 249, -343, 366, -343, -343, -326, 399,
	-326, 399, 399, -327, 399, 399, 399, -326, 399, 399,
	399, 372, 372, 378, 399, 399, 399, -270, -271, -270,
	338, -166, 404, -381, -213, 399, -231, -316, -282, 392,
	-231, -231, 226, -228, -282, 79, -246, 179, 211, 139,
	192, 276, 162, -346, -71, -279, 405, 399, -308, 378,
	-308, -136, -313, 399, -312, 392, -185, 399, 401, -146,
	267, -145, 22, 25, 107, 360, -203, 241, 113, 310,
	331, 115, 285, 267, 113, -240, -242, 32, 90, 213,
	238, 49, 151, 204, 205, 312, 113, 267, 370, 113,
	115, 267, -148, 310, 331, 115, 285, 267, -147, -203,
	113, 405, 115, 222, -355, -189, 404, -350, 392, 138,
	-219, -350, -185, -190, -161, -191, 399, -213, 216, 226,
	-241, -240, 216, -157, -378, 370, 216, 216, -213, -172,
	153, 2, -162, -161, -172, 153, -378, 216, -315, -193,
	-185, -193, 300, -179, 32, -150, 404, 51, 272, 113,
	-150, 113, -150, 113, -150, 404, 113, -150, 113, 404,
	113, 113, -228, 400, 404, -397, -219, -165, 78, 399,
	32, -293, -322, -323, -325, -335, -328, -332, -333, -334,
	42, 48, 47, 332, 209, 292, 293, 294, 295, 307,
	358, 157, 40, 225, 165, 4, 164, 166, 167, 168,
	169, 170, 306, 39, 257, 131, 132, 130, 106, 97,
	96, 221, 44, 43, -337, -338, -330, -331, 94, 335,
	336, 337, 172, 180, 181, 41, 55, 54, 363, 317,
	-356, -397, -219, 135, -170, 2, -185, 2, 69, 70,
	376, -349, -228, 32, -271, 2, -405, 404, 194, -198,
	201, 215, 147, 227, 374, -354, 5, 4, -292, -305,
	98, 198, -333, 8, 391, -344, 7, 390, -348, -347,
	-348, 82, 401, -350, 325, -349, 24, 302, 2, -185,
	277, -397, -399, 135, -185, -185, -185, -185, -185, 135,
	2, 340, 2, 135, -161, 194, -185, 2, -187, 2,
	-186, 2, 325, 159, 325, -150, 404, -237, -261, -260,
	-263, -282, 24, -266, 129, 212, -282, -284, -135, -135,
	-135, -217, -310, -282, 251, 159, -349, -341, -322, -340,
	262, 263, 261, 265, 264, -322, -184, -350, 335, -282,
	-282, -282, -282, -282, -282, -282, -282, -282, -282, -282,
	-282, -282, -282, -282, -282, -282, -282, -282, -282, -282,
	-282, -282, -282, -282, -282, -282, -282, -282, -282, -282,
	-282, 195, 155, 304, 38, 156, -282, 338, -282, -282,
	-282, -282, 208, 216, 218, 344, 121, 351, 104, 222,
	-407, 322, 34, -289, -136, 399, -304, 29, 309, 24,
	-296, 281, 399, -277, -282, -278, -229, -228, 400, 404,
	-229, -295, -291, -303, -302, 367, -350, 392, 400, -228,
	364, 24, 104, 392, 2, 7, -253, 375, 207, 95,
	149, 206, -254, 288, -384, 128, 144, 399, 400, 2,
	400, 2, 400, 2, 400, 2, -282, -282, -282, -282,
	-282, -228, 399, -346, -247, 2, -342, -228, 4, 375,
	207, 95, 149, 206, 288, -247, 2, 7, -228, 2,
	-228, 2, -248, 2, -282, -228, -249, -283, -284, 390,
	391, 385, 399, 281, -250, 2, -282, -229, 335, 335,
	335, -282, 45, 190, 339, -251, -282, 138, -228, -346,
	-166, -382, 32, -228, -223, 404, 138, 32, 4, -223,
	-223, 399, 400, 404, 179, 179, -312, -246, 179, -244,
	234, -244, -244, -395, 399, 398, -308, -171, 397, 406,
	-350, -229, 2, -307, -306, 32, -179, 232, -307, 400,
	-185, -350, 404, 338, -257, 73, 62, -274, 153, 62,
	-361, -173, 73, -362, -161, 57, 350, 251, 137, -257,
	73, -257, 73, 73, 46, -314, 35, -85, 71, 138,
	338, -314, -242, -322, 90, 204, 205, 46, -345, -344,
	391, -345, 46, -345, -345, -345, 370, -186, -314, 338,
	242, -355, 71, 338, 404, 35, -85, 71, 138, 338,
	-194, -171, 71, 325, -319, -318, 379, -161, 401, 315,
	400, 401, 175, 175, 401, -199, -200, -161, -275, -274,
	-363, -364, -361, 174, 159, 350, 122, 32, 113, -219,
	113, 242, 113, 113, 32, 226, 216, 226, 216, -153,
	328, 113, -276, 368, -267, -85, 399, 98, 32, -267,
	-232, -233, -317, -234, -173, 399, -179, -185, -227, -227,
	-227, -194, -195, -170, -355, -356, -356, 400, -71, -320,
	338, 370, 357, -200, -70, 25, 78, 107, 400, 404,
	-222, 31, 397, -253, 399, -132, 115, 370, 138, -221,
	-319, -319, 135, 70, 382, 338, 400, 341, -272, -197,
	256, 308, 268, 296, 8, 7, 7, 404, -350, -185,
	-220, -219, -219, 297, -71, 135, -71, -185, -194, -185,
	-314, -264, -344, 399, -265, 281, 282, 404, -144, 33,
	102, 184, -185, 376, -282, -282, 338, -407, 322, -289,
	-282, 208, 218, 344, 121, 351, 104, 222, 138, 399,
	-283, -283, -228, -282, 399, -228, 398, 408, 400, -282,
	398, 398, 404, -301, -302, 108, -282, 401, -216, 404,
	-215, -282, -228, -228, 400, 400, 338, 338, 338, 338,
	399, -389, 235, 399, 399, -282, 32, 404, 404, 404,
	404, 400, -346, 400, 404, 400, 138, 400, 400, 400,
	400, 400, -255, 245, 400, 10, 11, 390, 391, 392,
	393, 133, 394, 395, 388, 389, 387, 380, 381, 382,
	68, 202, 283, 13, 14, 15, 175, 156, -283, -283,
	-283, -228, 399, 400, -287, -288, 138, 135, 376, 376,
	376, 32, -251, -251, -251, 400, 138, -228, 400, 399,
	400, -276, -316, -225, 2, -312, -181, -350, -276, -276,
	-228, -282, -312, -312, -245, 357, 226, 179, -312, -306,
	400, -396, -346, -308, -307, -346, -281, -280, 136, 214,
	400, -179, -213, -308, 400, 401, -145, -185, -173, -180,
	-161, 216, -274, 153, -152, 216, -322, -180, 399, 399,
	184, 184, -173, -180, 153, -173, 153, -180, -180, 197,
	255, 217, -146, 267, -85, 376, 399, -187, 267, -190,
	-345, -345, -240, 267, -186, -355, 370, 376, -170, -147,
	-85, 376, 399, -171, -148, 267, 376, -185, -129, 152,
	222, 392, -350, -123, 5, 218, -123, -350, 400, 404,
	159, -172, 159, -178, -162, -85, -185, 138, -186, -355,
	-355, -355, -85, -185, 113, -185, 113, -154, 109, -406,
	382, -170, -216, -282, -239, -269, 274, 226, -214, -174,
	-173, 362, -179, -239, -224, 404, 138, 382, 401, -214,
	-150, -150, -150, -150, -150, -219, 23, -355, 400, -322,
	397, 398, 7, 7, -318, -131, 229, -130, -161, 5,
	-219, 138, -40, 370, 255, 92, 325, 241, 159, -347,
	-347, -271, 348, 66, 256, -347, -399, 297, -71, -265,
	-282, -310, -185, 405, -282, -282, -283, -283, 138, 399,
	-282, -293, 28, 28, 400, -229, 404, -278, -282, 400,
	-291, 110, -282, 334, -350, 392, 400, 364, -216, -216,
	-216, 5, 207, 149, 206, -254, 206, -254, -254, 7,
	-390, -176, 399, -161, 368, -215, 400, -341, -322, -282,
	-282, -282, 400, -346, -282, -287, -282, -341, -322, -283,
	-283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
	-283, -283, -283, -283, -283, -283, -283, -283, 104, 216,
	222, -283, 404, -229, -288, -287, -282, -282, -322, 400,
	400, 400, -228, -70, -236, 144, -319, 404, -236, -236,
	400, -245, 399, -282, -312, 398, 400, 404, -307, 398,
	404, 407, 382, -308, -213, -306, -350, 338, 338, 113,
	216, 359, -365, -362, -282, -218, -311, -173, -377, 399,
	-161, -373, -374, -168, 399, 399, -143, 107, 300, -259,
	113, -150, 113, -150, 399, 399, 338, -257, 73, -285,
	-168, -161, -228, 338, 338, 242, -285, -285, -228, 338,
	-285, 115, -132, 138, 324, 401, -201, 158, -275, -162,
	399, -172, 399, 399, -213, -185, -241, -157, 399, -171,
	399, -171, -155, 189, -406, -353, -378, -262, -260, -239,
	-231, 217, 72, 400, 404, 401, -276, -233, -225, -282,
	2, 400, 228, -133, 80, -133, 7, 398, 400, -132,
	404, 399, 382, 382, -219, 229, -182, -170, -185, -183,
	-194, 227, 400, -144, -171, 28, 28, -282, -293, 400,
	-282, -282, 400, -282, 398, -282, 401, 5, -282, 400,
	400, 400, 400, -391, -161, -282, 400, 400, 400, 404,
	400, 400, 400, -288, 138, 104, 222, 399, -282, 400,
	400, 400, -290, 146, 46, -312, -290, -290, -219, -279,
	-346, -280, -171, 397, -307, 401, -173, -180, -274, 113,
	-366, 73, -367, 60, 122, 78, 216, 218, 350, 251,
	57, 98, 260, 32, 400, 400, 404, -169, 60, -169,
	-282, 399, -218, -219, 216, 98, 216, 98, 91, 346,
	-173, -180, -219, -219, -185, -173, -180, 399, 400, -187,
	-186, -355, 400, -171, 71, -356, 335, -350, -202, -203,
	156, 399, -218, 399, -219, -199, 32, -218, 226, -218,
	226, -156, 188, -406, -353, -153, -239, -268, 399, 226,
	-85, -174, 2, -216, 382, 91, 91, 398, -130, -131,
	-355, -355, -41, -42, 159, 73, 244, -205, -204, 241,
	222, -144, -282, -282, 400, 400, -350, 392, -216, -385,
	241, 400, -282, -283, 138, 399, -293, 400, -386, 369,
	-282, -228, -386, -386, 400, -308, -346, -274, -180, -184,
	-177, -161, 122, 153, 218, 184, 399, -283, -185, -283,
	-273, -401, 77, 320, -311, -144, -184, -144, 400, -228,
	400, 400, 218, 218, -282, -322, -150, -150, 400, 400,
	338, 338, -228, 338, 338, 376, -285, 239, -218, 400,
	-218, 400, 400, -85, 400, -185, 400, -185, -406, -353,
	-154, 105, -219, 73, -262, -289, 399, 399, 400, 404,
	24, 399, 24, 399, -183, 325, 400, -216, 46, 400,
	-283, -293, 400, -387, -388, -176, -307, 398, -367, -177,
	216, -282, -163, 399, 319, -201, 399, -169, -216, 260,
	-149, 60, 399, 399, -173, -180, -216, 399, 399, -285,
	-185, 400, -273, 400, -201, -273, 399, 399, -353, -155,
	352, 217, 400, -180, -239, -356, -356, -42, -219, -219,
	-185, -392, 255, 282, -228, 400, 404, 32, 113, 400,
	-368, 203, -161, -202, -219, -144, 400, -185, -142, 357,
	-184, -207, -206, -204, -209, -208, -204, 400, -228, -228,
	399, -201, -273, -202, -201, -218, -218, -156, 300, -276,
	400, 400, 400, 400, 400, -393, -394, 38, 347, 82,
	-282, -393, -388, -390, 122, -369, -372, -371, 226, 139,
	240, 305, 400, 400, -213, -282, 400, 404, 362, 400,
	404, 362, 400, 400, -219, -202, -201, -202, 400, 400,
	-232, -132, -132, -394, 248, 134, 281, 248, 134, -177,
	-371, 226, -372, 226, 352, 101, -368, -206, 156, -208,
	138, 400, -202, -258, 357, -273, -276, 28, -370, 213,
	272, 51, 300, -370, -369, 399, 399, -151, 51, 272,
	140, -201, -394, 21, 218, 98, -228, -228, -202, 400,
	400, -258, -202, 338, 399, -228, 400, -202,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 43, 45,
	46, 47, 48, 49, 51, 53, 56, 57, 0, 0,
	172, 174, 0, 0, 0, 185, 187, 189, 190, -2,
	0, 0, 0, 216, 217, 219, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 357, 358, 0,
	802, -2, 0, 337, 339, 348, 350, 352, 354, 355,
	0, 415, 417, 419, 421, 423, 425, 427, 429, 431,
	433, 435, 437, 439, 441, 443, 445, 447, 449, 451,
	453, 454, 456, 458, 460, -2, 714, 716, 718, 720,
	-2, 60, 62, 64, 66, 68, 70, 85, 193, 195,
	197, 199, 202, 204, 839, 222, 224, 226, 228, 230,
	-2, 851, 0, 0, 0, -2, 0, -2, -2, -2,
	732, 71, 72, 73, 74, 75, 76, 91, 92, 93,
	94, 95, 96, 78, 80, 81, 87, 88, 90, 0,
	0, 815, 817, 819, 821, -2, 0, 0, -2, 7,
	13, 15, 17, 20, 22, 24, 26, 28, 30, 32,
	34, 36, 38, 40, 44, 50, 52, 54, 58, 59,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	326, 0, 1456, 1343, 1347, 1401, 1350, 1404, 1405, 1406,
	1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
	1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
	1455, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
	1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
	1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515,
	1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
	1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
	1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
	1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555,
	1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565,
	1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
	1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
	1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
	1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605,
	1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615,
	1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625,
	1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635,
	1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645,
	1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
	1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665,
	1666, 1667, 173, 175, 176, 0, 0, 618, 1388, 1401,
	1456, 0, 186, 188, 191, 192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 677, 313, 1526, 315, 317,
	0, 0, 0, 0, 210, 211, 212, 213, 214, 215,
	218, 220, 221, 0, 0, 0, 0, 0, 0, 0,
	312, 310, 1383, 255, 256, 0, 295, 296, 297, 298,
	299, 300, 302, 259, 261, 263, 264, 266, 268, 270,
	272, 274, 276, 278, 280, 281, 283, 285, 286, 288,
	290, 291, 293, 678, 0, 0, 0, 0, 0, 330,
	321, 329, 331, 333, 334, 335, 336, 0, 155, 0,
	553, 308, 306, 0, 151, 0, 711, 0, 330, 1428,
	325, 712, 713, 0, 0, 708, 709, 1554, 742, 338,
	340, 349, 351, 353, -2, -2, 1651, -2, 378, -2,
	386, 1660, 0, 389, 390, 393, -2, 416, 418, 420,
	422, 424, 426, 428, 430, 432, 434, 436, 438, 440,
	442, 444, 446, 448, 450, 452, 455, 457, 459, 461,
	462, 0, 0, 0, 0, 0, 466, 0, -2, -2,
	0, 0, 0, 0, 0, -2, 0, -2, 0, 0,
	-2, -2, 0, 0, 0, -2, -2, 0, 0, 465,
	467, 468, 469, 0, 513, 715, 717, 719, 0, 659,
	841, 61, 63, 65, 67, 69, 194, 196, 198, 200,
	203, 205, -2, 813, 814, 223, 225, 227, 229, 231,
	-2, 0, 845, 845, 845, 0, 0, 814, 812, 0,
	341, 0, 343, 0, 466, 346, 347, 397, 398, 1054,
	0, 0, 0, 0, 0, 0, 1127, -2, -2, 1159,
	1161, 1622, 1651, 0, 1163, 1164, 0, 1166, 1168, 1169,
	0, 1172, 1173, 1326, 1395, 1390, 1355, 1356, 1357, 1358,
	0, 0, 1361, 0, 1363, 1364, 1365, 1228, 1183, -2,
	-2, -2, 1399, 979, 980, 981, 982, 983, -2, 1668,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 0, 1606, 1630,
	1644, 1631, 1618, 1200, 1462, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1623, 1624, -2, -2, -2, 1628,
	-2, -2, -2, -2, -2, -2, -2, -2, 1642, -2,
	1647, 1648, -2, -2, -2, 1659, -2, -2, -2, 1663,
	1664, -2, 1415, 1014, 1015, 1020, 1021, 1669, 1670, 1671,
	1672, 1673, 1674, 1675, 1676, 1677, 1680, 1681, 1682, 1683,
	1684, 1023, 744, 722, 735, 744, 724, 725, 726, 727,
	728, 733, 734, 737, 0, 729, 730, 731, 831, 1532,
	834, 618, 832, 816, 818, 0, 820, 0, 0, 0,
	825, 848, 846, 0, 882, 829, 830, 840, 897, 0,
	913, 913, 904, 0, 935, 0, 1400, 0, 0, 0,
	0, 1401, 1668, 1678, 1679, 2, 77, 0, 1630, 935,
	79, 0, 1630, 82, 0, 1630, 0, -2, 86, 0,
	1630, 156, 157, 1411, 1412, 1416, 1417, 1418, 1419, 89,
	0, 1379, 97, 0, 1630, 1346, 0, 1376, 1420, 1421,
	1422, 1423, 1424, 1685, 1686, 1687, 1688, 1689, 1690, 1691,
	1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701,
	1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711,
	1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721,
	1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731,
	1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741,
	1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751,
	1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761,
	1762, 1763, 1764, 1765, 1766, 1767, 1768, 0, 1373, 0,
	0, 327, 328, 1351, 0, 177, 178, 179, 180, 0,
	0, 0, 0, 0, 201, 618, 1630, 0, 207, 1384,
	642, 1630, 640, 1387, -2, 1630, 662, 665, 1630, 667,
	618, 669, 1386, -2, 1408, 838, 1630, 758, 314, 316,
	0, 209, 0, 771, 0, 773, 0, 792, 941, 140,
	1630, 234, 253, 140, 1630, 237, 140, 1630, 240, 140,
	1630, 243, 1341, 140, 1630, 246, 247, 1630, 249, 158,
	250, 1630, 252, 309, 0, 0, -2, 303, 1389, -2,
	301, 260, 262, 265, 267, 269, 271, 273, 275, 277,
	279, 282, 284, 287, 289, 292, 294, -2, 0, 0,
	0, 0, 552, 0, 0, 0, 710, 0, 0, 0,
	359, 0, 0, 0, 0, 741, 356, 0, 375, 0,
	377, 1617, -2, -2, 381, 745, 749, 750, 751, 0,
	0, 0, 0, 0, 0, 0, 394, 0, 391, 463,
	464, 0, 473, 474, 475, 476, 477, 0, 480, 502,
	517, 0, 0, 484, 486, 0, 551, 489, 0, 491,
	0, 493, 0, 495, 0, 497, 0, 499, 501, 503,
	518, 505, 0, 0, 0, 516, 0, 521, 522, 523,
	0, 525, 526, 527, 0, 0, 0, 535, 537, 0,
	0, 470, 471, 140, 939, -2, 0, 808, 860, 861,
	0, 0, 0, 0, 843, 844, 0, 0, 0, 804,
	805, 342, 0, 345, 0, 0, 0, 0, 1261, 1262,
	1263, 1264, 1265, 1266, 1269, 1270, 1267, 1268, 1271, 1272,
	0, 0, 0, 0, 0, 1273, 0, 0, 0, 0,
	0, 0, 0, 0, 1274, 1275, 1276, 0, 0, 1278,
	0, 1280, 0, 0, 0, 0, 0, 0, 1334, 0,
	0, 1277, 1059, 1060, 1061, 1093, 1094, 0, 1160, 1331,
	1330, 1162, 0, 1283, -2, 1284, 0, 0, 1165, 1370,
	1170, 1171, 1283, 0, 1325, 0, 0, 1360, 0, 1051,
	1230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 999, 1017, 1028, 1025, 1024, 1001, 0,
	1000, 0, 0, 998, 0, 0, 0, 1002, 0, 1306,
	-2, 0, 0, 0, 0, 0, 0, 721, -2, 723,
	0, 739, 0, 833, 0, 0, 886, 1335, 1339, 1340,
	886, 886, 0, 0, 1284, 0, 0, 0, 0, 932,
	932, 932, 930, 907, 0, 913, 0, -2, 923, 0,
	923, -2, 904, 0, 0, 936, 937, 0, 0, 98,
	705, 115, 0, 705, 705, 0, 132, 0, 0, 0,
	0, 0, 111, 0, 0, 83, 643, 0, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 0, 0, 0, 113, 0, 133, 135,
	0, 0, 0, 0, 926, 1344, 0, 1402, 1349, 0,
	0, 1402, 0, 0, 1390, 1391, 559, 0, 0, 0,
	638, 641, 0, 660, 0, 837, 0, 0, 0, 0,
	1630, 674, 1375, 1407, 0, 1630, 760, 0, 945, 0,
	774, 0, 0, 942, 0, 232, 0, 138, 139, 0,
	235, 0, 238, 0, 241, 0, 0, 244, 0, 0,
	0, 0, 0, 840, 0, 0, 319, 332, 0, 0,
	840, 0, 1286, 953, 956, 957, 958, 959, 1051, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 1011, 0, 986,
	986, 986, 1003, 1004, 1012, 1013, 1018, 1019, 1030, 1031,
	1033, 1035, 1037, 954, 955, 1029, 1029, 1029, 1026, 1027,
	170, 0, 323, 0, 926, 361, 926, 363, 0, 543,
	0, 0, 0, 0, -2, 383, 0, 747, 0, 752,
	406, 407, 408, 754, 755, 387, 409, 410, 411, 412,
	413, 414, 0, 635, 0, 637, 1366, 0, 384, 399,
	385, 388, 0, 395, 0, 478, 479, 481, 482, 483,
	1354, 548, 488, 0, 490, 492, 494, 496, 498, 840,
	507, 0, 509, 840, 519, 524, 528, 529, 530, 531,
	532, 533, 0, 0, 0, 658, 0, 811, 858, 859,
	864, 868, 869, 872, 875, 876, 866, 1054, 826, 827,
	828, 852, 853, 688, 0, 0, 344, 1055, 949, 950,
	1005, 1006, 1007, 1008, 1009, 1056, 1057, 1372, 0, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, -2,
	-2, -2, -2, -2, -2, -2, -2, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, -2, -2, -2, 1091, 1092,
	-2, 1279, 1281, 0, 1334, 0, -2, 0, -2, -2,
	-2, -2, 1105, 0, 1107, 1110, 1112, 1114, 0, 0,
	0, 0, 1333, 1124, 1317, 0, 0, 1258, 1259, 1260,
	1109, 0, 0, 1332, 1329, 0, 0, 1282, 1167, 0,
	0, 0, 1290, 1324, 1320, 0, 1392, 1398, 1174, 851,
	0, 0, 0, 0, 1181, 0, 1371, 1038, 1039, 1040,
	1041, 1042, 1043, 1052, 1238, 0, 0, 0, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1210, 0, 1293, -2, -2,
	-2, -2, -2, -2, -2, 0, 1212, 0, 0, 1224,
	0, 1226, 0, 1214, 1284, 1303, 0, 0, 1130, 0,
	0, 0, 0, 1651, 0, 1217, 1284, 1311, 0, 0,
	0, 0, 0, 0, 0, 0, 1284, 0, 1316, 0,
	738, 835, 0, 0, 945, 0, 0, 0, 1338, 945,
	945, 0, 881, 0, 0, 0, 0, 0, 0, 927,
	931, 928, 929, 0, 0, 913, 923, 894, 0, 0,
	1374, 0, 901, 902, 922, 0, 618, 912, 903, -2,
	0, -2, 0, 0, 0, 0, 704, 117, 1630, 0,
	142, 0, 0, 608, 1380, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 644, 645, 647, 653, 655, 0, 649, 1369,
	0, 650, 0, 652, 654, 656, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 1345, 0, 0, 161, 925, 0, 1352, 0, 171,
	617, 0, 0, 0, 0, 0, 558, -2, 560, 562,
	563, 564, 565, 1486, 1408, 0, 1408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 762,
	768, 0, 851, 0, 790, 776, 0, 0, 0, 790,
	794, 795, 797, 798, 0, 0, 943, 254, 140, 140,
	140, 1342, 140, 140, 159, 248, 251, 311, 257, 304,
	0, 0, 0, 0, 305, 0, 0, 0, 307, 0,
	946, 948, 0, 960, 0, 149, 0, 0, 0, 0,
	360, 365, 0, 544, 0, 0, 376, 0, 746, 753,
	0, 403, 0, 405, 636, 1368, 1367, 0, 396, 472,
	551, 1353, 550, 506, 510, 840, 512, 545, 546, 547,
	940, 0, 870, 0, 867, 873, 874, 0, 855, 686,
	687, 0, 0, 0, -2, -2, 0, 0, 0, 1125,
	-2, 1106, 1108, 1111, 1113, 1115, 0, 0, 0, 0,
	0, 0, 0, 1126, 1283, 0, 1327, 1330, -2, 1285,
	1288, 1289, 0, 0, 1321, 0, 0, 0, 0, 0,
	850, 851, 851, 851, 1180, 0, 0, 0, 0, 0,
	0, 1182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1199, 0, 984, 0, 1209, 0, 1211, 1010, 1223,
	1225, 1213, 0, 0, 1215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1133, 1134,
	1135, 0, 1283, 1216, 1309, 1310, 0, 0, 1032, 1034,
	1036, 0, 0, 0, 0, 1222, 0, 1315, 1022, 840,
	883, 878, 1336, 926, 885, 887, 1337, 1377, 878, 878,
	0, 1285, 915, 0, 917, 0, 0, 0, 919, 0,
	908, 0, 910, 923, 899, 0, 0, 892, 0, 891,
	913, 618, 921, 0, 938, 0, 116, 692, 0, 0,
	1378, 0, 119, 1630, 127, 0, 587, 0, 0, 0,
	0, 0, 707, 128, 1630, 140, 1630, 140, 129, 0,
	0, 578, 99, 705, 102, 0, 0, 698, 0, 648,
	651, 657, 84, 0, 700, 690, 0, 0, 689, 134,
	103, 0, 0, 702, 101, 0, 0, 0, 170, 0,
	0, 1348, 1403, 181, 183, 184, 182, 1392, 567, 0,
	1408, 0, 1408, 0, 1382, 556, 618, 0, 642, 663,
	-2, 666, 668, 0, 0, 0, 0, 764, 768, 0,
	767, 838, 863, 944, 769, 790, 0, 0, 0, 779,
	781, 778, 775, 772, 945, 0, 0, 0, 0, 0,
	233, 236, 239, 242, 245, 318, 0, 0, 0, 1287,
	0, 951, 0, 0, 170, 168, 1514, 166, 163, 165,
	322, 0, 362, 0, 0, 0, 0, 0, 0, 373,
	374, -2, 401, 402, 404, 400, 487, 508, 511, 0,
	0, 854, 688, 0, 1058, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 1318, 0, 0, 0, 1329, -2,
	1291, 1319, 1323, 0, 1393, 1397, 1175, 0, 0, 0,
	0, 1362, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 0,
	1236, 1237, 1241, 1385, 0, 0, 1186, 0, 0, 0,
	0, 0, 1016, 0, 1292, 1302, 1304, 1131, 1132, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, -2,
	-2, -2, 1149, 1150, 1151, -2, -2, -2, 0, 0,
	0, 1305, 0, 0, 1307, 1308, 1312, 1313, 0, 1219,
	1220, 1221, 1314, 0, 880, 0, 884, 0, 880, 880,
	847, 916, 0, 934, 918, 897, 909, 0, 906, 895,
	0, 896, 0, 923, 920, 905, -2, 0, 0, 0,
	0, 141, 585, 607, 0, 0, 679, 685, 685, 0,
	1380, 1184, 1185, 0, 0, 0, 121, 0, 0, 0,
	0, 125, 0, 131, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 107, 110, 0, 0,
	106, 0, 147, 0, 0, 0, 575, 0, 561, 0,
	0, 0, 0, 559, 0, 206, 639, 661, 0, 0,
	0, 0, 766, 768, 0, 759, 760, 790, 862, 770,
	788, 789, 787, 0, 0, 0, 851, 796, 793, 799,
	800, 0, 320, 0, 152, 0, 0, 952, 961, 150,
	0, 0, 0, 0, 324, 0, 538, 539, 573, 0,
	542, 865, 871, 856, 688, 0, 0, -2, 0, 1118,
	-2, -2, 1254, 1285, 1328, 1322, 0, 1359, 851, 1176,
	1178, 1179, 1053, 1243, 1240, 0, 1227, 1194, 1195, 0,
	1197, 1198, 985, 1301, 0, 0, 0, 0, 1285, 1256,
	1218, 836, 1232, 0, 0, 888, 1232, 1232, 0, 913,
	911, 893, 889, 0, 900, 0, 694, 696, 118, 0,
	586, 0, 589, 0, 0, 0, 0, 596, 597, 0,
	0, 0, 0, 0, 609, 616, 0, 688, 0, 688,
	0, 0, 0, 0, 0, 137, 0, 0, 706, 0,
	140, 140, 0, 0, 693, 0, 0, 0, 0, 699,
	701, 691, 0, 703, 0, 160, 0, 1393, 554, 574,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 756, 768, 0, 761, 762, 208, 0, 0, 0,
	777, 780, 782, 863, 0, 0, 0, 947, 167, 0,
	162, 164, 364, 366, 0, 0, 372, 540, 572, 0,
	0, 857, -2, -2, 1119, 1255, 1394, 1396, 0, 851,
	0, 1229, 0, -2, 0, 0, 0, 1257, 822, 0,
	879, 877, 823, 824, 933, 923, 0, 120, 0, 590,
	591, 1381, 593, 0, 595, 598, 0, 600, 1410, 0,
	567, 0, 613, 614, 680, 681, 684, 682, 685, 851,
	611, 0, 122, 123, 136, 144, 124, 130, 0, 0,
	0, 0, 851, 0, 0, 0, 924, 0, 0, 616,
	0, 606, 567, 557, 616, 0, 672, 0, 0, 763,
	764, 0, 0, 0, 790, 801, 0, 0, 169, 0,
	368, 0, 370, 0, 571, 0, 1177, 1246, 0, 1196,
	-2, 0, 1157, 1231, 1233, 0, 898, 890, 588, 592,
	0, 0, 622, 0, 602, 575, 0, 688, 0, 0,
	146, 0, 0, 0, 695, 697, 0, 0, 0, 109,
	0, 605, 567, 616, 575, 567, 0, 0, 765, 766,
	0, 784, 945, 786, 791, 0, 0, 367, 0, 0,
	541, 0, 0, 0, 1242, 1158, 0, 0, 0, 599,
	627, 0, 0, 610, 0, 683, 1175, 618, 126, 0,
	143, 0, 579, 0, 0, 582, 0, 0, 0, 0,
	0, 575, 567, 555, 575, 0, 0, 757, 0, 785,
	170, 170, 369, 371, 1239, 1244, 1247, -2, 1590, 1453,
	0, 1245, 1234, 1235, 0, 601, 623, 624, 0, 619,
	620, 621, 1409, 615, 622, 145, 576, 0, 0, 577,
	0, 0, 112, 114, 0, 603, 575, 676, 616, 673,
	945, 153, 154, 0, 1249, 1250, 1251, 1252, 1253, 594,
	625, 0, 626, 0, 0, 0, 627, 580, 0, 583,
	0, 570, 604, 670, 0, 567, 783, 0, 628, 0,
	631, 632, 0, 629, 612, 0, 0, 566, 568, 569,
	675, 575, 1248, 630, 633, 634, 0, 0, 676, 575,
	0, 671, 581, 0, 0, 0, 575, 584,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 388, 3, 394, 389, 3,
	399, 400, 392, 390, 404, 391, 401, 393, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 408, 403,
	380, 382, 381, 384, 405, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 397, 3, 398, 395, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 406, 387, 407, 385,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 383, 57723, 386, 57724, 396,
	57725, 402, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:992
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:998
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1004
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1013
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1015
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1020
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1021
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1022
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1024
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1025
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1026
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1027
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1028
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1029
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1030
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1032
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1033
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1040
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1045
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1046
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1058
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1059
		{
			return helpWith(sqllex, "ALTER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1062
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1063
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1064
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1065
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1066
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1103
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1114
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1129
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1148
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1160
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1185
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1221
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1227
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1233
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1242
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1251
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1260
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1272
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1343
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1366
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1376
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = nil
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1463
		{
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			return unimplemented(sqllex, "alter using")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1467
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[6].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1524
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.str = "CSV"
		}
	case 153:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1562
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1631
		{
		}
	case 171:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1649
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = &tree.CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1660
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1671
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1675
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1679
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.str = ""
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			return helpWith(sqllex, "CREATE")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1725
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			return helpWith(sqllex, "DELETE")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1759
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1760
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1771
		{
			return helpWith(sqllex, "DROP")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1774
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1777
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1793
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1808
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1823
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1846
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1869
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1884
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1899
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = tree.TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1930
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1939
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1942
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1943
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1945
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			return helpWith(sqllex, "DELETE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1948
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1949
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1950
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1951
		{
			return helpWith(sqllex, "INSERT")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1952
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1954
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1955
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1960
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1964
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1973
		{ /* SKIP DOC */
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2022
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2057
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2088
		{
			return helpWith(sqllex, "GRANT")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2142
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2171
		{
			return helpWith(sqllex, "RESET")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2172
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			return helpWith(sqllex, "RESET")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2198
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2206
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2210
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2211
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2212
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2213
		{ /* SKIP DOC */
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2214
		{ /* SKIP DOC */
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2215
		{
			return unimplemented(sqllex, "set local")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2231
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2249
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2275
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2383
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2388
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2408
		{
			return unimplemented(sqllex, "set from current")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2410
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2416
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2420
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = tree.Low
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = tree.Normal
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = tree.High
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2533
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2534
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2535
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2536
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2537
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2538
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2539
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2540
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2541
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2542
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2543
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2544
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2546
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2547
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2548
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2549
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2550
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2551
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2553
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2554
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2555
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2557
		{
			return helpWith(sqllex, "SHOW")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2566
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.str = "client_encoding"
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.str = "timezone"
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2581
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2596
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2607
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2615
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2626
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2643
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2648
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2659
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2670
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.union.val = &tree.ShowRoleGrants{Roles: sqlDollar[5].union.nameList(), Grantees: sqlDollar[6].union.nameList()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = &tree.ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2691
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2702
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2707
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2712
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2723
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2728
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2739
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2758
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2771
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2776
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = true
		}
	case 514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = false
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2802
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = &tree.ShowTables{Database: tree.Name(sqlDollar[4].str)}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2825
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2832
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2835
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2843
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2847
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2851
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2854
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2865
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2876
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2886
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2897
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2908
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2912
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2916
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2920
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2926
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2933
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2939
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2943
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2949
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2953
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2957
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2963
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = &tree.PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2991
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3121
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropCascade
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropRestrict
		}
	case 570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.str = ""
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 576:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 581:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 584:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3216
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[2].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3442
		{
			return unimplemented(sqllex, "match full")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3443
		{
			return unimplemented(sqllex, "match partial")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3444
		{
			return unimplemented(sqllex, "match simple")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3445
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3535
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 639:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3543
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3551
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3562
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3563
		{
			return unimplemented(sqllex, "create sequence CYCLE option")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3564
		{
			return unimplemented(sqllex, "create sequence CYCLE option")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3565
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3566
		{
			return unimplemented(sqllex, "create sequence CACHE option")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3567
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3569
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3571
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: nil}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3574
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: nil}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3577
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3591
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = nil
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3631
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3646
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[8].union.idxElems(),
				Storing:     sqlDollar[10].union.nameList(),
				Interleave:  sqlDollar[11].union.interleave(),
				PartitionBy: sqlDollar[12].union.partitionBy(),
				Inverted:    sqlDollar[13].union.bool(),
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
				PartitionBy: sqlDollar[15].union.partitionBy(),
				Inverted:    sqlDollar[16].union.bool(),
			}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3709
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = true
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = false
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = true
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = false
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3750
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3751
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3754
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3755
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = tree.Descending
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 689:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3806
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3808
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = true
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = false
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3851
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3852
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3863
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &tree.ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3874
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3885
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3889
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3891
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3910
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3915
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3928
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3933
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3942
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3943
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3944
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3952
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3959
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3962
		{
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3963
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.str = ""
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.str = ""
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4009
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4022
		{
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4024
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 756:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4088
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.str = ""
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.str = ""
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.str = ""
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.str = ""
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4131
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4132
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4158
		{
			return helpWith(sqllex, "INSERT")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4176
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4232
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4246
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4250
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4258
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 791:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4295
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4299
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4300
		{
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4324
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4404
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4423
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4458
		{
			return helpWith(sqllex, "SELECT")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4459
		{
			return helpWith(sqllex, "VALUES")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4460
		{
			return helpWith(sqllex, "TABLE")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4521
		{
			return helpWith(sqllex, "SELECT")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4565
		{
			return helpWith(sqllex, "TABLE")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4580
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4581
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 836:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4603
		{
		}
	case 838:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4604
		{
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4611
		{
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4614
		{
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4615
		{
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = true
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = false
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = false
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = true
		}
	case 847:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4644
		{
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4645
		{
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4692
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4716
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4768
		{
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4769
		{
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4772
		{
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4773
		{
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 881:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4831
		{
			return helpWith(sqllex, "VALUES")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4833
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4848
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4870
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4886
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4948
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4968
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = nil
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = true
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = false
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5121
		{
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5122
		{
		}
	case 933:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = tree.TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5196
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5210
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5218
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5242
		{
			/* SKIP DOC */
			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 961:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5268
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5331
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = nil
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5402
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5406
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5422
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5445
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5463
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5467
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5518
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5529
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5545
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5557
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5575
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5580
		{
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5581
		{
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5590
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5610
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = tree.Year
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = tree.Month
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = tree.Day
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5637
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5641
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = tree.Month
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5651
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5667
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5671
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5675
		{
			sqlVAL.union.val = nil
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5681
		{
			sqlVAL.union.val = tree.Second
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5684
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5708
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5716
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5719
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5736
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5740
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5744
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5748
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5760
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5780
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5800
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5812
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5828
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5832
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("JSON_REMOVE_PATH"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5876
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5880
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5884
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5888
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5892
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5896
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5927
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5929
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5933
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5937
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5941
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5953
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5961
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5965
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5969
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5973
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5977
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5981
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5985
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5989
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5993
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6010
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6041
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6045
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6073
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6077
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6081
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6085
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6089
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6093
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6097
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6101
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6105
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6109
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6113
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6117
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6121
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6125
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6129
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6133
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6137
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6141
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6155
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6163
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6199
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6204
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6213
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6218
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6223
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6227
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6231
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6235
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6239
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6247
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6251
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6254
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6255
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6257
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6261
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6265
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6268
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6279
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6286
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6295
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6296
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6300
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6302
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6306
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6310
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6313
		{
			return unimplemented(sqllex, "current role")
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6315
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6319
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6323
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6327
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6331
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6335
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6339
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6343
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6347
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6354
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6357
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6359
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6362
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6364
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6367
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6369
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6372
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6374
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6377
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6379
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6382
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6384
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6387
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6389
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6393
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6396
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6397
		{
			return unimplemented(sqllex, "treat")
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6399
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6403
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6407
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6411
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6415
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6418
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6420
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6423
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6428
		{
			return unimplemented(sqllex, "within group")
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6429
		{
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6433
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6437
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6444
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6448
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6454
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6458
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6464
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6472
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6476
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6480
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6487
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6506
		{
			sqlVAL.str = ""
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6512
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6516
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6526
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6527
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6528
		{
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6531
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6532
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6538
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6539
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6540
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6541
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6542
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6553
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6557
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6563
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6569
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6575
		{
			sqlVAL.union.val = tree.Any
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6579
		{
			sqlVAL.union.val = tree.Some
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6583
		{
			sqlVAL.union.val = tree.All
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6588
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6589
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6590
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6591
		{
			sqlVAL.union.val = tree.Div
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6592
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6593
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6594
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6595
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6596
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6597
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6598
		{
			sqlVAL.union.val = tree.LT
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6599
		{
			sqlVAL.union.val = tree.GT
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6600
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6601
		{
			sqlVAL.union.val = tree.LE
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6602
		{
			sqlVAL.union.val = tree.GE
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6603
		{
			sqlVAL.union.val = tree.NE
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6607
		{
			sqlVAL.union.val = tree.Like
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6608
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6609
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6610
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6622
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6628
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6632
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6638
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6642
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6648
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6652
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6658
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6662
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6668
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6672
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6694
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6698
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6702
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6708
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6715
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6719
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6736
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6740
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6744
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6748
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6752
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6758
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6764
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6770
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6774
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6778
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6784
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6788
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6799
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6806
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6810
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6816
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6822
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6826
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6833
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6839
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6843
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6850
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6856
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6865
		{
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6866
		{
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6870
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6874
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6880
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6889
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6893
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6897
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6905
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6909
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6915
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6919
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6925
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6932
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see tree.TableNameWithIndex).
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6954
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6958
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6962
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6968
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6972
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6978
		{
			sqlVAL.union.val = sqlDollar[1].union.nameList()
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6982
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6989
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6993
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6997
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7001
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:7004
		{
			return unimplemented(sqllex, "func const")
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7006
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7010
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7013
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7015
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7019
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7023
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7030
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7034
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7043
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7054
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7064
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7160
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7167
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7171
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7175
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7189
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7193
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7197
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7210
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7222
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7226
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7230
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7244
		{
			sqlVAL.str = ""
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7250
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7254
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
