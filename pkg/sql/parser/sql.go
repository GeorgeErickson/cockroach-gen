// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:24
package parser

import __yyfmt__ "fmt"

//line sql.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:56

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: tblDef().
//
func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql.y:549
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INTERLEAVE = lex.INTERLEAVE
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:7747

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 55,
	410, 55,
	-2, 853,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	163, 691,
	-2, 0,
	-1, 58,
	101, 853,
	167, 853,
	358, 853,
	359, 853,
	-2, 0,
	-1, 71,
	112, 827,
	124, 827,
	175, 827,
	200, 827,
	228, 827,
	235, 827,
	355, 827,
	-2, 816,
	-1, 106,
	190, 521,
	346, 521,
	-2, 0,
	-1, 111,
	4, 855,
	20, 855,
	21, 855,
	22, 855,
	23, 855,
	25, 855,
	30, 855,
	35, 855,
	36, 855,
	37, 855,
	38, 855,
	39, 855,
	40, 855,
	41, 855,
	42, 855,
	43, 855,
	44, 855,
	46, 855,
	47, 855,
	48, 855,
	49, 855,
	50, 855,
	51, 855,
	54, 855,
	55, 855,
	56, 855,
	58, 855,
	59, 855,
	63, 855,
	64, 855,
	65, 855,
	66, 855,
	67, 855,
	69, 855,
	70, 855,
	71, 855,
	72, 855,
	74, 855,
	76, 855,
	77, 855,
	80, 855,
	81, 855,
	82, 855,
	90, 855,
	91, 855,
	92, 855,
	93, 855,
	94, 855,
	95, 855,
	96, 855,
	97, 855,
	99, 855,
	101, 855,
	103, 855,
	106, 855,
	107, 855,
	109, 855,
	113, 855,
	114, 855,
	115, 855,
	116, 855,
	117, 855,
	118, 855,
	119, 855,
	120, 855,
	121, 855,
	129, 855,
	130, 855,
	131, 855,
	132, 855,
	133, 855,
	135, 855,
	137, 855,
	141, 855,
	143, 855,
	144, 855,
	146, 855,
	148, 855,
	149, 855,
	150, 855,
	151, 855,
	152, 855,
	153, 855,
	154, 855,
	155, 855,
	158, 855,
	162, 855,
	164, 855,
	167, 855,
	168, 855,
	169, 855,
	170, 855,
	171, 855,
	172, 855,
	173, 855,
	174, 855,
	176, 855,
	178, 855,
	180, 855,
	181, 855,
	182, 855,
	184, 855,
	185, 855,
	188, 855,
	189, 855,
	190, 855,
	192, 855,
	193, 855,
	195, 855,
	197, 855,
	198, 855,
	201, 855,
	202, 855,
	205, 855,
	207, 855,
	210, 855,
	211, 855,
	212, 855,
	213, 855,
	214, 855,
	216, 855,
	217, 855,
	218, 855,
	219, 855,
	223, 855,
	224, 855,
	225, 855,
	226, 855,
	227, 855,
	229, 855,
	231, 855,
	232, 855,
	233, 855,
	236, 855,
	237, 855,
	239, 855,
	241, 855,
	242, 855,
	243, 855,
	244, 855,
	245, 855,
	246, 855,
	247, 855,
	248, 855,
	250, 855,
	251, 855,
	252, 855,
	253, 855,
	254, 855,
	256, 855,
	257, 855,
	258, 855,
	259, 855,
	260, 855,
	261, 855,
	262, 855,
	263, 855,
	265, 855,
	266, 855,
	267, 855,
	268, 855,
	269, 855,
	271, 855,
	272, 855,
	273, 855,
	274, 855,
	275, 855,
	276, 855,
	277, 855,
	279, 855,
	282, 855,
	283, 855,
	284, 855,
	285, 855,
	286, 855,
	288, 855,
	289, 855,
	290, 855,
	291, 855,
	292, 855,
	293, 855,
	294, 855,
	296, 855,
	297, 855,
	298, 855,
	299, 855,
	300, 855,
	301, 855,
	302, 855,
	303, 855,
	304, 855,
	306, 855,
	307, 855,
	308, 855,
	309, 855,
	311, 855,
	312, 855,
	313, 855,
	314, 855,
	316, 855,
	317, 855,
	318, 855,
	319, 855,
	320, 855,
	321, 855,
	322, 855,
	323, 855,
	324, 855,
	326, 855,
	327, 855,
	329, 855,
	330, 855,
	332, 855,
	333, 855,
	334, 855,
	335, 855,
	336, 855,
	337, 855,
	338, 855,
	339, 855,
	341, 855,
	342, 855,
	343, 855,
	346, 855,
	347, 855,
	348, 855,
	349, 855,
	351, 855,
	352, 855,
	353, 855,
	354, 855,
	357, 855,
	358, 855,
	359, 855,
	360, 855,
	362, 855,
	364, 855,
	365, 855,
	366, 855,
	367, 855,
	368, 855,
	369, 855,
	372, 855,
	378, 855,
	379, 855,
	381, 855,
	382, 855,
	383, 855,
	-2, 0,
	-1, 131,
	112, 826,
	124, 826,
	175, 826,
	200, 826,
	228, 826,
	235, 826,
	355, 826,
	-2, 819,
	-1, 136,
	1, 749,
	180, 749,
	256, 749,
	260, 749,
	409, 749,
	410, 749,
	-2, 0,
	-1, 138,
	1, 749,
	409, 749,
	410, 749,
	-2, 0,
	-1, 139,
	1, 749,
	409, 749,
	410, 749,
	-2, 0,
	-1, 140,
	1, 753,
	409, 753,
	410, 753,
	-2, 0,
	-1, 166,
	4, 862,
	5, 862,
	6, 862,
	7, 862,
	8, 862,
	9, 862,
	20, 862,
	21, 862,
	22, 862,
	23, 862,
	25, 862,
	30, 862,
	31, 862,
	35, 862,
	36, 862,
	37, 862,
	38, 862,
	39, 862,
	40, 862,
	41, 862,
	42, 862,
	43, 862,
	44, 862,
	46, 862,
	47, 862,
	48, 862,
	49, 862,
	50, 862,
	51, 862,
	52, 862,
	53, 862,
	54, 862,
	55, 862,
	56, 862,
	58, 862,
	59, 862,
	61, 862,
	63, 862,
	64, 862,
	65, 862,
	66, 862,
	67, 862,
	69, 862,
	70, 862,
	71, 862,
	72, 862,
	74, 862,
	76, 862,
	77, 862,
	79, 862,
	80, 862,
	81, 862,
	82, 862,
	83, 862,
	84, 862,
	85, 862,
	86, 862,
	88, 862,
	89, 862,
	90, 862,
	91, 862,
	92, 862,
	93, 862,
	94, 862,
	95, 862,
	96, 862,
	97, 862,
	98, 862,
	99, 862,
	101, 862,
	103, 862,
	106, 862,
	107, 862,
	109, 862,
	113, 862,
	114, 862,
	115, 862,
	116, 862,
	117, 862,
	118, 862,
	119, 862,
	120, 862,
	121, 862,
	122, 862,
	123, 862,
	129, 862,
	130, 862,
	131, 862,
	132, 862,
	133, 862,
	135, 862,
	137, 862,
	140, 862,
	141, 862,
	143, 862,
	144, 862,
	146, 862,
	148, 862,
	149, 862,
	150, 862,
	151, 862,
	152, 862,
	153, 862,
	154, 862,
	155, 862,
	156, 862,
	158, 862,
	162, 862,
	164, 862,
	166, 862,
	167, 862,
	168, 862,
	169, 862,
	170, 862,
	171, 862,
	172, 862,
	173, 862,
	174, 862,
	176, 862,
	178, 862,
	179, 862,
	180, 862,
	181, 862,
	182, 862,
	183, 862,
	184, 862,
	185, 862,
	188, 862,
	189, 862,
	190, 862,
	192, 862,
	193, 862,
	195, 862,
	196, 862,
	197, 862,
	198, 862,
	199, 862,
	201, 862,
	202, 862,
	205, 862,
	207, 862,
	208, 862,
	209, 862,
	210, 862,
	211, 862,
	212, 862,
	213, 862,
	214, 862,
	215, 862,
	216, 862,
	217, 862,
	218, 862,
	219, 862,
	220, 862,
	222, 862,
	223, 862,
	224, 862,
	225, 862,
	226, 862,
	227, 862,
	229, 862,
	232, 862,
	233, 862,
	236, 862,
	237, 862,
	238, 862,
	239, 862,
	240, 862,
	241, 862,
	242, 862,
	243, 862,
	244, 862,
	245, 862,
	246, 862,
	247, 862,
	248, 862,
	250, 862,
	251, 862,
	252, 862,
	253, 862,
	254, 862,
	256, 862,
	257, 862,
	258, 862,
	259, 862,
	260, 862,
	261, 862,
	262, 862,
	263, 862,
	265, 862,
	266, 862,
	267, 862,
	268, 862,
	269, 862,
	271, 862,
	272, 862,
	273, 862,
	274, 862,
	275, 862,
	276, 862,
	277, 862,
	279, 862,
	280, 862,
	282, 862,
	283, 862,
	284, 862,
	285, 862,
	286, 862,
	288, 862,
	289, 862,
	290, 862,
	291, 862,
	292, 862,
	293, 862,
	294, 862,
	296, 862,
	297, 862,
	298, 862,
	299, 862,
	300, 862,
	301, 862,
	302, 862,
	303, 862,
	304, 862,
	305, 862,
	306, 862,
	307, 862,
	308, 862,
	309, 862,
	310, 862,
	311, 862,
	312, 862,
	313, 862,
	314, 862,
	316, 862,
	317, 862,
	318, 862,
	319, 862,
	320, 862,
	321, 862,
	322, 862,
	323, 862,
	324, 862,
	326, 862,
	327, 862,
	329, 862,
	330, 862,
	332, 862,
	333, 862,
	334, 862,
	335, 862,
	336, 862,
	337, 862,
	338, 862,
	339, 862,
	341, 862,
	342, 862,
	343, 862,
	346, 862,
	347, 862,
	348, 862,
	349, 862,
	350, 862,
	351, 862,
	352, 862,
	353, 862,
	354, 862,
	357, 862,
	358, 862,
	359, 862,
	360, 862,
	361, 862,
	362, 862,
	364, 862,
	365, 862,
	366, 862,
	367, 862,
	368, 862,
	369, 862,
	372, 862,
	378, 862,
	379, 862,
	381, 862,
	382, 862,
	383, 862,
	384, 862,
	392, 862,
	397, 862,
	398, 862,
	399, 862,
	406, 862,
	412, 862,
	-2, 0,
	-1, 169,
	1, 55,
	410, 55,
	-2, 853,
	-1, 579,
	139, 1506,
	344, 1506,
	389, 1506,
	408, 1506,
	-2, 0,
	-1, 580,
	139, 1445,
	344, 1445,
	389, 1445,
	408, 1445,
	-2, 0,
	-1, 582,
	139, 1572,
	344, 1572,
	389, 1572,
	408, 1572,
	-2, 0,
	-1, 584,
	139, 1597,
	344, 1597,
	389, 1597,
	408, 1597,
	-2, 0,
	-1, 591,
	139, 1511,
	344, 1511,
	389, 1511,
	408, 1511,
	-2, 397,
	-1, 625,
	1, 492,
	405, 492,
	407, 492,
	409, 492,
	410, 492,
	-2, 0,
	-1, 626,
	1, 560,
	136, 560,
	405, 560,
	407, 560,
	409, 560,
	410, 560,
	-2, 0,
	-1, 632,
	1, 507,
	405, 507,
	407, 507,
	409, 507,
	410, 507,
	-2, 0,
	-1, 634,
	1, 511,
	405, 511,
	407, 511,
	409, 511,
	410, 511,
	-2, 0,
	-1, 637,
	1, 522,
	405, 522,
	407, 522,
	409, 522,
	410, 522,
	-2, 0,
	-1, 638,
	1, 528,
	405, 528,
	407, 528,
	409, 528,
	410, 528,
	-2, 0,
	-1, 639,
	1, 531,
	405, 531,
	407, 531,
	409, 531,
	410, 531,
	-2, 0,
	-1, 643,
	1, 545,
	405, 545,
	407, 545,
	409, 545,
	410, 545,
	-2, 0,
	-1, 644,
	1, 547,
	405, 547,
	407, 547,
	409, 547,
	410, 547,
	-2, 0,
	-1, 670,
	124, 864,
	200, 864,
	228, 864,
	-2, 822,
	-1, 678,
	124, 863,
	200, 863,
	228, 863,
	-2, 820,
	-1, 705,
	406, 1688,
	-2, 1134,
	-1, 706,
	406, 1689,
	-2, 1135,
	-1, 737,
	406, 1407,
	-2, 1398,
	-1, 738,
	5, 994,
	406, 1420,
	-2, 1411,
	-1, 739,
	406, 1421,
	-2, 1412,
	-1, 746,
	5, 979,
	-2, 1440,
	-1, 747,
	5, 980,
	-2, 1624,
	-1, 748,
	5, 981,
	-2, 1623,
	-1, 749,
	5, 982,
	-2, 1594,
	-1, 750,
	5, 983,
	-2, 1653,
	-1, 751,
	5, 984,
	-2, 1662,
	-1, 752,
	5, 985,
	-2, 1663,
	-1, 753,
	5, 986,
	-2, 1664,
	-1, 754,
	5, 987,
	-2, 1665,
	-1, 755,
	5, 988,
	-2, 1667,
	-1, 756,
	5, 989,
	-2, 1675,
	-1, 757,
	5, 990,
	-2, 1642,
	-1, 758,
	5, 991,
	-2, 1619,
	-1, 759,
	5, 992,
	-2, 1520,
	-1, 760,
	5, 993,
	-2, 1492,
	-1, 761,
	5, 1040,
	406, 1040,
	-2, 1649,
	-1, 779,
	5, 1005,
	-2, 1618,
	-1, 780,
	5, 1032,
	-2, 1620,
	-1, 781,
	5, 1015,
	-2, 1621,
	-1, 782,
	5, 1014,
	-2, 1622,
	-1, 783,
	5, 1032,
	-2, 1625,
	-1, 784,
	5, 1032,
	-2, 1626,
	-1, 785,
	5, 1033,
	-2, 1629,
	-1, 786,
	5, 997,
	-2, 1630,
	-1, 787,
	5, 997,
	-2, 1631,
	-1, 790,
	5, 1022,
	-2, 1635,
	-1, 791,
	5, 1007,
	-2, 1636,
	-1, 792,
	5, 1008,
	-2, 1637,
	-1, 794,
	5, 998,
	-2, 1643,
	-1, 795,
	5, 999,
	-2, 1644,
	-1, 796,
	5, 1000,
	-2, 1645,
	-1, 797,
	5, 1001,
	-2, 1646,
	-1, 798,
	5, 1002,
	-2, 1647,
	-1, 799,
	5, 1003,
	-2, 1648,
	-1, 800,
	5, 967,
	-2, 1650,
	-1, 801,
	5, 968,
	-2, 1651,
	-1, 803,
	5, 997,
	-2, 1655,
	-1, 806,
	5, 1006,
	-2, 1660,
	-1, 807,
	5, 1004,
	-2, 1666,
	-1, 808,
	5, 1030,
	-2, 1668,
	-1, 810,
	5, 1034,
	-2, 1670,
	-1, 811,
	5, 1036,
	-2, 1671,
	-1, 812,
	5, 1038,
	-2, 1672,
	-1, 815,
	5, 1029,
	-2, 1677,
	-1, 881,
	406, 1420,
	-2, 1411,
	-1, 898,
	271, 1395,
	399, 1395,
	-2, 1394,
	-1, 1036,
	246, 851,
	-2, 677,
	-1, 1045,
	230, 1415,
	-2, 0,
	-1, 1088,
	1, 261,
	405, 261,
	407, 261,
	409, 261,
	410, 261,
	-2, 825,
	-1, 1091,
	4, 1676,
	10, 1676,
	11, 1676,
	13, 1676,
	14, 1676,
	15, 1676,
	16, 1676,
	17, 1676,
	18, 1676,
	20, 1676,
	21, 1676,
	22, 1676,
	23, 1676,
	25, 1676,
	28, 1676,
	30, 1676,
	32, 1676,
	35, 1676,
	36, 1676,
	37, 1676,
	38, 1676,
	39, 1676,
	40, 1676,
	41, 1676,
	42, 1676,
	43, 1676,
	44, 1676,
	46, 1676,
	47, 1676,
	48, 1676,
	49, 1676,
	50, 1676,
	51, 1676,
	54, 1676,
	55, 1676,
	56, 1676,
	58, 1676,
	59, 1676,
	60, 1676,
	63, 1676,
	64, 1676,
	65, 1676,
	66, 1676,
	67, 1676,
	68, 1676,
	69, 1676,
	70, 1676,
	71, 1676,
	72, 1676,
	74, 1676,
	75, 1676,
	76, 1676,
	77, 1676,
	79, 1676,
	80, 1676,
	81, 1676,
	82, 1676,
	90, 1676,
	91, 1676,
	92, 1676,
	93, 1676,
	94, 1676,
	95, 1676,
	96, 1676,
	97, 1676,
	99, 1676,
	101, 1676,
	103, 1676,
	106, 1676,
	107, 1676,
	109, 1676,
	113, 1676,
	114, 1676,
	115, 1676,
	116, 1676,
	117, 1676,
	118, 1676,
	119, 1676,
	120, 1676,
	121, 1676,
	125, 1676,
	126, 1676,
	127, 1676,
	128, 1676,
	129, 1676,
	130, 1676,
	131, 1676,
	132, 1676,
	133, 1676,
	134, 1676,
	135, 1676,
	137, 1676,
	140, 1676,
	141, 1676,
	143, 1676,
	144, 1676,
	146, 1676,
	148, 1676,
	149, 1676,
	150, 1676,
	151, 1676,
	152, 1676,
	153, 1676,
	154, 1676,
	155, 1676,
	156, 1676,
	157, 1676,
	158, 1676,
	159, 1676,
	160, 1676,
	161, 1676,
	162, 1676,
	164, 1676,
	166, 1676,
	167, 1676,
	168, 1676,
	169, 1676,
	170, 1676,
	171, 1676,
	172, 1676,
	173, 1676,
	174, 1676,
	176, 1676,
	178, 1676,
	179, 1676,
	180, 1676,
	181, 1676,
	182, 1676,
	183, 1676,
	184, 1676,
	185, 1676,
	186, 1676,
	187, 1676,
	188, 1676,
	189, 1676,
	190, 1676,
	192, 1676,
	193, 1676,
	195, 1676,
	196, 1676,
	197, 1676,
	198, 1676,
	199, 1676,
	201, 1676,
	202, 1676,
	205, 1676,
	206, 1676,
	207, 1676,
	210, 1676,
	211, 1676,
	212, 1676,
	213, 1676,
	214, 1676,
	215, 1676,
	216, 1676,
	217, 1676,
	218, 1676,
	219, 1676,
	223, 1676,
	224, 1676,
	225, 1676,
	226, 1676,
	227, 1676,
	229, 1676,
	232, 1676,
	233, 1676,
	234, 1676,
	236, 1676,
	237, 1676,
	239, 1676,
	241, 1676,
	242, 1676,
	243, 1676,
	244, 1676,
	245, 1676,
	246, 1676,
	247, 1676,
	248, 1676,
	250, 1676,
	251, 1676,
	252, 1676,
	253, 1676,
	254, 1676,
	256, 1676,
	257, 1676,
	258, 1676,
	259, 1676,
	260, 1676,
	261, 1676,
	262, 1676,
	263, 1676,
	265, 1676,
	266, 1676,
	267, 1676,
	268, 1676,
	269, 1676,
	270, 1676,
	271, 1676,
	272, 1676,
	273, 1676,
	274, 1676,
	275, 1676,
	276, 1676,
	277, 1676,
	279, 1676,
	280, 1676,
	282, 1676,
	283, 1676,
	284, 1676,
	285, 1676,
	286, 1676,
	287, 1676,
	288, 1676,
	289, 1676,
	290, 1676,
	291, 1676,
	292, 1676,
	293, 1676,
	294, 1676,
	296, 1676,
	297, 1676,
	298, 1676,
	299, 1676,
	300, 1676,
	301, 1676,
	302, 1676,
	303, 1676,
	304, 1676,
	306, 1676,
	307, 1676,
	308, 1676,
	309, 1676,
	310, 1676,
	311, 1676,
	312, 1676,
	313, 1676,
	314, 1676,
	316, 1676,
	317, 1676,
	318, 1676,
	319, 1676,
	320, 1676,
	321, 1676,
	322, 1676,
	323, 1676,
	324, 1676,
	326, 1676,
	327, 1676,
	329, 1676,
	330, 1676,
	332, 1676,
	333, 1676,
	334, 1676,
	335, 1676,
	336, 1676,
	337, 1676,
	338, 1676,
	339, 1676,
	341, 1676,
	342, 1676,
	343, 1676,
	346, 1676,
	347, 1676,
	348, 1676,
	349, 1676,
	351, 1676,
	352, 1676,
	353, 1676,
	354, 1676,
	357, 1676,
	358, 1676,
	359, 1676,
	360, 1676,
	362, 1676,
	364, 1676,
	365, 1676,
	366, 1676,
	367, 1676,
	368, 1676,
	369, 1676,
	372, 1676,
	378, 1676,
	379, 1676,
	381, 1676,
	382, 1676,
	383, 1676,
	384, 1676,
	385, 1676,
	387, 1676,
	388, 1676,
	389, 1676,
	390, 1676,
	391, 1676,
	392, 1676,
	394, 1676,
	395, 1676,
	396, 1676,
	397, 1676,
	398, 1676,
	399, 1676,
	400, 1676,
	401, 1676,
	402, 1676,
	404, 1676,
	407, 1676,
	408, 1676,
	411, 1676,
	412, 1676,
	-2, 0,
	-1, 1109,
	139, 1572,
	344, 1572,
	389, 1572,
	408, 1572,
	-2, 0,
	-1, 1134,
	139, 1597,
	344, 1597,
	389, 1597,
	408, 1597,
	-2, 0,
	-1, 1135,
	180, 761,
	256, 761,
	260, 761,
	-2, 384,
	-1, 1210,
	124, 863,
	200, 863,
	228, 863,
	-2, 823,
	-1, 1292,
	112, 827,
	124, 827,
	175, 827,
	200, 827,
	228, 827,
	235, 827,
	355, 827,
	-2, 1175,
	-1, 1338,
	407, 1290,
	-2, 0,
	-1, 1345,
	180, 761,
	256, 761,
	260, 761,
	-2, 756,
	-1, 1374,
	407, 1290,
	-2, 0,
	-1, 1378,
	112, 827,
	124, 827,
	175, 827,
	200, 827,
	228, 827,
	235, 827,
	355, 827,
	-2, 926,
	-1, 1567,
	180, 761,
	256, 761,
	260, 761,
	-2, 386,
	-1, 1673,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	186, 0,
	187, 0,
	387, 0,
	388, 0,
	389, 0,
	390, 0,
	391, 0,
	-2, 1075,
	-1, 1674,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	186, 0,
	187, 0,
	387, 0,
	388, 0,
	389, 0,
	390, 0,
	391, 0,
	-2, 1076,
	-1, 1675,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	186, 0,
	187, 0,
	387, 0,
	388, 0,
	389, 0,
	390, 0,
	391, 0,
	-2, 1077,
	-1, 1676,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	186, 0,
	187, 0,
	387, 0,
	388, 0,
	389, 0,
	390, 0,
	391, 0,
	-2, 1078,
	-1, 1677,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	186, 0,
	187, 0,
	387, 0,
	388, 0,
	389, 0,
	390, 0,
	391, 0,
	-2, 1079,
	-1, 1678,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	186, 0,
	187, 0,
	387, 0,
	388, 0,
	389, 0,
	390, 0,
	391, 0,
	-2, 1080,
	-1, 1679,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	186, 0,
	187, 0,
	387, 0,
	388, 0,
	389, 0,
	390, 0,
	391, 0,
	-2, 1081,
	-1, 1680,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	186, 0,
	187, 0,
	387, 0,
	388, 0,
	389, 0,
	390, 0,
	391, 0,
	-2, 1082,
	-1, 1692,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	186, 0,
	187, 0,
	387, 0,
	388, 0,
	389, 0,
	390, 0,
	391, 0,
	-2, 1094,
	-1, 1693,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	186, 0,
	187, 0,
	387, 0,
	388, 0,
	389, 0,
	390, 0,
	391, 0,
	-2, 1095,
	-1, 1694,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	186, 0,
	187, 0,
	387, 0,
	388, 0,
	389, 0,
	390, 0,
	391, 0,
	-2, 1096,
	-1, 1697,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	199, 0,
	310, 0,
	384, 0,
	392, 0,
	-2, 1101,
	-1, 1703,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	199, 0,
	310, 0,
	384, 0,
	392, 0,
	-2, 1103,
	-1, 1705,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	199, 0,
	310, 0,
	384, 0,
	392, 0,
	-2, 1107,
	-1, 1706,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	199, 0,
	310, 0,
	384, 0,
	392, 0,
	-2, 1108,
	-1, 1707,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	199, 0,
	310, 0,
	384, 0,
	392, 0,
	-2, 1109,
	-1, 1708,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	199, 0,
	310, 0,
	384, 0,
	392, 0,
	-2, 1110,
	-1, 1784,
	5, 994,
	139, 1301,
	406, 1420,
	-2, 1411,
	-1, 1785,
	139, 1302,
	-2, 1614,
	-1, 1786,
	139, 1303,
	-2, 1510,
	-1, 1787,
	139, 1304,
	-2, 1465,
	-1, 1788,
	139, 1305,
	-2, 1486,
	-1, 1789,
	139, 1306,
	-2, 1509,
	-1, 1790,
	139, 1307,
	-2, 1568,
	-1, 1864,
	1, 927,
	79, 927,
	112, 927,
	124, 927,
	140, 927,
	145, 927,
	147, 927,
	166, 927,
	175, 927,
	183, 927,
	196, 927,
	200, 927,
	215, 927,
	228, 927,
	230, 927,
	235, 927,
	278, 927,
	280, 927,
	355, 927,
	363, 927,
	375, 927,
	376, 927,
	386, 927,
	405, 927,
	407, 927,
	409, 927,
	410, 927,
	411, 927,
	-2, 926,
	-1, 1866,
	406, 1399,
	-2, 1409,
	-1, 1943,
	407, 1358,
	411, 1358,
	-2, 1387,
	-1, 2063,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	199, 0,
	310, 0,
	384, 0,
	392, 0,
	-2, 1102,
	-1, 2064,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	199, 0,
	310, 0,
	384, 0,
	392, 0,
	-2, 1104,
	-1, 2069,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	199, 0,
	310, 0,
	384, 0,
	392, 0,
	-2, 1105,
	-1, 2087,
	240, 1261,
	-2, 1263,
	-1, 2290,
	246, 851,
	-2, 677,
	-1, 2353,
	180, 761,
	256, 761,
	260, 761,
	-2, 383,
	-1, 2368,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	199, 0,
	310, 0,
	384, 0,
	392, 0,
	-2, 1106,
	-1, 2373,
	179, 0,
	-2, 1122,
	-1, 2382,
	240, 1262,
	-2, 1264,
	-1, 2431,
	13, 0,
	14, 0,
	15, 0,
	387, 0,
	388, 0,
	389, 0,
	-2, 1152,
	-1, 2432,
	13, 0,
	14, 0,
	15, 0,
	387, 0,
	388, 0,
	389, 0,
	-2, 1153,
	-1, 2433,
	13, 0,
	14, 0,
	15, 0,
	387, 0,
	388, 0,
	389, 0,
	-2, 1154,
	-1, 2437,
	13, 0,
	14, 0,
	15, 0,
	387, 0,
	388, 0,
	389, 0,
	-2, 1158,
	-1, 2438,
	13, 0,
	14, 0,
	15, 0,
	387, 0,
	388, 0,
	389, 0,
	-2, 1159,
	-1, 2439,
	13, 0,
	14, 0,
	15, 0,
	387, 0,
	388, 0,
	389, 0,
	-2, 1160,
	-1, 2478,
	406, 1400,
	-2, 1410,
	-1, 2591,
	179, 0,
	-2, 1123,
	-1, 2594,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	199, 0,
	310, 0,
	384, 0,
	392, 0,
	-2, 1126,
	-1, 2595,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	199, 0,
	310, 0,
	384, 0,
	392, 0,
	-2, 1128,
	-1, 2737,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	199, 0,
	310, 0,
	384, 0,
	392, 0,
	-2, 1127,
	-1, 2738,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	156, 0,
	157, 0,
	199, 0,
	310, 0,
	384, 0,
	392, 0,
	-2, 1129,
	-1, 2748,
	179, 0,
	-2, 1161,
	-1, 2836,
	179, 0,
	-2, 1162,
	-1, 2934,
	38, 0,
	156, 0,
	199, 0,
	310, 0,
	384, 0,
	392, 0,
	-2, 1617,
}

const sqlPrivate = 57344

const sqlLast = 54189

var sqlAct = [...]int{

	739, 2992, 2692, 2529, 2942, 1734, 2933, 2997, 1968, 2909,
	2912, 2776, 2944, 2896, 2943, 2013, 2910, 2403, 2765, 1976,
	2840, 2216, 1021, 2487, 2932, 1660, 2728, 2705, 736, 713,
	2304, 902, 2545, 2661, 1009, 2646, 1078, 1720, 1499, 1213,
	209, 2550, 2299, 2488, 209, 2753, 1945, 2339, 2337, 2309,
	1965, 209, 1042, 2297, 1941, 895, 679, 1500, 209, 2204,
	209, 2163, 737, 209, 209, 2057, 209, 209, 917, 2566,
	1372, 911, 1074, 209, 2180, 1858, 462, 1377, 2626, 1977,
	1353, 209, 1451, 1452, 1944, 1448, 1457, 1460, 1878, 1930,
	1404, 1859, 2456, 1733, 1296, 2191, 1651, 2162, 2841, 1732,
	510, 531, 27, 1646, 2099, 507, 1299, 1592, 1605, 1345,
	2308, 1869, 1759, 2053, 70, 2693, 205, 1081, 2273, 1386,
	1420, 1388, 722, 1354, 1449, 1741, 687, 125, 1717, 1426,
	868, 1137, 1905, 1931, 543, 1324, 1753, 1326, 1970, 1942,
	205, 904, 1948, 1844, 1438, 1780, 1829, 1089, 1071, 1363,
	1287, 589, 703, 872, 1214, 1212, 850, 1821, 131, 1591,
	569, 209, 209, 1852, 199, 735, 1061, 546, 730, 1904,
	1467, 1058, 204, 132, 1344, 617, 1218, 2472, 848, 583,
	2473, 2015, 2086, 683, 1969, 125, 1475, 1381, 1861, 683,
	1932, 1373, 209, 209, 209, 907, 209, 209, 920, 920,
	562, 2366, 3025, 209, 209, 1475, 1838, 2133, 2134, 1475,
	1473, 2343, 3019, 1932, 2316, 1487, 1838, 1229, 1230, 3018,
	2315, 2990, 2968, 1838, 2287, 1434, 2660, 1838, 557, 2967,
	1429, 876, 2962, 2660, 2489, 2961, 1838, 678, 2459, 1838,
	2958, 2955, 1232, 693, 2959, 2956, 504, 1831, 684, 2952,
	2930, 555, 1120, 1434, 1434, 1229, 1230, 2892, 1262, 1263,
	1264, 1272, 1273, 1274, 2929, 2825, 1487, 1231, 1434, 914,
	898, 27, 2928, 1265, 2927, 1997, 1487, 2891, 1487, 205,
	1232, 2005, 2878, 1276, 671, 2869, 1434, 2867, 2838, 2660,
	2824, 2660, 2005, 2812, 2574, 2090, 125, 2660, 2810, 670,
	2807, 2091, 2660, 2805, 1434, 1231, 1434, 2660, 1111, 1434,
	688, 2795, 900, 1251, 2794, 1434, 2459, 2787, 1434, 1830,
	1248, 1434, 888, 892, 897, 2786, 2759, 1570, 2574, 2660,
	1434, 2139, 538, 2739, 2686, 2682, 1920, 2005, 1838, 1838,
	852, 1237, 2659, 39, 1867, 2444, 2660, 2593, 1014, 851,
	851, 2005, 2379, 854, 2564, 855, 865, 42, 2557, 1838,
	2556, 2279, 2056, 2035, 2557, 2098, 1259, 1260, 1261, 1349,
	1254, 1255, 1256, 1257, 2468, 1112, 2462, 2377, 2469, 1237,
	1838, 1838, 2328, 2177, 2128, 537, 2279, 1838, 1838, 2127,
	1736, 1012, 2121, 1838, 2133, 2134, 2122, 169, 1108, 2317,
	1107, 1269, 1277, 2149, 1259, 1260, 1261, 1106, 2120, 1105,
	2639, 1476, 1838, 1252, 539, 1104, 2024, 1103, 2318, 777,
	1838, 57, 541, 1102, 1275, 2004, 58, 1229, 1230, 2005,
	1476, 1246, 1247, 1993, 1476, 1936, 1837, 1838, 1491, 1434,
	1838, 1101, 1492, 1100, 1267, 1589, 1099, 1098, 1097, 1096,
	1095, 1252, 1232, 1094, 1093, 1092, 166, 166, 60, 1756,
	856, 853, 677, 676, 1973, 675, 674, 673, 669, 668,
	667, 209, 209, 209, 907, 907, 209, 1231, 666, 209,
	665, 1940, 209, 1112, 2150, 1251, 2315, 664, 209, 663,
	662, 661, 168, 168, 1253, 660, 1434, 659, 209, 209,
	209, 209, 209, 907, 907, 655, 654, 653, 615, 614,
	907, 613, 612, 611, 1757, 1258, 610, 2600, 2139, 1830,
	609, 608, 1297, 607, 1112, 606, 605, 604, 1032, 167,
	167, 603, 1253, 602, 601, 600, 599, 598, 597, 160,
	1082, 209, 1254, 1255, 1256, 1257, 1483, 161, 596, 1035,
	1047, 1237, 209, 595, 61, 1270, 594, 593, 578, 577,
	576, 575, 574, 1772, 573, 1474, 495, 133, 133, 1630,
	1770, 2558, 209, 1075, 1758, 1755, 1259, 1260, 1261, 494,
	468, 134, 63, 209, 64, 467, 466, 457, 870, 456,
	2149, 1036, 1039, 2143, 2135, 2136, 2137, 2138, 2140, 2141,
	189, 188, 166, 2001, 1233, 1234, 1235, 1236, 1238, 1239,
	2359, 187, 186, 540, 39, 185, 106, 184, 1060, 183,
	182, 181, 907, 1252, 684, 180, 179, 178, 42, 1268,
	177, 176, 1243, 1244, 1250, 1249, 1245, 1271, 168, 1242,
	1240, 1241, 1233, 1234, 1235, 1236, 1238, 1239, 538, 175,
	174, 1090, 173, 1229, 1230, 172, 2002, 209, 1760, 39,
	171, 166, 170, 2528, 2212, 1065, 1068, 2096, 2045, 1937,
	1934, 2150, 1768, 42, 1376, 167, 1766, 1595, 1232, 1385,
	1303, 1151, 1229, 1230, 160, 2003, 1023, 1258, 1272, 1273,
	1274, 1016, 161, 541, 1135, 1145, 1225, 168, 2949, 1149,
	2931, 537, 2914, 1231, 1253, 2903, 2832, 1232, 2828, 2826,
	1276, 2808, 2775, 133, 2713, 2133, 2134, 1294, 2722, 2625,
	2624, 2623, 2616, 2612, 2611, 2610, 2606, 1211, 2605, 60,
	539, 2604, 1231, 2603, 167, 2596, 2573, 57, 541, 1158,
	1251, 2571, 58, 160, 2453, 2452, 1754, 2451, 2389, 2278,
	2282, 161, 2211, 2207, 2173, 1229, 1230, 2161, 2132, 2129,
	2126, 2125, 1132, 2123, 2104, 2103, 2087, 1864, 1225, 1307,
	2010, 1728, 1972, 2148, 60, 1210, 1224, 1237, 864, 3023,
	1232, 2135, 2136, 2137, 2138, 2140, 2141, 1209, 3005, 1496,
	686, 728, 3004, 1300, 1152, 1290, 1022, 1254, 1255, 1256,
	1257, 2405, 1259, 1260, 1261, 1231, 1237, 2917, 2873, 2872,
	2864, 1242, 1240, 1241, 1233, 1234, 1235, 1236, 1238, 1239,
	2133, 2134, 2863, 2332, 2859, 61, 684, 2858, 1269, 1277,
	2852, 1259, 1260, 1261, 2849, 1590, 1906, 2823, 2822, 2139,
	1722, 2771, 2750, 2697, 2052, 209, 671, 2133, 2134, 1252,
	209, 2695, 134, 63, 2681, 64, 2665, 2621, 1221, 1222,
	2575, 670, 2543, 2541, 2536, 1226, 2535, 2533, 2508, 1360,
	61, 1267, 2507, 166, 1351, 2497, 209, 2496, 1252, 1237,
	2464, 2372, 2133, 2134, 540, 2334, 2262, 106, 2246, 2226,
	2712, 2225, 1729, 2176, 2160, 2113, 2112, 134, 63, 2109,
	64, 2083, 2078, 1327, 1259, 1260, 1261, 2133, 2134, 168,
	1332, 2149, 2012, 1849, 1836, 1764, 1322, 1444, 166, 1314,
	1325, 2843, 2197, 1313, 1312, 1328, 2041, 1229, 1230, 540,
	1253, 1311, 106, 1229, 1230, 1374, 876, 1352, 1343, 1357,
	1358, 1335, 1258, 1342, 2139, 1338, 167, 1337, 1375, 1336,
	1334, 1252, 1232, 1333, 168, 160, 1330, 1329, 1232, 1253,
	869, 1320, 1370, 161, 1319, 1318, 1580, 1579, 1771, 1589,
	1586, 2139, 1317, 1371, 2721, 1769, 1316, 1231, 1315, 1304,
	1291, 1290, 1270, 1231, 133, 1131, 1116, 1086, 684, 2598,
	2570, 167, 2150, 2226, 125, 2471, 2467, 2089, 2007, 1850,
	160, 2133, 2134, 1300, 1394, 1348, 2139, 2330, 161, 1288,
	1346, 1589, 907, 209, 1382, 2300, 2149, 920, 1589, 1399,
	1403, 2718, 2577, 209, 920, 209, 209, 1379, 1350, 133,
	1427, 2139, 1253, 2576, 2023, 2474, 1932, 1376, 851, 1241,
	1233, 1234, 1235, 1236, 1238, 1239, 209, 209, 1340, 2801,
	1445, 1237, 1207, 209, 1341, 209, 1268, 209, 1148, 2266,
	1583, 209, 1126, 2261, 1271, 1456, 1242, 1240, 1241, 1233,
	1234, 1235, 1236, 1238, 1239, 1589, 2257, 1767, 2149, 2022,
	2245, 1765, 2168, 166, 2167, 2166, 2062, 1563, 1443, 205,
	2829, 2827, 1490, 1576, 2506, 1144, 1339, 2150, 1309, 2144,
	2142, 2143, 2135, 2136, 2137, 2138, 2140, 2141, 2015, 1453,
	209, 209, 209, 209, 1908, 2345, 2774, 1497, 907, 168,
	209, 209, 846, 2256, 209, 209, 1416, 2754, 731, 1432,
	209, 1464, 1969, 1462, 2407, 1742, 2950, 1565, 1524, 1242,
	1240, 1241, 1233, 1234, 1235, 1236, 1238, 1239, 1441, 1323,
	2094, 1201, 920, 2960, 1553, 847, 167, 2957, 1855, 2150,
	2311, 209, 2483, 2993, 1584, 160, 209, 2906, 1998, 209,
	1306, 2984, 209, 161, 209, 503, 209, 2983, 209, 474,
	209, 194, 863, 1060, 2951, 1433, 1199, 205, 2673, 2355,
	209, 2025, 209, 1400, 133, 1557, 205, 1229, 1230, 682,
	209, 209, 209, 840, 817, 2142, 2143, 2135, 2136, 2137,
	2138, 2140, 2141, 1186, 838, 2877, 836, 1187, 842, 3022,
	1397, 2331, 1232, 1615, 1466, 833, 1200, 1469, 209, 2800,
	2799, 2797, 920, 2075, 2135, 2136, 2137, 2138, 2140, 2141,
	2796, 1398, 1880, 1577, 1567, 205, 2522, 1231, 2690, 1471,
	1756, 2073, 2517, 1622, 1633, 502, 1494, 1624, 1389, 473,
	2516, 1390, 681, 1146, 484, 1555, 2144, 2142, 2143, 2135,
	2136, 2137, 2138, 2140, 2141, 1493, 1478, 1588, 1035, 1480,
	1495, 1564, 1482, 2480, 1554, 729, 1485, 1652, 1659, 1132,
	2479, 1871, 2108, 870, 2107, 2106, 2137, 2138, 2140, 2141,
	2105, 1294, 2511, 1382, 920, 1757, 1966, 1593, 1147, 2065,
	1746, 1816, 1598, 1581, 1233, 1234, 1235, 1236, 1238, 1239,
	1996, 1237, 683, 1883, 1925, 1239, 1778, 1871, 1389, 1919,
	485, 1390, 1915, 1604, 1896, 1783, 1783, 1704, 1870, 1794,
	1796, 2070, 1801, 1391, 1347, 1011, 1815, 1814, 209, 1824,
	209, 2071, 2876, 1662, 1393, 2076, 918, 1010, 1828, 1590,
	1587, 1627, 2831, 1929, 1628, 1758, 1755, 1631, 1632, 1185,
	1597, 2008, 2778, 657, 920, 552, 209, 671, 209, 1650,
	671, 671, 1122, 1025, 2527, 209, 920, 1935, 1912, 567,
	209, 568, 1642, 2141, 1737, 1643, 1644, 209, 2925, 1889,
	1470, 1590, 1906, 209, 1719, 684, 568, 1739, 1590, 1906,
	684, 2499, 2399, 1391, 1228, 209, 1742, 2975, 907, 1629,
	1719, 1125, 1779, 190, 1393, 1760, 2307, 876, 2983, 209,
	920, 2306, 1813, 1206, 1726, 209, 1872, 1730, 1727, 1724,
	1882, 1601, 680, 876, 1130, 209, 1715, 195, 209, 1760,
	1851, 1389, 3007, 1863, 1390, 2253, 2888, 1475, 1161, 496,
	2054, 2055, 1182, 1899, 1713, 1590, 1906, 478, 1856, 2356,
	1913, 209, 1123, 209, 2306, 209, 1791, 2354, 209, 2072,
	209, 1395, 209, 2889, 209, 209, 2074, 209, 907, 907,
	907, 898, 2855, 907, 1898, 684, 1760, 647, 209, 697,
	1893, 1926, 1884, 1886, 1834, 1835, 1826, 2243, 1825, 1183,
	2248, 1846, 1847, 195, 1415, 1842, 2396, 692, 196, 1418,
	501, 487, 486, 1401, 1922, 1991, 1992, 1891, 1321, 1626,
	2518, 1957, 1875, 1897, 1379, 1917, 1391, 1754, 851, 1395,
	1898, 1881, 1198, 1916, 1395, 1914, 2238, 1393, 834, 501,
	2734, 1395, 1841, 477, 1709, 3000, 1987, 209, 1989, 834,
	844, 835, 1710, 843, 1711, 2265, 2946, 1614, 1716, 1971,
	834, 1971, 723, 2509, 2745, 2803, 2397, 1387, 1568, 2237,
	1907, 1909, 1910, 1911, 196, 648, 1235, 1236, 1238, 1239,
	1285, 500, 1955, 1927, 1845, 2974, 920, 1994, 209, 2000,
	198, 2028, 1392, 2111, 209, 1990, 1362, 209, 1975, 1868,
	2500, 1701, 206, 2030, 197, 1862, 463, 683, 125, 493,
	500, 2779, 2579, 480, 1876, 125, 2347, 209, 209, 209,
	506, 209, 547, 1988, 1090, 506, 206, 1999, 547, 565,
	1995, 488, 2009, 2031, 1984, 572, 1985, 2018, 1986, 2019,
	209, 193, 1024, 592, 2565, 2029, 474, 1423, 2011, 1121,
	1760, 1982, 458, 2585, 1170, 869, 198, 1366, 2945, 1216,
	2947, 472, 1392, 2982, 1395, 1419, 1328, 3008, 1335, 1876,
	197, 1153, 1476, 647, 2980, 1325, 191, 2014, 2704, 2702,
	2440, 2017, 1712, 1369, 471, 1963, 1961, 2350, 2067, 1714,
	2047, 2026, 658, 692, 551, 1980, 470, 649, 1447, 503,
	1364, 1124, 2973, 1162, 1718, 1359, 194, 193, 2042, 1227,
	1195, 2998, 2044, 1367, 498, 1725, 192, 1136, 2081, 1699,
	1702, 479, 1876, 506, 506, 2084, 473, 2948, 503, 125,
	2068, 882, 1365, 125, 1119, 1215, 475, 1600, 2039, 1129,
	1110, 2040, 191, 498, 2101, 2102, 1141, 2193, 2239, 499,
	1163, 2049, 465, 1160, 463, 463, 463, 1217, 912, 463,
	2051, 648, 1698, 1217, 1141, 206, 1015, 2735, 2241, 2349,
	2999, 2270, 194, 690, 870, 647, 2730, 1395, 499, 502,
	2619, 1803, 192, 2346, 1431, 1392, 1196, 1366, 650, 497,
	870, 3014, 2789, 2097, 2274, 692, 2441, 1368, 2846, 2788,
	3001, 2769, 2442, 1425, 2159, 2482, 2240, 2669, 502, 2222,
	1575, 2218, 1964, 1369, 1824, 1824, 1824, 1962, 497, 2175,
	2066, 1424, 1142, 920, 651, 1465, 1143, 684, 2178, 691,
	1843, 459, 2187, 2185, 2186, 1455, 1454, 1450, 1446, 209,
	1142, 2205, 209, 1367, 1143, 2395, 2897, 2672, 1421, 1638,
	1197, 209, 201, 1619, 2671, 2348, 2093, 489, 1571, 209,
	209, 209, 2706, 648, 2546, 209, 2729, 1573, 209, 1422,
	1216, 2770, 1900, 1700, 2209, 209, 209, 209, 209, 209,
	2192, 1574, 1168, 649, 876, 2228, 2227, 209, 2060, 2224,
	2194, 1840, 876, 876, 209, 1141, 876, 2230, 1057, 2234,
	2235, 1839, 2620, 1939, 490, 560, 209, 907, 460, 554,
	209, 2219, 1938, 684, 1055, 3013, 920, 2201, 2200, 681,
	209, 3, 2206, 2280, 2223, 920, 1046, 1368, 920, 2668,
	2196, 920, 2210, 1045, 2199, 1639, 2530, 2987, 2202, 2247,
	491, 209, 492, 209, 2179, 209, 1215, 209, 907, 907,
	907, 2731, 209, 2694, 209, 2767, 1443, 2269, 209, 536,
	35, 2254, 2627, 209, 2457, 209, 2170, 2171, 2172, 1763,
	3009, 1142, 209, 1394, 650, 1143, 2670, 2989, 1192, 2213,
	2749, 2258, 1035, 832, 2244, 649, 2768, 209, 2618, 907,
	1901, 1902, 2526, 1190, 2164, 1180, 2313, 1394, 535, 34,
	2371, 2242, 2288, 534, 31, 2124, 209, 209, 2077, 2182,
	651, 2275, 2016, 2260, 1924, 2302, 2249, 2189, 2190, 1895,
	2336, 2195, 1178, 1035, 2255, 1437, 1427, 2281, 2252, 2301,
	2284, 1205, 1427, 463, 1031, 463, 209, 2264, 463, 2208,
	2259, 912, 533, 76, 1050, 2285, 532, 75, 2276, 1204,
	463, 209, 2292, 2329, 1117, 1013, 529, 22, 530, 23,
	463, 463, 463, 463, 912, 2289, 2290, 2291, 2250, 528,
	29, 1613, 2251, 1056, 689, 2165, 650, 684, 1176, 2263,
	1606, 2043, 2319, 2020, 559, 527, 20, 920, 553, 1054,
	1174, 886, 2657, 1616, 2215, 1556, 1310, 2335, 1762, 1876,
	1155, 1172, 209, 592, 2941, 2524, 2327, 2374, 2384, 2229,
	1430, 2232, 651, 2894, 463, 1191, 2643, 2654, 525, 19,
	2351, 2352, 837, 839, 2504, 2353, 526, 18, 2502, 35,
	1189, 2325, 1179, 2357, 1127, 515, 15, 2358, 2481, 2360,
	2296, 2294, 516, 16, 1967, 592, 869, 2391, 2392, 2393,
	2364, 2342, 1166, 2312, 2362, 524, 55, 1053, 2655, 1177,
	125, 1959, 869, 1652, 2411, 1435, 1958, 2378, 34, 1956,
	2454, 1954, 1439, 31, 523, 54, 2380, 1489, 1488, 1486,
	1484, 1652, 2420, 514, 53, 2320, 2321, 2322, 2383, 2323,
	2324, 209, 522, 12, 1481, 513, 48, 2310, 520, 45,
	2404, 209, 2410, 920, 1479, 1612, 2310, 2415, 2408, 2398,
	2400, 2401, 76, 1477, 2446, 1175, 75, 2450, 2417, 463,
	2419, 2476, 1428, 521, 46, 1417, 22, 1173, 23, 512,
	47, 1414, 519, 7, 1154, 1505, 518, 6, 1171, 29,
	1402, 870, 2515, 1362, 2445, 2494, 1396, 876, 2298, 870,
	870, 2447, 2817, 870, 2058, 20, 517, 37, 2521, 2984,
	2458, 511, 36, 1585, 2720, 2512, 2470, 2455, 2460, 2461,
	209, 209, 1219, 209, 2525, 2475, 2463, 2519, 209, 876,
	2650, 2520, 2651, 2719, 1594, 920, 2523, 920, 19, 1165,
	907, 2567, 2477, 125, 1052, 860, 18, 1871, 876, 2537,
	1596, 2819, 1888, 2485, 1366, 15, 209, 1871, 1887, 2555,
	876, 1523, 16, 2559, 876, 2653, 2021, 861, 1885, 876,
	2688, 2548, 1928, 2059, 2656, 55, 2552, 1923, 1918, 1894,
	1369, 2547, 2551, 1898, 209, 1561, 1562, 920, 209, 209,
	920, 209, 542, 2857, 54, 2510, 2662, 1364, 1505, 1505,
	1229, 1230, 1220, 53, 2531, 1164, 2834, 920, 2532, 2534,
	1367, 2628, 12, 2540, 2539, 48, 1903, 1890, 45, 876,
	1229, 1230, 2466, 1223, 2583, 2549, 1921, 2553, 1892, 1365,
	1661, 2561, 2493, 2893, 2700, 2560, 1974, 1960, 2568, 1953,
	1827, 1566, 1502, 46, 1498, 1232, 209, 862, 2996, 47,
	1231, 2592, 7, 2326, 3012, 2580, 6, 572, 561, 2581,
	2133, 2134, 506, 2584, 1229, 1230, 2652, 2033, 2032, 2572,
	1231, 2587, 1157, 1297, 1523, 1523, 37, 1156, 2569, 2402,
	2333, 36, 2033, 2503, 2034, 2505, 882, 1793, 463, 1752,
	1194, 2601, 2394, 1193, 1368, 1307, 1305, 2716, 2542, 2563,
	2544, 1203, 1743, 1202, 1188, 209, 1184, 1181, 1167, 1128,
	1569, 845, 1361, 656, 2777, 920, 209, 2236, 1169, 2617,
	209, 209, 209, 2198, 1848, 2887, 2607, 2110, 2578, 2839,
	2744, 1761, 1308, 51, 2490, 716, 2644, 2484, 209, 1947,
	1946, 923, 2641, 209, 2182, 209, 1578, 740, 209, 209,
	209, 209, 209, 1782, 1876, 1502, 1502, 209, 209, 907,
	2666, 1653, 876, 920, 2663, 2494, 2675, 907, 2642, 920,
	2588, 742, 2635, 2680, 1505, 1503, 209, 209, 2633, 2630,
	2631, 745, 744, 743, 1866, 1504, 1331, 741, 907, 1501,
	1980, 2638, 1087, 1978, 635, 1582, 1723, 2696, 209, 876,
	1740, 2092, 2494, 2689, 2634, 2701, 1301, 2703, 708, 2683,
	2494, 720, 2494, 2684, 719, 209, 209, 907, 907, 2708,
	1738, 2710, 1115, 707, 2203, 206, 2305, 2711, 1637, 2707,
	2050, 2699, 1634, 2501, 1035, 1015, 876, 463, 1442, 2733,
	2709, 920, 476, 2130, 876, 1085, 876, 2715, 695, 2632,
	1523, 1810, 1802, 1798, 870, 1208, 2717, 1286, 1461, 1461,
	1979, 1150, 2723, 869, 2724, 463, 2314, 463, 2006, 463,
	2038, 869, 869, 506, 2756, 869, 2685, 1645, 2636, 859,
	920, 858, 2667, 857, 209, 2911, 209, 2629, 920, 209,
	2908, 2732, 2676, 2677, 2736, 1572, 2027, 209, 2714, 2743,
	2751, 1279, 2493, 920, 712, 2183, 2283, 2763, 1029, 1278,
	841, 2785, 2848, 2764, 1140, 1139, 2757, 2758, 1138, 2221,
	2698, 3006, 592, 206, 1015, 547, 2687, 2798, 2782, 2494,
	2762, 1502, 206, 1015, 2725, 2726, 912, 463, 2856, 2493,
	2498, 2905, 592, 209, 2780, 209, 165, 2493, 907, 2493,
	162, 2760, 164, 209, 2640, 163, 1876, 1641, 2268, 2804,
	2802, 2806, 79, 876, 2494, 33, 2494, 2781, 32, 2783,
	105, 2791, 2761, 592, 104, 920, 870, 2674, 463, 2815,
	103, 206, 102, 101, 463, 2679, 463, 100, 463, 2814,
	463, 99, 463, 876, 2036, 209, 2821, 2551, 876, 2820,
	876, 209, 1617, 2816, 1618, 98, 97, 96, 209, 2830,
	95, 1876, 463, 463, 463, 94, 93, 92, 91, 90,
	2851, 89, 88, 87, 86, 85, 2845, 84, 83, 2837,
	82, 81, 2310, 588, 585, 78, 77, 209, 209, 2844,
	592, 2833, 2809, 30, 209, 25, 109, 110, 24, 469,
	74, 73, 2870, 28, 17, 907, 11, 2868, 2853, 2861,
	209, 21, 2871, 907, 907, 130, 2493, 129, 209, 128,
	209, 2865, 209, 127, 126, 14, 2842, 1804, 13, 124,
	2890, 2879, 2854, 123, 122, 121, 2874, 120, 119, 2875,
	209, 2880, 2883, 209, 2900, 2862, 209, 2818, 920, 2881,
	2882, 2493, 10, 2493, 876, 8, 108, 9, 2727, 2915,
	2916, 2344, 2918, 2920, 67, 2921, 2913, 68, 1876, 870,
	26, 2919, 41, 2907, 40, 2792, 2793, 2926, 107, 156,
	155, 154, 153, 209, 150, 152, 2922, 2923, 149, 478,
	151, 2494, 2494, 2924, 148, 118, 158, 157, 146, 144,
	145, 2940, 147, 2939, 2938, 143, 142, 159, 209, 2902,
	572, 2964, 506, 2965, 2966, 117, 209, 2953, 116, 115,
	114, 113, 1017, 1019, 112, 876, 876, 882, 5, 2,
	1, 2972, 209, 2970, 2971, 2969, 0, 0, 506, 0,
	506, 0, 0, 882, 0, 0, 2979, 463, 0, 2981,
	2978, 0, 1879, 0, 0, 0, 2986, 2985, 2991, 463,
	2988, 0, 2884, 0, 2885, 463, 2913, 0, 2995, 2994,
	0, 0, 0, 0, 0, 477, 869, 463, 0, 0,
	3003, 2184, 3002, 210, 0, 0, 0, 2901, 3010, 0,
	0, 463, 0, 3011, 0, 1505, 0, 1933, 0, 0,
	3015, 3016, 1297, 3017, 0, 0, 0, 1943, 2495, 3020,
	1015, 3021, 0, 0, 0, 0, 1114, 0, 3026, 3024,
	538, 2860, 1118, 0, 0, 0, 0, 2513, 2493, 2493,
	0, 39, 0, 1879, 2657, 506, 0, 463, 0, 2513,
	463, 0, 463, 2513, 463, 42, 463, 463, 2513, 912,
	695, 0, 2963, 1405, 695, 0, 0, 0, 0, 2654,
	1879, 0, 2647, 0, 0, 0, 816, 0, 0, 0,
	1409, 1523, 0, 537, 0, 2645, 0, 0, 474, 0,
	2649, 0, 0, 2272, 0, 0, 2272, 0, 0, 2277,
	0, 0, 0, 472, 0, 0, 0, 0, 869, 0,
	2655, 0, 539, 0, 0, 0, 0, 0, 0, 57,
	541, 1406, 0, 0, 58, 0, 471, 0, 0, 547,
	0, 0, 0, 0, 1505, 2648, 0, 0, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 0,
	1980, 0, 1502, 479, 0, 0, 0, 0, 473, 0,
	463, 1280, 1281, 1282, 1283, 1284, 1015, 0, 475, 1015,
	0, 0, 0, 1410, 1293, 0, 0, 0, 908, 0,
	0, 921, 921, 0, 1302, 0, 0, 0, 0, 463,
	463, 463, 0, 463, 0, 0, 0, 1505, 0, 0,
	1523, 0, 0, 0, 0, 0, 0, 1804, 1804, 0,
	0, 0, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2650, 0, 2651, 0, 0, 0, 0, 1411,
	1412, 0, 0, 0, 1505, 1505, 0, 0, 1407, 0,
	0, 869, 61, 0, 0, 2387, 0, 0, 0, 0,
	0, 0, 1505, 1505, 0, 0, 0, 2653, 0, 0,
	0, 909, 0, 1408, 922, 922, 2656, 0, 0, 134,
	63, 0, 64, 1523, 0, 0, 0, 0, 2495, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 1505, 0,
	166, 0, 0, 0, 0, 1804, 1804, 1804, 0, 0,
	0, 540, 0, 0, 106, 0, 0, 0, 0, 0,
	1523, 1523, 0, 0, 0, 2495, 0, 0, 0, 0,
	1355, 1355, 1355, 2495, 0, 2495, 168, 0, 1523, 1523,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1413,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 2652, 0,
	0, 2478, 0, 167, 1523, 0, 0, 0, 0, 0,
	0, 0, 160, 0, 0, 0, 0, 0, 0, 0,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1502, 1502, 0, 882, 0, 0, 0, 0, 0,
	0, 133, 882, 882, 0, 0, 882, 0, 0, 1502,
	1502, 506, 0, 0, 506, 0, 0, 0, 0, 0,
	0, 0, 0, 506, 0, 0, 0, 0, 0, 0,
	0, 463, 1879, 2217, 0, 0, 0, 1879, 0, 0,
	2217, 0, 2495, 0, 0, 1502, 0, 1879, 2217, 1879,
	2217, 2217, 0, 0, 0, 0, 0, 908, 908, 463,
	0, 0, 0, 0, 0, 0, 1442, 0, 0, 0,
	0, 0, 2513, 0, 0, 0, 0, 2495, 463, 2495,
	0, 0, 912, 0, 0, 0, 908, 908, 0, 0,
	0, 1505, 463, 908, 0, 918, 0, 0, 1010, 2079,
	2080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1461, 0, 1461, 0, 463, 0, 463,
	0, 0, 0, 0, 463, 0, 463, 0, 0, 0,
	912, 0, 0, 0, 0, 1879, 0, 506, 0, 0,
	909, 909, 0, 0, 1879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1804, 1804, 0, 1015,
	0, 0, 0, 0, 0, 0, 0, 1523, 0, 909,
	909, 0, 0, 0, 0, 0, 909, 0, 2340, 1015,
	0, 0, 0, 2513, 0, 0, 0, 2156, 2157, 2158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 908, 0, 0, 2361, 695,
	695, 0, 0, 0, 0, 0, 0, 874, 0, 0,
	0, 0, 0, 463, 0, 1804, 1804, 1804, 1804, 1804,
	1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804,
	1804, 1804, 1804, 1804, 0, 1804, 0, 0, 1502, 0,
	0, 0, 0, 0, 2495, 2495, 0, 0, 0, 0,
	0, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2406, 0, 0, 2691, 1635, 0,
	1640, 0, 0, 0, 0, 0, 1647, 0, 909, 0,
	0, 0, 0, 0, 0, 0, 1663, 1664, 1665, 1666,
	1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676,
	1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686,
	1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696,
	1697, 0, 1703, 0, 1705, 1706, 1707, 1708, 0, 0,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 2741,
	0, 1731, 0, 0, 0, 0, 0, 882, 1293, 0,
	0, 0, 0, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 506, 0, 0, 0, 0, 1773, 1774,
	1775, 1776, 1777, 0, 0, 0, 0, 0, 2741, 2492,
	0, 0, 1505, 0, 0, 0, 1661, 0, 0, 1800,
	0, 1812, 0, 0, 0, 1817, 1822, 0, 2514, 890,
	0, 1661, 0, 0, 916, 0, 1523, 0, 0, 0,
	2514, 0, 0, 0, 2514, 0, 0, 0, 0, 2514,
	0, 0, 717, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 1879, 1461, 0, 1461, 0, 0, 2369, 2370,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 1229,
	1230, 0, 0, 0, 0, 0, 0, 0, 1523, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 1879, 882,
	0, 0, 0, 1010, 1232, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 0, 0, 0, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 1015, 0, 0, 1231,
	912, 463, 0, 463, 0, 0, 0, 2421, 2422, 2423,
	2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433,
	2434, 2435, 2436, 2437, 2438, 2439, 0, 2443, 0, 0,
	0, 0, 0, 0, 0, 1523, 0, 0, 0, 1502,
	0, 538, 0, 0, 0, 0, 0, 0, 672, 0,
	0, 0, 39, 0, 0, 0, 685, 0, 2608, 0,
	0, 0, 0, 0, 0, 0, 42, 0, 0, 0,
	0, 0, 0, 1237, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 908, 0, 0, 0, 0,
	921, 871, 71, 0, 537, 0, 1661, 921, 1259, 1260,
	1261, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 882, 0, 0, 0, 1502, 1015, 0, 0,
	0, 0, 0, 539, 0, 0, 0, 0, 506, 0,
	57, 541, 1879, 2217, 1879, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1252, 0, 0, 0, 2492,
	1015, 0, 0, 0, 0, 1879, 0, 2217, 0, 0,
	1015, 1015, 463, 1879, 2217, 0, 0, 60, 909, 463,
	463, 0, 0, 922, 0, 0, 0, 0, 1027, 0,
	922, 0, 0, 1044, 0, 0, 2492, 0, 1015, 1943,
	0, 908, 0, 0, 2492, 0, 2492, 0, 1804, 0,
	0, 0, 0, 0, 0, 1064, 1064, 1064, 916, 0,
	1879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 921, 1253, 2340, 2340, 0,
	0, 0, 0, 0, 0, 1804, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2063, 2064, 0, 0, 0, 0, 2069, 0, 1113,
	0, 0, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 909, 0, 2082, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2088,
	134, 63, 0, 64, 0, 2095, 1879, 0, 2217, 0,
	2100, 2766, 0, 0, 0, 921, 0, 0, 922, 463,
	0, 166, 0, 2492, 0, 0, 0, 2114, 0, 0,
	0, 0, 540, 0, 0, 106, 0, 0, 0, 1804,
	0, 0, 0, 0, 1240, 1241, 1233, 1234, 1235, 1236,
	1238, 1239, 0, 2514, 0, 0, 0, 168, 2492, 0,
	2492, 0, 0, 0, 0, 463, 0, 463, 0, 0,
	0, 1293, 0, 0, 0, 1015, 0, 0, 0, 0,
	0, 1822, 1822, 1822, 0, 0, 0, 921, 0, 0,
	0, 0, 0, 1355, 167, 0, 0, 0, 922, 0,
	0, 2188, 0, 160, 0, 0, 0, 0, 0, 0,
	0, 161, 0, 0, 0, 0, 0, 2406, 0, 0,
	0, 0, 0, 506, 0, 0, 0, 0, 0, 508,
	2766, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 685, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 538, 0, 0, 0, 0, 921, 0, 1879,
	2217, 0, 0, 39, 2514, 0, 463, 0, 0, 921,
	922, 0, 0, 0, 0, 0, 0, 42, 0, 0,
	0, 0, 2217, 0, 0, 0, 0, 0, 0, 0,
	1015, 0, 1015, 0, 463, 0, 0, 0, 0, 0,
	2748, 908, 0, 0, 0, 537, 0, 0, 0, 0,
	0, 0, 2898, 921, 0, 1015, 0, 0, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2303, 0, 539, 2492, 2492, 2772, 0, 0,
	922, 57, 541, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 922, 0, 0, 2406, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 908, 908, 908, 0, 0, 908, 0, 60, 0,
	1015, 0, 0, 0, 909, 695, 695, 0, 1879, 0,
	0, 0, 0, 1383, 0, 0, 922, 0, 695, 0,
	0, 0, 1229, 1230, 2766, 1262, 1263, 1264, 1272, 1273,
	1274, 0, 0, 0, 0, 2363, 0, 0, 0, 1647,
	672, 0, 0, 0, 0, 2367, 0, 1232, 2368, 0,
	1276, 2836, 0, 0, 0, 0, 0, 0, 0, 0,
	2373, 0, 1289, 0, 1292, 0, 0, 0, 0, 2381,
	0, 1298, 1231, 0, 909, 909, 909, 2385, 0, 909,
	1251, 2188, 0, 0, 0, 0, 0, 1248, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 0, 0, 921,
	2412, 2413, 2414, 0, 0, 2133, 2134, 2416, 2151, 2152,
	2153, 0, 0, 0, 2418, 0, 0, 0, 0, 0,
	0, 134, 63, 2590, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1254, 1255, 1256,
	1257, 0, 166, 0, 0, 0, 1237, 2448, 2449, 0,
	0, 0, 0, 540, 0, 0, 106, 0, 0, 0,
	0, 0, 1440, 2148, 0, 0, 0, 0, 1269, 1277,
	0, 1259, 1260, 1261, 0, 0, 2465, 0, 168, 0,
	0, 0, 922, 0, 0, 0, 0, 0, 0, 0,
	0, 1275, 1468, 0, 1468, 0, 0, 0, 1246, 1247,
	0, 0, 2133, 2134, 0, 2151, 2152, 2153, 2486, 0,
	0, 1267, 0, 0, 0, 167, 0, 0, 1252, 0,
	71, 0, 0, 0, 160, 0, 1378, 0, 0, 2139,
	0, 0, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 509, 0, 0, 0, 0, 0, 0,
	2148, 0, 1559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2154, 0, 0, 0, 0, 0,
	0, 0, 1258, 0, 0, 0, 0, 0, 0, 1355,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1253,
	2562, 2149, 0, 1602, 0, 0, 0, 0, 0, 1607,
	0, 1608, 0, 1609, 0, 1610, 0, 1611, 0, 0,
	0, 0, 1270, 0, 0, 0, 2139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 921, 1620, 1044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2155,
	0, 0, 0, 0, 2591, 0, 0, 0, 2594, 2595,
	0, 0, 2597, 0, 0, 0, 0, 0, 0, 2599,
	0, 2154, 0, 2602, 0, 0, 0, 0, 0, 0,
	0, 0, 2150, 0, 0, 0, 0, 0, 0, 0,
	2609, 0, 0, 0, 0, 0, 1268, 0, 2149, 1243,
	1244, 1250, 1249, 1245, 1271, 0, 1242, 1240, 1241, 1233,
	1234, 1235, 1236, 1238, 1239, 0, 0, 0, 0, 922,
	908, 0, 0, 0, 0, 0, 0, 2622, 0, 921,
	0, 0, 0, 0, 0, 0, 0, 0, 921, 0,
	0, 921, 0, 0, 921, 0, 2133, 2134, 0, 2151,
	2152, 2153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 908, 908, 908, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2664, 0, 0, 0, 0, 2150,
	0, 0, 2145, 2146, 2147, 0, 0, 0, 0, 2144,
	2142, 2143, 2135, 2136, 2137, 2138, 2140, 2141, 0, 0,
	0, 0, 908, 909, 2148, 0, 0, 0, 0, 0,
	0, 0, 922, 0, 0, 0, 0, 0, 0, 0,
	0, 922, 1865, 0, 922, 0, 0, 922, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 909, 909, 909, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 916, 0, 0, 0,
	2139, 672, 2737, 2738, 672, 672, 0, 0, 0, 2145,
	2146, 2147, 0, 0, 0, 909, 2144, 2142, 2143, 2135,
	2136, 2137, 2138, 2140, 2141, 0, 2747, 0, 0, 0,
	921, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2755, 0, 1983, 0, 0, 1064, 0, 1064, 0, 1064,
	0, 916, 916, 0, 0, 0, 0, 0, 0, 0,
	1721, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2149, 685, 0, 0, 0, 0, 1292, 0,
	0, 141, 0, 0, 2790, 0, 38, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 42, 0, 922, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 43, 0, 49,
	0, 0, 0, 0, 0, 0, 921, 871, 0, 0,
	0, 0, 0, 2150, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 1378, 52, 2037, 0, 0, 56, 0,
	0, 139, 0, 0, 0, 57, 69, 0, 0, 0,
	58, 71, 0, 0, 2847, 0, 0, 2850, 0, 0,
	0, 0, 0, 0, 2046, 916, 2048, 0, 0, 0,
	0, 0, 0, 59, 0, 71, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 2061, 0, 0,
	0, 2133, 2134, 0, 2151, 2152, 2153, 0, 921, 922,
	921, 0, 0, 908, 0, 0, 0, 0, 0, 2589,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 71, 2145, 2146, 2147, 0, 0, 0, 0,
	2144, 2142, 2143, 2135, 2136, 2137, 2138, 2140, 2141, 0,
	0, 0, 0, 0, 71, 0, 0, 0, 0, 2148,
	921, 71, 0, 921, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	921, 2937, 2937, 0, 0, 0, 0, 0, 61, 0,
	0, 922, 0, 922, 0, 62, 909, 0, 0, 2954,
	0, 0, 0, 0, 2133, 2134, 0, 2151, 2152, 2153,
	0, 0, 0, 0, 72, 134, 63, 0, 64, 0,
	65, 0, 2376, 0, 140, 2139, 0, 2937, 0, 66,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 0, 922, 0, 0, 922, 80, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 2148, 922, 0, 0, 0, 0, 0, 0,
	2154, 0, 168, 0, 0, 71, 0, 0, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 921, 2937,
	0, 0, 111, 0, 0, 0, 0, 2149, 0, 0,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 167,
	0, 0, 0, 0, 0, 0, 2214, 0, 160, 0,
	0, 0, 0, 0, 0, 0, 161, 0, 2139, 0,
	0, 0, 908, 0, 0, 0, 921, 0, 0, 0,
	908, 0, 921, 0, 1044, 0, 0, 133, 0, 0,
	4, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 908, 0, 0, 0, 1721, 0, 0, 0, 0,
	0, 922, 0, 2154, 0, 0, 0, 2267, 2150, 0,
	0, 0, 0, 0, 0, 1292, 0, 0, 0, 0,
	908, 908, 0, 0, 0, 0, 0, 0, 0, 0,
	2149, 0, 2286, 0, 0, 0, 0, 0, 0, 2293,
	0, 2295, 0, 0, 921, 909, 0, 0, 0, 922,
	0, 0, 0, 909, 0, 922, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2133, 2134, 0,
	2151, 2152, 2153, 0, 909, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 0, 2375, 0, 0, 0, 0,
	0, 921, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1292, 0, 909, 909, 0, 921, 0, 2145, 2146,
	2147, 2150, 0, 0, 0, 2144, 2142, 2143, 2135, 2136,
	2137, 2138, 2140, 2141, 871, 2148, 0, 922, 0, 0,
	0, 0, 871, 871, 0, 0, 871, 0, 2365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 908, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 922, 0, 0, 0,
	0, 0, 0, 0, 922, 0, 0, 0, 921, 0,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 922,
	0, 2139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2145, 2146, 2147, 71, 0, 0, 0, 2144, 2142,
	2143, 2135, 2136, 2137, 2138, 2140, 2141, 0, 0, 0,
	0, 0, 0, 0, 909, 0, 2154, 0, 0, 0,
	0, 0, 0, 0, 1229, 1230, 71, 1262, 1263, 1264,
	1272, 1273, 1274, 71, 0, 0, 0, 0, 908, 0,
	0, 922, 1265, 2149, 0, 685, 908, 908, 0, 1232,
	0, 0, 1276, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1231, 0, 0, 0, 0, 0,
	0, 921, 1251, 0, 0, 0, 0, 0, 0, 1248,
	0, 0, 0, 0, 1229, 1230, 0, 1262, 1263, 1264,
	1272, 1273, 1274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1265, 0, 0, 0, 71, 0, 0, 1232,
	0, 909, 1276, 0, 2150, 0, 0, 0, 0, 909,
	909, 0, 0, 0, 0, 0, 0, 0, 0, 1254,
	1255, 1256, 1257, 0, 1231, 2538, 0, 0, 1237, 0,
	0, 0, 1251, 0, 0, 0, 0, 0, 0, 1248,
	0, 0, 0, 0, 922, 0, 0, 0, 0, 0,
	1269, 1277, 0, 1259, 1260, 1261, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1275, 0, 0, 0, 0, 0, 0,
	1246, 1247, 0, 0, 0, 0, 2582, 0, 916, 1254,
	1255, 1256, 1257, 1267, 0, 0, 0, 0, 1237, 0,
	1252, 0, 0, 0, 2145, 2146, 2147, 0, 0, 0,
	0, 2144, 2142, 2143, 2135, 2136, 2137, 2138, 2140, 2141,
	1269, 1277, 0, 1259, 1260, 1261, 0, 0, 1266, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1275, 0, 0, 0, 871, 0, 0,
	1246, 1247, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1267, 1258, 0, 0, 0, 0, 0,
	1252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1253, 0, 0, 0, 0, 0, 0, 2133, 2134,
	0, 2151, 2152, 2153, 0, 0, 0, 0, 1266, 0,
	0, 0, 0, 0, 1270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2148, 2678, 0, 0,
	0, 1253, 1229, 1230, 1044, 1262, 1263, 1264, 1272, 1273,
	1274, 0, 0, 0, 0, 0, 0, 0, 0, 871,
	1265, 0, 0, 0, 1270, 0, 0, 1232, 1268, 0,
	1276, 1243, 1244, 1250, 1249, 1245, 1271, 0, 1242, 1240,
	1241, 1233, 1234, 1235, 1236, 1238, 1239, 0, 0, 0,
	0, 0, 1231, 0, 0, 2613, 0, 0, 0, 0,
	1251, 0, 2139, 0, 0, 0, 0, 1248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1268, 0,
	0, 1243, 1244, 1250, 1249, 1245, 1271, 2154, 1242, 1240,
	1241, 1233, 1234, 1235, 1236, 1238, 1239, 1254, 1255, 1256,
	1257, 0, 0, 0, 0, 2119, 1237, 0, 0, 0,
	0, 0, 0, 0, 2149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2773, 0, 0, 0, 1269, 1277,
	0, 1259, 1260, 1261, 0, 0, 0, 0, 0, 0,
	0, 0, 871, 0, 0, 0, 0, 0, 0, 0,
	0, 1275, 0, 0, 0, 0, 0, 0, 1246, 1247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2811, 1267, 2813, 0, 0, 0, 0, 0, 1252, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 1258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1253,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2866, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2145, 2146, 2147, 0, 2886,
	0, 0, 2144, 2142, 2143, 2135, 2136, 2137, 2138, 2140,
	2141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2904, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1268, 0, 0, 1243,
	1244, 1250, 1249, 1245, 1271, 0, 1242, 1240, 1241, 1233,
	1234, 1235, 1236, 1238, 1239, 0, 0, 0, 0, 2899,
	0, 0, 0, 71, 0, 0, 919, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1721, 211, 212, 213, 214, 924, 215, 925, 926,
	927, 928, 394, 929, 930, 931, 932, 216, 217, 218,
	395, 396, 397, 398, 219, 399, 400, 933, 220, 401,
	402, 221, 222, 223, 934, 935, 403, 404, 405, 936,
	224, 406, 937, 883, 938, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 939, 234, 0, 235, 236,
	940, 818, 237, 238, 239, 941, 942, 944, 943, 945,
	946, 947, 240, 241, 464, 242, 407, 243, 408, 409,
	948, 244, 949, 245, 950, 246, 951, 952, 247, 248,
	953, 249, 954, 0, 955, 410, 250, 251, 253, 254,
	252, 255, 411, 412, 956, 819, 957, 0, 0, 0,
	0, 256, 257, 413, 414, 415, 0, 258, 958, 259,
	959, 960, 820, 260, 961, 261, 416, 962, 417, 963,
	262, 263, 264, 265, 266, 267, 418, 419, 822, 964,
	420, 0, 0, 0, 271, 965, 268, 966, 821, 269,
	421, 270, 422, 423, 424, 425, 426, 967, 427, 968,
	272, 823, 273, 274, 275, 824, 428, 429, 0, 0,
	276, 277, 278, 969, 280, 279, 970, 430, 825, 281,
	282, 826, 971, 283, 284, 972, 973, 285, 0, 286,
	885, 884, 287, 288, 290, 431, 289, 827, 291, 292,
	294, 293, 974, 975, 976, 432, 295, 433, 296, 297,
	977, 298, 978, 979, 299, 300, 980, 981, 301, 434,
	828, 302, 829, 435, 303, 304, 305, 306, 307, 308,
	309, 982, 310, 436, 311, 437, 312, 983, 313, 314,
	315, 316, 317, 438, 318, 319, 984, 320, 321, 322,
	323, 324, 0, 326, 327, 325, 328, 329, 330, 331,
	985, 332, 830, 986, 333, 334, 335, 439, 336, 0,
	340, 341, 342, 343, 344, 345, 346, 987, 348, 349,
	440, 441, 442, 443, 347, 350, 351, 988, 352, 337,
	338, 353, 831, 354, 444, 445, 355, 989, 363, 356,
	357, 358, 339, 359, 362, 446, 360, 990, 361, 447,
	991, 364, 365, 992, 366, 367, 368, 369, 370, 371,
	372, 373, 993, 448, 449, 450, 994, 995, 374, 375,
	451, 452, 996, 376, 377, 378, 379, 997, 998, 380,
	381, 382, 383, 999, 384, 1000, 453, 385, 386, 387,
	454, 455, 1001, 1002, 388, 1003, 1004, 1005, 1006, 1007,
	389, 390, 1008, 391, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	919, 0, 0, 0, 0, 0, 1853, 0, 0, 0,
	0, 0, 0, 0, 0, 1854, 211, 212, 213, 214,
	924, 215, 925, 926, 927, 928, 394, 929, 930, 931,
	932, 216, 217, 218, 395, 396, 397, 398, 219, 399,
	400, 933, 220, 401, 402, 221, 222, 223, 934, 935,
	403, 404, 405, 936, 224, 406, 937, 883, 938, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 939,
	234, 0, 235, 236, 940, 818, 237, 238, 239, 941,
	942, 944, 943, 945, 946, 947, 240, 241, 464, 242,
	407, 243, 408, 409, 948, 244, 949, 245, 950, 246,
	951, 952, 247, 248, 953, 249, 954, 0, 955, 410,
	250, 251, 253, 254, 252, 255, 411, 412, 956, 819,
	957, 0, 0, 0, 0, 256, 257, 413, 414, 415,
	0, 258, 958, 259, 959, 960, 820, 260, 961, 261,
	416, 962, 417, 963, 262, 263, 264, 265, 266, 267,
	418, 419, 822, 964, 420, 0, 0, 0, 271, 965,
	268, 966, 821, 269, 421, 270, 422, 423, 424, 425,
	426, 967, 427, 968, 272, 823, 273, 274, 275, 824,
	428, 429, 0, 0, 276, 277, 278, 969, 280, 279,
	970, 430, 825, 281, 282, 826, 971, 283, 284, 972,
	973, 285, 0, 286, 885, 884, 287, 288, 290, 431,
	289, 827, 291, 292, 294, 293, 974, 975, 976, 432,
	295, 433, 296, 297, 977, 298, 978, 979, 299, 300,
	980, 981, 301, 434, 828, 302, 829, 435, 303, 304,
	305, 306, 307, 308, 309, 982, 310, 436, 311, 437,
	312, 983, 313, 314, 315, 316, 317, 438, 318, 319,
	984, 320, 321, 322, 323, 324, 0, 326, 327, 325,
	328, 329, 330, 331, 985, 332, 830, 986, 333, 334,
	335, 439, 336, 0, 340, 341, 342, 343, 344, 345,
	346, 987, 348, 349, 440, 441, 442, 443, 347, 350,
	351, 988, 352, 337, 338, 353, 831, 354, 444, 445,
	355, 989, 363, 356, 357, 358, 339, 359, 362, 446,
	360, 990, 361, 447, 991, 364, 365, 992, 366, 367,
	368, 369, 370, 371, 372, 373, 993, 448, 449, 450,
	994, 995, 374, 375, 451, 452, 996, 376, 377, 378,
	379, 997, 998, 380, 381, 382, 383, 999, 384, 1000,
	453, 385, 386, 387, 454, 455, 1001, 1002, 388, 1003,
	1004, 1005, 1006, 1007, 389, 390, 1008, 391, 392, 393,
	0, 0, 0, 0, 0, 919, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2637, 211, 212, 213, 214, 924, 215, 925, 926, 927,
	928, 394, 929, 930, 931, 932, 216, 217, 218, 395,
	396, 397, 398, 219, 399, 400, 933, 220, 401, 402,
	221, 222, 223, 934, 935, 403, 404, 405, 936, 224,
	406, 937, 883, 938, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 939, 234, 0, 235, 236, 940,
	818, 237, 238, 239, 941, 942, 944, 943, 945, 946,
	947, 240, 241, 464, 242, 407, 243, 408, 409, 948,
	244, 949, 245, 950, 246, 951, 952, 247, 248, 953,
	249, 954, 0, 955, 410, 250, 251, 253, 254, 252,
	255, 411, 412, 956, 819, 957, 0, 0, 0, 0,
	256, 257, 413, 414, 415, 0, 258, 958, 259, 959,
	960, 820, 260, 961, 261, 416, 962, 417, 963, 262,
	263, 264, 265, 266, 267, 418, 419, 822, 964, 420,
	0, 0, 0, 271, 965, 268, 966, 821, 269, 421,
	270, 422, 423, 424, 425, 426, 967, 427, 968, 272,
	823, 273, 274, 275, 824, 428, 429, 0, 0, 276,
	277, 278, 969, 280, 279, 970, 430, 825, 281, 282,
	826, 971, 283, 284, 972, 973, 285, 0, 286, 885,
	884, 287, 288, 290, 431, 289, 827, 291, 292, 294,
	293, 974, 975, 976, 432, 295, 433, 296, 297, 977,
	298, 978, 979, 299, 300, 980, 981, 301, 434, 828,
	302, 829, 435, 303, 304, 305, 306, 307, 308, 309,
	982, 310, 436, 311, 437, 312, 983, 313, 314, 315,
	316, 317, 438, 318, 319, 984, 320, 321, 322, 323,
	324, 0, 326, 327, 325, 328, 329, 330, 331, 985,
	332, 830, 986, 333, 334, 335, 439, 336, 0, 340,
	341, 342, 343, 344, 345, 346, 987, 348, 349, 440,
	441, 442, 443, 347, 350, 351, 988, 352, 337, 338,
	353, 831, 354, 444, 445, 355, 989, 363, 356, 357,
	358, 339, 359, 362, 446, 360, 990, 361, 447, 991,
	364, 365, 992, 366, 367, 368, 369, 370, 371, 372,
	373, 993, 448, 449, 450, 994, 995, 374, 375, 451,
	452, 996, 376, 377, 378, 379, 997, 998, 380, 381,
	382, 383, 999, 384, 1000, 453, 385, 386, 387, 454,
	455, 1001, 1002, 388, 1003, 1004, 1005, 1006, 1007, 389,
	390, 1008, 391, 392, 393, 919, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2742, 211, 212, 213, 214, 924, 215, 925, 926, 927,
	928, 394, 929, 930, 931, 932, 216, 217, 218, 395,
	396, 397, 398, 219, 399, 400, 933, 220, 401, 402,
	221, 222, 223, 934, 935, 403, 404, 405, 936, 224,
	406, 937, 883, 938, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 939, 234, 0, 235, 236, 940,
	818, 237, 238, 239, 941, 942, 944, 943, 945, 946,
	947, 240, 241, 464, 242, 407, 243, 408, 409, 948,
	244, 949, 245, 950, 246, 951, 952, 247, 248, 953,
	249, 954, 0, 955, 410, 250, 251, 253, 254, 252,
	255, 411, 412, 956, 819, 957, 0, 0, 0, 0,
	256, 257, 413, 414, 415, 0, 258, 958, 259, 959,
	960, 820, 260, 961, 261, 416, 962, 417, 963, 262,
	263, 264, 265, 266, 267, 418, 419, 822, 964, 420,
	0, 0, 0, 271, 965, 268, 966, 821, 269, 421,
	270, 422, 423, 424, 425, 426, 967, 427, 968, 272,
	823, 273, 274, 275, 824, 428, 429, 0, 0, 276,
	277, 278, 969, 280, 279, 970, 430, 825, 281, 282,
	826, 971, 283, 284, 972, 973, 285, 0, 286, 885,
	884, 287, 288, 290, 431, 289, 827, 291, 292, 294,
	293, 974, 975, 976, 432, 295, 433, 296, 297, 977,
	298, 978, 979, 299, 300, 980, 981, 301, 434, 828,
	302, 829, 435, 303, 304, 305, 306, 307, 308, 309,
	982, 310, 436, 311, 437, 312, 983, 313, 314, 315,
	316, 317, 438, 318, 319, 984, 320, 321, 322, 323,
	324, 0, 326, 327, 325, 328, 329, 330, 331, 985,
	332, 830, 986, 333, 334, 335, 439, 336, 0, 340,
	341, 342, 343, 344, 345, 346, 987, 348, 349, 440,
	441, 442, 443, 347, 350, 351, 988, 352, 337, 338,
	353, 831, 354, 444, 445, 355, 989, 363, 356, 357,
	358, 339, 359, 362, 446, 360, 990, 361, 447, 991,
	364, 365, 992, 366, 367, 368, 369, 370, 371, 372,
	373, 993, 448, 449, 450, 994, 995, 374, 375, 451,
	452, 996, 376, 377, 378, 379, 997, 998, 380, 381,
	382, 383, 999, 384, 1000, 453, 385, 386, 387, 454,
	455, 1001, 1002, 388, 1003, 1004, 1005, 1006, 1007, 389,
	390, 1008, 391, 392, 393, 919, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2388, 211, 212, 213, 214, 924, 215, 925, 926, 927,
	928, 394, 929, 930, 931, 932, 216, 217, 218, 395,
	396, 397, 398, 219, 399, 400, 933, 220, 401, 402,
	221, 222, 223, 934, 935, 403, 404, 405, 936, 224,
	406, 937, 883, 938, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 939, 234, 0, 235, 236, 940,
	818, 237, 238, 239, 941, 942, 944, 943, 945, 946,
	947, 240, 241, 464, 242, 407, 243, 408, 409, 948,
	244, 949, 245, 950, 246, 951, 952, 247, 248, 953,
	249, 954, 0, 955, 410, 250, 251, 253, 254, 252,
	255, 411, 412, 956, 819, 957, 0, 0, 0, 0,
	256, 257, 413, 414, 415, 0, 258, 958, 259, 959,
	960, 820, 260, 961, 261, 416, 962, 417, 963, 262,
	263, 264, 265, 266, 267, 418, 419, 822, 964, 420,
	0, 0, 0, 271, 965, 268, 966, 821, 269, 421,
	270, 422, 423, 424, 425, 426, 967, 427, 968, 272,
	823, 273, 274, 275, 824, 428, 429, 0, 0, 276,
	277, 278, 969, 280, 279, 970, 430, 825, 281, 282,
	826, 971, 283, 284, 972, 973, 285, 0, 286, 885,
	884, 287, 288, 290, 431, 289, 827, 291, 292, 294,
	293, 974, 975, 976, 432, 295, 433, 296, 297, 977,
	298, 978, 979, 299, 300, 980, 981, 301, 434, 828,
	302, 829, 435, 303, 304, 305, 306, 307, 308, 309,
	982, 310, 436, 311, 437, 312, 983, 313, 314, 315,
	316, 317, 438, 318, 319, 984, 320, 321, 322, 323,
	324, 0, 326, 327, 325, 328, 329, 330, 331, 985,
	332, 830, 986, 333, 334, 335, 439, 336, 0, 340,
	341, 342, 343, 344, 345, 346, 987, 348, 349, 440,
	441, 442, 443, 347, 350, 351, 988, 352, 337, 338,
	353, 831, 354, 444, 445, 355, 989, 363, 356, 357,
	358, 339, 359, 362, 446, 360, 990, 361, 447, 991,
	364, 365, 992, 366, 367, 368, 369, 370, 371, 372,
	373, 993, 448, 449, 450, 994, 995, 374, 375, 451,
	452, 996, 376, 377, 378, 379, 997, 998, 380, 381,
	382, 383, 999, 384, 1000, 453, 385, 386, 387, 454,
	455, 1001, 1002, 388, 1003, 1004, 1005, 1006, 1007, 389,
	390, 1008, 391, 392, 393, 919, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2271, 211, 212, 213, 214, 924, 215, 925, 926, 927,
	928, 394, 929, 930, 931, 932, 216, 217, 218, 395,
	396, 397, 398, 219, 399, 400, 933, 220, 401, 402,
	221, 222, 223, 934, 935, 403, 404, 405, 936, 224,
	406, 937, 883, 938, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 939, 234, 0, 235, 236, 940,
	818, 237, 238, 239, 941, 942, 944, 943, 945, 946,
	947, 240, 241, 464, 242, 407, 243, 408, 409, 948,
	244, 949, 245, 950, 246, 951, 952, 247, 248, 953,
	249, 954, 0, 955, 410, 250, 251, 253, 254, 252,
	255, 411, 412, 956, 819, 957, 0, 0, 0, 0,
	256, 257, 413, 414, 415, 0, 258, 958, 259, 959,
	960, 820, 260, 961, 261, 416, 962, 417, 963, 262,
	263, 264, 265, 266, 267, 418, 419, 822, 964, 420,
	0, 0, 0, 271, 965, 268, 966, 821, 269, 421,
	270, 422, 423, 424, 425, 426, 967, 427, 968, 272,
	823, 273, 274, 275, 824, 428, 429, 0, 0, 276,
	277, 278, 969, 280, 279, 970, 430, 825, 281, 282,
	826, 971, 283, 284, 972, 973, 285, 0, 286, 885,
	884, 287, 288, 290, 431, 289, 827, 291, 292, 294,
	293, 974, 975, 976, 432, 295, 433, 296, 297, 977,
	298, 978, 979, 299, 300, 980, 981, 301, 434, 828,
	302, 829, 435, 303, 304, 305, 306, 307, 308, 309,
	982, 310, 436, 311, 437, 312, 983, 313, 314, 315,
	316, 317, 438, 318, 319, 984, 320, 321, 322, 323,
	324, 0, 326, 327, 325, 328, 329, 330, 331, 985,
	332, 830, 986, 333, 334, 335, 439, 336, 0, 340,
	341, 342, 343, 344, 345, 346, 987, 348, 349, 440,
	441, 442, 443, 347, 350, 351, 988, 352, 337, 338,
	353, 831, 354, 444, 445, 355, 989, 363, 356, 357,
	358, 339, 359, 362, 446, 360, 990, 361, 447, 991,
	364, 365, 992, 366, 367, 368, 369, 370, 371, 372,
	373, 993, 448, 449, 450, 994, 995, 374, 375, 451,
	452, 996, 376, 377, 378, 379, 997, 998, 380, 381,
	382, 383, 999, 384, 1000, 453, 385, 386, 387, 454,
	455, 1001, 1002, 388, 1003, 1004, 1005, 1006, 1007, 389,
	390, 1008, 391, 392, 393, 919, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1744, 211, 212, 213, 214, 924, 215, 925, 926, 927,
	928, 394, 929, 930, 931, 932, 216, 217, 218, 395,
	396, 397, 398, 219, 399, 400, 933, 220, 401, 402,
	221, 222, 223, 934, 935, 403, 404, 405, 936, 224,
	406, 937, 883, 938, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 939, 234, 0, 235, 236, 940,
	818, 237, 238, 239, 941, 942, 944, 943, 945, 946,
	947, 240, 241, 464, 242, 407, 243, 408, 409, 948,
	244, 949, 245, 950, 246, 951, 952, 247, 248, 953,
	249, 954, 0, 955, 410, 250, 251, 253, 254, 252,
	255, 411, 412, 956, 819, 957, 0, 0, 0, 0,
	256, 257, 413, 414, 415, 0, 258, 958, 259, 959,
	960, 820, 260, 961, 261, 416, 962, 417, 963, 262,
	263, 264, 265, 266, 267, 418, 419, 822, 964, 420,
	0, 0, 0, 271, 965, 268, 966, 821, 269, 421,
	270, 422, 423, 424, 425, 426, 967, 427, 968, 272,
	823, 273, 274, 275, 824, 428, 429, 0, 0, 276,
	277, 278, 969, 280, 279, 970, 430, 825, 281, 282,
	826, 971, 283, 284, 972, 973, 285, 0, 286, 885,
	884, 287, 288, 290, 431, 289, 827, 291, 292, 294,
	293, 974, 975, 976, 432, 295, 433, 296, 297, 977,
	298, 978, 979, 299, 300, 980, 981, 301, 434, 828,
	302, 829, 435, 303, 304, 305, 306, 307, 308, 309,
	982, 310, 436, 311, 437, 312, 983, 313, 314, 315,
	316, 317, 438, 318, 319, 984, 320, 321, 322, 323,
	324, 0, 326, 327, 325, 328, 329, 330, 331, 985,
	332, 830, 986, 333, 334, 335, 439, 336, 0, 340,
	341, 342, 343, 344, 345, 346, 987, 348, 349, 440,
	441, 442, 443, 347, 350, 351, 988, 352, 337, 338,
	353, 831, 354, 444, 445, 355, 989, 363, 356, 357,
	358, 339, 359, 362, 446, 360, 990, 361, 447, 991,
	364, 365, 992, 366, 367, 368, 369, 370, 371, 372,
	373, 993, 448, 449, 450, 994, 995, 374, 375, 451,
	452, 996, 376, 377, 378, 379, 997, 998, 380, 381,
	382, 383, 999, 384, 1000, 453, 385, 386, 387, 454,
	455, 1001, 1002, 388, 1003, 1004, 1005, 1006, 1007, 389,
	390, 1008, 391, 392, 393, 919, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 211, 212, 213, 214, 924, 215, 925, 926, 927,
	928, 394, 929, 930, 931, 932, 216, 217, 218, 395,
	396, 397, 398, 219, 399, 400, 933, 220, 401, 402,
	221, 222, 223, 934, 935, 403, 404, 405, 936, 224,
	406, 937, 883, 938, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 939, 234, 0, 235, 236, 940,
	818, 237, 238, 239, 941, 942, 944, 943, 945, 946,
	947, 240, 241, 464, 242, 407, 243, 408, 409, 948,
	244, 949, 245, 950, 246, 951, 952, 247, 248, 953,
	249, 954, 0, 955, 410, 250, 251, 253, 254, 252,
	255, 411, 412, 956, 819, 957, 0, 0, 0, 0,
	256, 257, 413, 414, 415, 0, 258, 958, 259, 959,
	960, 820, 260, 961, 261, 416, 962, 417, 963, 262,
	263, 264, 265, 266, 267, 418, 419, 822, 964, 420,
	0, 0, 0, 271, 965, 268, 966, 821, 269, 421,
	270, 422, 423, 424, 425, 426, 967, 427, 968, 272,
	823, 273, 274, 275, 824, 428, 429, 0, 0, 276,
	277, 278, 969, 280, 279, 970, 430, 825, 281, 282,
	826, 971, 283, 284, 972, 973, 285, 0, 286, 885,
	884, 287, 288, 290, 431, 289, 827, 291, 292, 294,
	293, 974, 975, 976, 432, 295, 433, 296, 297, 977,
	298, 978, 979, 299, 300, 980, 981, 301, 434, 828,
	302, 829, 435, 303, 304, 305, 306, 307, 308, 309,
	982, 310, 436, 311, 437, 312, 983, 313, 314, 315,
	316, 317, 438, 318, 319, 984, 320, 321, 322, 323,
	324, 0, 326, 327, 325, 328, 329, 330, 331, 985,
	332, 830, 986, 333, 334, 335, 439, 336, 0, 340,
	341, 342, 343, 344, 345, 346, 987, 348, 349, 440,
	441, 442, 443, 347, 350, 351, 988, 352, 337, 338,
	353, 831, 354, 444, 445, 355, 989, 363, 356, 357,
	358, 339, 359, 362, 446, 360, 990, 361, 447, 991,
	364, 365, 992, 366, 367, 368, 369, 370, 371, 372,
	373, 993, 448, 449, 450, 994, 995, 374, 375, 451,
	452, 996, 376, 377, 378, 379, 997, 998, 380, 381,
	382, 383, 999, 384, 1000, 453, 385, 386, 387, 454,
	455, 1001, 1002, 388, 1003, 1004, 1005, 1006, 1007, 389,
	390, 1008, 391, 392, 393, 1751, 0, 738, 726, 727,
	724, 725, 715, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 213, 214, 1748, 215, 0,
	0, 0, 0, 772, 718, 0, 0, 0, 216, 217,
	218, 395, 779, 758, 780, 746, 781, 782, 0, 220,
	748, 747, 221, 222, 223, 721, 771, 783, 784, 405,
	0, 224, 776, 0, 762, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 818, 237, 238, 239, 765, 763, 764, 768,
	0, 766, 767, 240, 241, 464, 242, 785, 243, 786,
	787, 704, 244, 0, 245, 0, 246, 1749, 0, 778,
	248, 0, 249, 0, 0, 0, 709, 250, 251, 253,
	254, 252, 255, 788, 789, 733, 819, 0, 0, 0,
	0, 0, 256, 257, 790, 791, 792, 0, 258, 0,
	259, 0, 0, 820, 260, 0, 261, 793, 0, 417,
	0, 262, 263, 264, 265, 266, 267, 773, 775, 822,
	0, 757, 0, 0, 0, 271, 0, 268, 0, 821,
	269, 794, 760, 795, 796, 797, 798, 799, 0, 761,
	0, 272, 823, 273, 274, 275, 824, 800, 801, 0,
	0, 276, 277, 278, 0, 280, 279, 0, 802, 825,
	281, 282, 826, 0, 283, 284, 0, 0, 285, 0,
	286, 706, 705, 287, 288, 290, 750, 289, 827, 291,
	292, 294, 293, 701, 0, 734, 774, 295, 803, 296,
	297, 0, 759, 0, 0, 299, 300, 0, 0, 301,
	434, 828, 302, 829, 804, 303, 304, 305, 306, 307,
	308, 309, 0, 310, 805, 311, 437, 312, 0, 313,
	314, 315, 316, 317, 806, 318, 319, 0, 320, 321,
	322, 323, 324, 0, 326, 327, 325, 328, 329, 330,
	331, 0, 332, 830, 0, 333, 334, 335, 710, 336,
	0, 340, 341, 342, 343, 344, 345, 346, 0, 348,
	349, 751, 752, 753, 754, 347, 350, 351, 769, 352,
	337, 338, 353, 831, 354, 807, 755, 355, 0, 363,
	356, 357, 358, 339, 359, 362, 808, 360, 0, 361,
	809, 0, 364, 365, 0, 366, 367, 368, 369, 370,
	371, 749, 373, 0, 810, 811, 812, 0, 0, 374,
	375, 813, 814, 732, 376, 377, 378, 379, 0, 0,
	380, 381, 382, 383, 770, 384, 0, 756, 385, 386,
	387, 454, 815, 1747, 0, 388, 0, 0, 0, 0,
	0, 389, 390, 0, 391, 392, 393, 702, 0, 0,
	0, 0, 0, 0, 0, 700, 0, 0, 0, 0,
	698, 699, 1750, 0, 0, 0, 0, 0, 0, 711,
	1745, 0, 0, 0, 686, 714, 738, 726, 727, 724,
	725, 715, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 772, 718, 0, 0, 0, 216, 217, 218,
	395, 779, 758, 780, 746, 781, 782, 0, 220, 748,
	747, 221, 222, 223, 721, 771, 783, 784, 405, 0,
	224, 776, 0, 762, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 818, 237, 238, 239, 765, 763, 764, 768, 0,
	766, 767, 240, 241, 464, 242, 785, 243, 786, 787,
	704, 244, 0, 245, 0, 246, 0, 0, 778, 248,
	0, 249, 0, 0, 0, 709, 250, 251, 253, 254,
	252, 255, 788, 789, 733, 819, 0, 0, 0, 0,
	0, 256, 257, 790, 791, 792, 0, 258, 0, 259,
	0, 0, 820, 260, 0, 261, 793, 0, 417, 0,
	262, 263, 264, 265, 266, 267, 773, 775, 822, 0,
	757, 0, 0, 0, 271, 0, 268, 0, 821, 269,
	794, 760, 795, 796, 797, 798, 799, 0, 761, 0,
	272, 823, 273, 274, 275, 824, 800, 801, 0, 0,
	276, 277, 278, 0, 280, 279, 0, 802, 825, 281,
	282, 826, 0, 283, 284, 0, 0, 285, 0, 286,
	706, 705, 287, 288, 290, 750, 289, 827, 291, 292,
	294, 293, 701, 0, 734, 774, 295, 803, 296, 297,
	0, 759, 0, 0, 299, 300, 0, 0, 301, 434,
	828, 302, 829, 804, 303, 304, 305, 306, 307, 308,
	309, 0, 310, 805, 311, 437, 312, 0, 313, 314,
	315, 316, 317, 806, 318, 319, 0, 320, 321, 322,
	323, 324, 0, 326, 327, 325, 328, 329, 330, 331,
	0, 332, 830, 0, 333, 334, 335, 710, 336, 0,
	340, 341, 342, 343, 344, 345, 346, 166, 348, 349,
	751, 752, 753, 754, 347, 350, 351, 769, 352, 337,
	338, 353, 831, 354, 807, 755, 355, 0, 363, 356,
	357, 358, 339, 359, 362, 808, 360, 0, 361, 809,
	0, 364, 365, 168, 366, 367, 368, 369, 370, 371,
	749, 373, 0, 810, 811, 812, 0, 0, 374, 375,
	813, 814, 732, 376, 377, 378, 379, 0, 0, 380,
	381, 382, 383, 770, 384, 0, 756, 385, 386, 387,
	1091, 815, 0, 0, 388, 0, 0, 0, 0, 160,
	389, 390, 0, 391, 392, 393, 702, 161, 0, 0,
	0, 0, 0, 0, 700, 0, 0, 0, 0, 698,
	699, 738, 726, 727, 724, 725, 715, 0, 1295, 0,
	0, 0, 0, 0, 714, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 772, 718, 0,
	0, 0, 216, 217, 218, 395, 779, 758, 780, 746,
	781, 782, 0, 220, 748, 747, 221, 222, 223, 721,
	771, 783, 784, 405, 0, 224, 776, 0, 762, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 818, 237, 238, 239,
	765, 763, 764, 768, 0, 766, 767, 240, 241, 464,
	242, 785, 243, 786, 787, 704, 244, 0, 245, 0,
	246, 0, 0, 778, 248, 0, 249, 0, 0, 0,
	709, 250, 251, 253, 254, 252, 255, 788, 789, 733,
	819, 0, 0, 0, 0, 0, 256, 257, 790, 791,
	792, 0, 258, 0, 259, 0, 0, 820, 260, 0,
	261, 793, 0, 417, 0, 262, 263, 264, 265, 266,
	267, 773, 775, 822, 0, 757, 0, 0, 0, 271,
	0, 268, 0, 821, 269, 794, 760, 795, 796, 797,
	798, 799, 0, 761, 0, 272, 823, 273, 274, 275,
	824, 800, 801, 0, 0, 276, 277, 278, 0, 280,
	279, 0, 802, 825, 281, 282, 826, 0, 283, 284,
	0, 0, 285, 0, 286, 706, 705, 287, 288, 290,
	750, 289, 827, 291, 292, 294, 293, 701, 0, 734,
	774, 295, 803, 296, 297, 0, 759, 0, 0, 299,
	300, 0, 0, 301, 434, 828, 302, 829, 804, 303,
	304, 305, 306, 307, 308, 309, 0, 310, 805, 311,
	437, 312, 0, 313, 314, 315, 316, 317, 806, 318,
	319, 0, 320, 321, 322, 323, 324, 0, 326, 327,
	325, 328, 329, 330, 331, 0, 332, 830, 0, 333,
	334, 335, 710, 336, 0, 340, 341, 342, 343, 344,
	345, 346, 166, 348, 349, 751, 752, 753, 754, 347,
	350, 351, 769, 352, 337, 338, 353, 831, 354, 807,
	755, 355, 0, 363, 356, 357, 358, 339, 359, 362,
	808, 360, 0, 361, 809, 0, 364, 365, 168, 366,
	367, 368, 369, 370, 371, 749, 373, 0, 810, 811,
	812, 0, 0, 374, 375, 813, 814, 732, 376, 377,
	378, 379, 0, 0, 380, 381, 382, 383, 770, 384,
	0, 756, 385, 386, 387, 1091, 815, 0, 0, 388,
	0, 0, 0, 0, 160, 389, 390, 0, 391, 392,
	393, 702, 161, 0, 0, 0, 0, 0, 0, 700,
	0, 0, 0, 0, 698, 699, 738, 726, 727, 724,
	725, 715, 0, 1295, 0, 0, 0, 0, 0, 714,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 772, 718, 0, 0, 0, 216, 217, 218,
	395, 779, 758, 780, 746, 781, 782, 1818, 220, 748,
	747, 221, 222, 223, 721, 771, 783, 784, 405, 0,
	224, 776, 0, 762, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 818, 237, 238, 239, 765, 763, 764, 768, 0,
	766, 767, 240, 241, 464, 242, 785, 243, 786, 787,
	704, 244, 0, 245, 0, 246, 0, 0, 778, 248,
	0, 249, 0, 0, 0, 709, 250, 251, 253, 254,
	252, 255, 788, 789, 733, 819, 0, 0, 0, 0,
	0, 256, 257, 790, 791, 792, 0, 258, 0, 259,
	0, 1823, 820, 260, 0, 261, 793, 0, 417, 0,
	262, 263, 264, 265, 266, 267, 773, 775, 822, 0,
	757, 0, 0, 0, 271, 0, 268, 0, 821, 269,
	794, 760, 795, 796, 797, 798, 799, 0, 761, 0,
	272, 823, 273, 274, 275, 824, 800, 801, 0, 0,
	276, 277, 278, 0, 280, 279, 1819, 802, 825, 281,
	282, 826, 0, 283, 284, 0, 0, 285, 0, 286,
	706, 705, 287, 288, 290, 750, 289, 827, 291, 292,
	294, 293, 701, 0, 734, 774, 295, 803, 296, 297,
	0, 759, 0, 0, 299, 300, 0, 0, 301, 434,
	828, 302, 829, 804, 303, 304, 305, 306, 307, 308,
	309, 0, 310, 805, 311, 437, 312, 0, 313, 314,
	315, 316, 317, 806, 318, 319, 0, 320, 321, 322,
	323, 324, 0, 326, 327, 325, 328, 329, 330, 331,
	0, 332, 830, 0, 333, 334, 335, 710, 336, 0,
	340, 341, 342, 343, 344, 345, 346, 0, 348, 349,
	751, 752, 753, 754, 347, 350, 351, 769, 352, 337,
	338, 353, 831, 354, 807, 755, 355, 0, 363, 356,
	357, 358, 339, 359, 362, 808, 360, 0, 361, 809,
	0, 364, 365, 0, 366, 367, 368, 369, 370, 371,
	749, 373, 0, 810, 811, 812, 0, 1820, 374, 375,
	813, 814, 732, 376, 377, 378, 379, 0, 0, 380,
	381, 382, 383, 770, 384, 0, 756, 385, 386, 387,
	454, 815, 0, 0, 388, 0, 0, 0, 0, 0,
	389, 390, 0, 391, 392, 393, 702, 0, 0, 0,
	0, 0, 0, 0, 700, 0, 0, 0, 0, 698,
	699, 738, 726, 727, 724, 725, 715, 0, 711, 0,
	0, 0, 0, 0, 714, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 772, 718, 0,
	0, 0, 216, 217, 218, 395, 779, 758, 780, 746,
	781, 782, 0, 220, 748, 747, 221, 222, 223, 721,
	771, 783, 784, 405, 0, 224, 776, 0, 762, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 818, 237, 238, 239,
	765, 763, 764, 768, 0, 766, 767, 240, 241, 464,
	242, 785, 243, 786, 787, 704, 244, 0, 245, 0,
	246, 0, 0, 778, 248, 0, 249, 0, 0, 0,
	709, 250, 251, 253, 254, 252, 255, 788, 789, 733,
	819, 0, 0, 0, 0, 0, 256, 257, 790, 791,
	792, 0, 258, 0, 259, 0, 0, 820, 260, 0,
	261, 793, 0, 417, 0, 262, 263, 264, 265, 266,
	267, 773, 775, 822, 0, 757, 0, 0, 0, 271,
	0, 268, 0, 821, 269, 794, 760, 795, 796, 797,
	798, 799, 0, 761, 0, 272, 823, 273, 274, 275,
	824, 800, 801, 0, 0, 276, 277, 278, 0, 280,
	279, 0, 802, 825, 281, 282, 826, 0, 283, 284,
	0, 0, 285, 0, 286, 706, 705, 287, 288, 290,
	750, 289, 827, 291, 292, 294, 293, 701, 2554, 734,
	774, 295, 803, 296, 297, 0, 759, 0, 0, 299,
	300, 0, 0, 301, 434, 828, 302, 829, 804, 303,
	304, 305, 306, 307, 308, 309, 0, 310, 805, 311,
	437, 312, 0, 313, 314, 315, 316, 317, 806, 318,
	319, 0, 320, 321, 322, 323, 324, 0, 326, 327,
	325, 328, 329, 330, 331, 0, 332, 830, 0, 333,
	334, 335, 710, 336, 0, 340, 341, 342, 343, 344,
	345, 346, 0, 348, 349, 751, 752, 753, 754, 347,
	350, 351, 769, 352, 337, 338, 353, 831, 354, 807,
	755, 355, 0, 363, 356, 357, 358, 339, 359, 362,
	808, 360, 0, 361, 809, 0, 364, 365, 0, 366,
	367, 368, 369, 370, 371, 749, 373, 0, 810, 811,
	812, 0, 0, 374, 375, 813, 814, 732, 376, 377,
	378, 379, 0, 0, 380, 381, 382, 383, 770, 384,
	0, 756, 385, 386, 387, 454, 815, 0, 0, 388,
	0, 0, 0, 0, 0, 389, 390, 0, 391, 392,
	393, 702, 0, 0, 0, 0, 0, 0, 0, 700,
	0, 0, 0, 0, 698, 699, 1356, 738, 726, 727,
	724, 725, 715, 711, 0, 0, 0, 0, 0, 714,
	0, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 772, 718, 0, 0, 0, 216, 217,
	218, 395, 779, 758, 780, 746, 781, 782, 0, 220,
	748, 747, 221, 222, 223, 721, 771, 783, 784, 405,
	0, 224, 776, 0, 762, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 818, 237, 238, 239, 765, 763, 764, 768,
	0, 766, 767, 240, 241, 464, 242, 785, 243, 786,
	787, 704, 244, 0, 245, 0, 246, 0, 0, 778,
	248, 0, 249, 0, 0, 0, 709, 250, 251, 253,
	254, 252, 255, 788, 789, 733, 819, 0, 0, 0,
	0, 0, 256, 257, 790, 791, 792, 0, 258, 0,
	259, 0, 0, 820, 260, 0, 261, 793, 0, 417,
	0, 262, 263, 264, 265, 266, 267, 773, 775, 822,
	0, 757, 0, 0, 0, 271, 1649, 268, 0, 821,
	269, 794, 760, 795, 796, 797, 798, 799, 0, 761,
	0, 272, 823, 273, 274, 275, 824, 800, 801, 0,
	0, 276, 277, 278, 0, 280, 279, 0, 802, 825,
	281, 282, 826, 0, 283, 284, 0, 0, 285, 0,
	286, 706, 705, 287, 288, 290, 750, 289, 827, 291,
	292, 294, 293, 701, 0, 734, 774, 295, 803, 296,
	297, 0, 759, 0, 0, 299, 300, 0, 0, 301,
	434, 828, 302, 829, 804, 303, 304, 305, 306, 307,
	308, 309, 0, 310, 805, 311, 437, 312, 1648, 313,
	314, 315, 316, 317, 806, 318, 319, 0, 320, 321,
	322, 323, 324, 0, 326, 327, 325, 328, 329, 330,
	331, 0, 332, 830, 0, 333, 334, 335, 710, 336,
	0, 340, 341, 342, 343, 344, 345, 346, 0, 348,
	349, 751, 752, 753, 754, 347, 350, 351, 769, 352,
	337, 338, 353, 831, 354, 807, 755, 355, 0, 363,
	356, 357, 358, 339, 359, 362, 808, 360, 0, 361,
	809, 0, 364, 365, 0, 366, 367, 368, 369, 370,
	371, 749, 373, 0, 810, 811, 812, 0, 0, 374,
	375, 813, 814, 732, 376, 377, 378, 379, 0, 0,
	380, 381, 382, 383, 770, 384, 0, 756, 385, 386,
	387, 454, 815, 0, 0, 388, 0, 0, 0, 0,
	0, 389, 390, 0, 391, 392, 393, 702, 0, 0,
	0, 0, 0, 0, 0, 700, 0, 0, 0, 0,
	698, 699, 0, 0, 0, 0, 0, 0, 0, 711,
	0, 0, 0, 0, 694, 714, 738, 726, 727, 724,
	725, 715, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 772, 718, 0, 0, 0, 216, 217, 218,
	395, 779, 758, 780, 746, 781, 782, 0, 220, 748,
	747, 221, 222, 223, 721, 771, 783, 784, 405, 0,
	224, 776, 0, 762, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 818, 237, 238, 239, 765, 763, 764, 768, 0,
	766, 767, 240, 241, 464, 242, 785, 243, 786, 787,
	704, 244, 0, 245, 0, 246, 0, 0, 778, 248,
	0, 249, 0, 0, 0, 709, 250, 251, 253, 254,
	252, 255, 788, 789, 733, 819, 0, 0, 0, 0,
	0, 256, 257, 790, 791, 792, 0, 258, 0, 259,
	0, 0, 820, 260, 0, 261, 793, 0, 417, 0,
	262, 263, 264, 265, 266, 267, 773, 775, 822, 0,
	757, 0, 0, 0, 271, 0, 268, 0, 821, 269,
	794, 760, 795, 796, 797, 798, 799, 0, 761, 0,
	272, 823, 273, 274, 275, 824, 800, 801, 0, 0,
	276, 277, 278, 0, 280, 279, 0, 802, 825, 281,
	282, 826, 0, 283, 284, 0, 0, 285, 0, 286,
	706, 705, 287, 288, 290, 750, 289, 827, 291, 292,
	294, 293, 701, 0, 734, 774, 295, 803, 296, 297,
	0, 759, 696, 0, 299, 300, 0, 0, 301, 434,
	828, 302, 829, 804, 303, 304, 305, 306, 307, 308,
	309, 0, 310, 805, 311, 437, 312, 0, 313, 314,
	315, 316, 317, 806, 318, 319, 0, 320, 321, 322,
	323, 324, 0, 326, 327, 325, 328, 329, 330, 331,
	0, 332, 830, 0, 333, 334, 335, 710, 336, 0,
	340, 341, 342, 343, 344, 345, 346, 0, 348, 349,
	751, 752, 753, 754, 347, 350, 351, 769, 352, 337,
	338, 353, 831, 354, 807, 755, 355, 0, 363, 356,
	357, 358, 339, 359, 362, 808, 360, 0, 361, 809,
	0, 364, 365, 0, 366, 367, 368, 369, 370, 371,
	749, 373, 0, 810, 811, 812, 0, 0, 374, 375,
	813, 814, 732, 376, 377, 378, 379, 0, 0, 380,
	381, 382, 383, 770, 384, 0, 756, 385, 386, 387,
	454, 815, 0, 0, 388, 0, 0, 0, 0, 0,
	389, 390, 0, 391, 392, 393, 702, 0, 0, 0,
	0, 0, 0, 0, 700, 0, 0, 0, 0, 698,
	699, 738, 726, 727, 724, 725, 715, 0, 711, 0,
	0, 0, 0, 0, 714, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 772, 718, 0,
	0, 0, 216, 217, 218, 395, 779, 758, 780, 746,
	781, 782, 0, 220, 748, 747, 221, 222, 223, 721,
	771, 783, 784, 405, 0, 224, 776, 0, 762, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 818, 237, 238, 239,
	765, 763, 764, 768, 0, 766, 767, 240, 241, 464,
	242, 785, 243, 786, 787, 704, 244, 0, 245, 0,
	246, 0, 0, 778, 248, 0, 249, 0, 0, 0,
	709, 250, 251, 253, 254, 252, 255, 788, 789, 733,
	819, 0, 0, 0, 0, 0, 256, 257, 790, 791,
	792, 0, 258, 0, 259, 0, 0, 820, 260, 0,
	261, 793, 0, 417, 0, 262, 263, 264, 265, 266,
	267, 773, 775, 822, 0, 757, 0, 0, 0, 271,
	0, 268, 0, 821, 269, 794, 760, 795, 796, 797,
	798, 799, 0, 761, 0, 272, 823, 273, 274, 275,
	824, 800, 801, 0, 0, 276, 277, 278, 0, 280,
	279, 0, 802, 825, 281, 282, 826, 0, 283, 284,
	0, 0, 285, 0, 286, 706, 705, 287, 288, 290,
	750, 289, 827, 291, 292, 294, 293, 701, 0, 734,
	774, 295, 803, 296, 297, 0, 759, 0, 0, 299,
	300, 0, 0, 301, 434, 828, 302, 829, 804, 303,
	304, 305, 306, 307, 308, 309, 0, 310, 805, 311,
	437, 312, 0, 313, 314, 315, 316, 317, 806, 318,
	319, 0, 320, 321, 322, 323, 324, 0, 326, 327,
	325, 328, 329, 330, 331, 0, 332, 830, 0, 333,
	334, 335, 710, 336, 0, 340, 341, 342, 343, 344,
	345, 346, 0, 348, 349, 751, 752, 753, 754, 347,
	350, 351, 769, 352, 337, 338, 353, 831, 354, 807,
	755, 355, 0, 363, 356, 357, 358, 339, 359, 362,
	808, 360, 0, 361, 809, 0, 364, 365, 0, 366,
	367, 368, 369, 370, 371, 749, 373, 0, 810, 811,
	812, 0, 0, 374, 375, 813, 814, 732, 376, 377,
	378, 379, 0, 0, 380, 381, 382, 383, 770, 384,
	0, 756, 385, 386, 387, 454, 815, 2390, 0, 388,
	0, 0, 0, 0, 0, 389, 390, 0, 391, 392,
	393, 702, 0, 0, 0, 0, 0, 0, 0, 700,
	0, 0, 0, 0, 698, 699, 738, 726, 727, 724,
	725, 715, 0, 711, 0, 0, 0, 0, 0, 714,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 772, 718, 0, 0, 0, 216, 217, 218,
	395, 779, 758, 780, 746, 781, 782, 0, 220, 748,
	747, 221, 222, 223, 721, 771, 783, 784, 405, 0,
	224, 776, 0, 762, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 818, 237, 238, 239, 765, 763, 764, 768, 0,
	766, 767, 240, 241, 464, 242, 785, 243, 786, 787,
	704, 244, 0, 245, 0, 246, 0, 0, 778, 248,
	0, 249, 0, 0, 0, 709, 250, 251, 253, 254,
	252, 255, 788, 789, 733, 819, 0, 0, 0, 0,
	0, 256, 257, 790, 791, 792, 0, 258, 0, 259,
	0, 0, 820, 260, 0, 261, 793, 0, 417, 0,
	262, 263, 264, 265, 266, 267, 773, 775, 822, 0,
	757, 0, 0, 0, 271, 0, 268, 0, 821, 269,
	794, 760, 795, 796, 797, 798, 799, 0, 761, 0,
	272, 823, 273, 274, 275, 824, 800, 801, 0, 0,
	276, 277, 278, 0, 280, 279, 0, 802, 825, 281,
	282, 826, 0, 283, 284, 0, 0, 285, 0, 286,
	706, 705, 287, 288, 290, 750, 289, 827, 291, 292,
	294, 293, 701, 0, 734, 774, 295, 803, 296, 297,
	0, 759, 696, 0, 299, 300, 0, 0, 301, 434,
	828, 302, 829, 804, 303, 304, 305, 306, 307, 308,
	309, 0, 310, 805, 311, 437, 312, 0, 313, 314,
	315, 316, 317, 806, 318, 319, 0, 320, 321, 322,
	323, 324, 0, 326, 327, 325, 328, 329, 330, 331,
	0, 332, 830, 0, 333, 334, 335, 710, 336, 0,
	340, 341, 342, 343, 344, 345, 346, 0, 348, 349,
	751, 752, 753, 754, 347, 350, 351, 769, 352, 337,
	338, 353, 831, 354, 807, 755, 355, 0, 363, 356,
	357, 358, 339, 359, 362, 808, 360, 0, 361, 809,
	0, 364, 365, 0, 366, 367, 368, 369, 370, 371,
	749, 373, 0, 810, 811, 812, 0, 0, 374, 375,
	813, 814, 732, 376, 377, 378, 379, 0, 0, 380,
	381, 382, 383, 770, 384, 0, 756, 385, 386, 387,
	454, 815, 0, 0, 388, 0, 0, 0, 0, 0,
	389, 390, 0, 391, 392, 393, 702, 0, 0, 0,
	0, 0, 0, 0, 700, 0, 0, 0, 0, 698,
	699, 738, 726, 727, 724, 725, 715, 0, 711, 0,
	0, 0, 0, 0, 714, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 772, 718, 0,
	0, 0, 216, 217, 218, 395, 779, 758, 780, 746,
	781, 782, 0, 220, 748, 747, 221, 222, 223, 721,
	771, 783, 784, 405, 0, 224, 776, 0, 762, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 818, 237, 238, 239,
	765, 763, 764, 768, 0, 766, 767, 240, 241, 464,
	242, 785, 243, 786, 787, 704, 244, 0, 245, 0,
	246, 0, 0, 778, 248, 0, 249, 0, 0, 0,
	709, 250, 251, 253, 254, 252, 255, 788, 789, 733,
	819, 0, 0, 0, 0, 0, 256, 257, 790, 791,
	792, 0, 258, 0, 259, 0, 0, 820, 260, 0,
	261, 793, 0, 417, 0, 262, 263, 264, 265, 266,
	267, 773, 775, 822, 0, 757, 0, 0, 0, 271,
	0, 268, 0, 821, 269, 794, 760, 795, 796, 797,
	798, 799, 0, 761, 0, 272, 823, 273, 274, 275,
	824, 800, 801, 0, 0, 276, 277, 278, 0, 280,
	279, 0, 802, 825, 281, 282, 826, 0, 283, 284,
	0, 0, 285, 0, 286, 706, 705, 287, 288, 290,
	750, 289, 827, 291, 292, 294, 293, 701, 0, 734,
	774, 295, 803, 296, 297, 0, 759, 0, 0, 299,
	300, 0, 0, 301, 434, 828, 302, 829, 804, 303,
	304, 305, 306, 307, 308, 309, 0, 310, 805, 311,
	437, 312, 0, 313, 314, 315, 316, 317, 806, 318,
	319, 0, 320, 321, 322, 323, 324, 0, 326, 327,
	325, 328, 329, 330, 331, 0, 332, 830, 0, 333,
	334, 335, 710, 336, 0, 340, 341, 342, 343, 344,
	345, 346, 0, 348, 349, 751, 752, 753, 754, 347,
	350, 351, 769, 352, 337, 338, 353, 831, 354, 807,
	755, 355, 0, 363, 356, 357, 358, 339, 359, 362,
	808, 360, 0, 361, 809, 0, 364, 365, 0, 366,
	367, 368, 369, 370, 371, 749, 373, 0, 810, 811,
	812, 0, 0, 374, 375, 813, 814, 732, 376, 377,
	378, 379, 0, 0, 380, 381, 382, 383, 770, 384,
	0, 756, 385, 386, 387, 454, 815, 0, 0, 388,
	0, 0, 0, 0, 0, 389, 390, 0, 391, 392,
	393, 702, 0, 0, 0, 0, 0, 0, 0, 700,
	0, 0, 0, 0, 698, 699, 1356, 738, 726, 727,
	724, 725, 715, 711, 0, 0, 0, 0, 0, 714,
	0, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 772, 718, 0, 0, 0, 216, 217,
	218, 395, 779, 758, 780, 746, 781, 782, 0, 220,
	748, 747, 221, 222, 223, 721, 771, 783, 784, 405,
	0, 224, 776, 0, 762, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 818, 237, 238, 239, 765, 763, 764, 768,
	0, 766, 767, 240, 241, 464, 242, 785, 243, 786,
	787, 704, 244, 0, 245, 0, 246, 0, 0, 778,
	248, 0, 249, 0, 0, 0, 709, 250, 251, 253,
	254, 252, 255, 788, 789, 733, 819, 0, 0, 0,
	0, 0, 256, 257, 790, 791, 792, 0, 258, 0,
	259, 0, 1823, 820, 260, 0, 261, 793, 0, 417,
	0, 262, 263, 264, 265, 266, 267, 773, 775, 822,
	0, 757, 0, 0, 0, 271, 0, 268, 0, 821,
	269, 794, 760, 795, 796, 797, 798, 799, 0, 761,
	0, 272, 823, 273, 274, 275, 824, 800, 801, 0,
	0, 276, 277, 278, 0, 280, 279, 0, 802, 825,
	281, 282, 826, 0, 283, 284, 0, 0, 285, 0,
	286, 706, 705, 287, 288, 290, 750, 289, 827, 291,
	292, 294, 293, 701, 0, 734, 774, 295, 803, 296,
	297, 0, 759, 0, 0, 299, 300, 0, 0, 301,
	434, 828, 302, 829, 804, 303, 304, 305, 306, 307,
	308, 309, 0, 310, 805, 311, 437, 312, 0, 313,
	314, 315, 316, 317, 806, 318, 319, 0, 320, 321,
	322, 323, 324, 0, 326, 327, 325, 328, 329, 330,
	331, 0, 332, 830, 0, 333, 334, 335, 710, 336,
	0, 340, 341, 342, 343, 344, 345, 346, 0, 348,
	349, 751, 752, 753, 754, 347, 350, 351, 769, 352,
	337, 338, 353, 831, 354, 807, 755, 355, 0, 363,
	356, 357, 358, 339, 359, 362, 808, 360, 0, 361,
	809, 0, 364, 365, 0, 366, 367, 368, 369, 370,
	371, 749, 373, 0, 810, 811, 812, 0, 0, 374,
	375, 813, 814, 732, 376, 377, 378, 379, 0, 0,
	380, 381, 382, 383, 770, 384, 0, 756, 385, 386,
	387, 454, 815, 0, 0, 388, 0, 0, 0, 0,
	0, 389, 390, 0, 391, 392, 393, 702, 0, 0,
	0, 0, 0, 0, 0, 700, 0, 0, 0, 0,
	698, 699, 0, 0, 0, 0, 0, 0, 0, 711,
	0, 0, 0, 0, 1857, 714, 738, 726, 727, 724,
	725, 715, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 772, 718, 0, 0, 0, 216, 217, 218,
	395, 779, 758, 780, 746, 781, 782, 0, 220, 748,
	747, 221, 222, 223, 721, 771, 783, 784, 405, 0,
	224, 776, 0, 762, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 818, 237, 238, 239, 765, 763, 764, 768, 0,
	766, 767, 240, 241, 464, 242, 785, 243, 786, 787,
	704, 244, 0, 245, 0, 246, 0, 0, 778, 248,
	0, 249, 0, 0, 0, 709, 250, 251, 253, 254,
	252, 255, 788, 789, 733, 819, 0, 0, 0, 0,
	0, 256, 257, 790, 791, 792, 0, 258, 0, 259,
	0, 0, 820, 260, 0, 261, 793, 0, 417, 0,
	262, 263, 264, 265, 266, 267, 773, 775, 822, 0,
	757, 0, 0, 0, 271, 0, 268, 0, 821, 269,
	794, 760, 795, 796, 797, 798, 799, 0, 761, 0,
	272, 823, 273, 274, 275, 824, 800, 801, 0, 0,
	276, 277, 278, 0, 280, 279, 0, 802, 825, 281,
	282, 826, 0, 283, 284, 0, 0, 285, 0, 286,
	706, 705, 287, 288, 290, 750, 289, 827, 291, 292,
	294, 293, 701, 0, 734, 774, 295, 803, 296, 297,
	0, 759, 0, 0, 299, 300, 0, 0, 301, 434,
	828, 302, 829, 804, 303, 304, 305, 306, 307, 308,
	309, 0, 310, 805, 311, 437, 312, 0, 313, 314,
	315, 316, 317, 806, 318, 319, 0, 320, 321, 322,
	323, 324, 0, 326, 327, 325, 328, 329, 330, 331,
	0, 332, 830, 0, 333, 334, 335, 710, 336, 0,
	340, 341, 342, 343, 344, 345, 346, 0, 348, 349,
	751, 752, 753, 754, 347, 350, 351, 769, 352, 337,
	338, 353, 831, 354, 807, 755, 355, 0, 363, 356,
	357, 358, 339, 359, 362, 808, 360, 0, 361, 809,
	0, 364, 365, 0, 366, 367, 368, 369, 370, 371,
	749, 373, 0, 810, 811, 812, 0, 0, 374, 375,
	813, 814, 732, 376, 377, 378, 379, 0, 0, 380,
	381, 382, 383, 770, 384, 0, 756, 385, 386, 387,
	454, 815, 0, 0, 388, 0, 0, 0, 0, 0,
	389, 390, 0, 391, 392, 393, 702, 0, 0, 0,
	0, 0, 0, 0, 700, 0, 0, 0, 0, 698,
	699, 0, 0, 0, 0, 0, 0, 0, 711, 0,
	0, 0, 0, 1811, 714, 738, 726, 727, 724, 725,
	715, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 213, 214, 0, 215, 0, 0, 0,
	0, 772, 718, 0, 0, 0, 216, 217, 218, 395,
	779, 758, 780, 746, 781, 782, 0, 220, 748, 747,
	221, 222, 223, 721, 771, 783, 784, 405, 0, 224,
	776, 0, 762, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	818, 237, 238, 239, 765, 763, 764, 768, 0, 766,
	767, 240, 241, 464, 242, 785, 243, 786, 787, 704,
	244, 0, 245, 0, 246, 0, 0, 778, 248, 0,
	249, 0, 0, 0, 709, 250, 251, 253, 254, 252,
	255, 788, 789, 733, 819, 0, 0, 0, 0, 0,
	256, 257, 790, 791, 792, 0, 258, 0, 259, 0,
	0, 820, 260, 0, 261, 793, 0, 417, 0, 262,
	263, 264, 265, 266, 267, 773, 775, 822, 0, 757,
	0, 0, 0, 271, 0, 268, 0, 821, 269, 794,
	760, 795, 796, 797, 798, 799, 0, 761, 0, 272,
	823, 273, 274, 275, 824, 800, 801, 0, 0, 276,
	277, 278, 0, 280, 279, 0, 802, 825, 281, 282,
	826, 0, 283, 284, 0, 0, 285, 0, 286, 706,
	705, 287, 288, 290, 750, 289, 827, 291, 292, 294,
	293, 701, 0, 734, 774, 295, 803, 296, 297, 0,
	759, 0, 0, 299, 300, 0, 0, 301, 434, 828,
	302, 829, 804, 303, 304, 305, 306, 307, 308, 309,
	0, 310, 805, 311, 437, 312, 0, 313, 314, 315,
	316, 317, 806, 318, 319, 0, 320, 321, 322, 323,
	324, 0, 326, 327, 325, 328, 329, 330, 331, 0,
	332, 830, 0, 333, 334, 335, 710, 336, 0, 340,
	341, 342, 343, 344, 345, 346, 0, 348, 349, 751,
	752, 753, 754, 347, 350, 351, 769, 352, 337, 338,
	353, 831, 354, 807, 755, 355, 0, 363, 356, 357,
	358, 339, 359, 362, 808, 360, 0, 361, 809, 0,
	364, 365, 0, 366, 367, 368, 369, 370, 371, 749,
	373, 0, 810, 811, 812, 0, 0, 374, 375, 813,
	814, 732, 376, 377, 378, 379, 0, 0, 380, 381,
	382, 383, 770, 384, 0, 756, 385, 386, 387, 454,
	815, 0, 0, 388, 0, 0, 0, 0, 0, 389,
	390, 0, 391, 392, 393, 702, 0, 0, 0, 0,
	0, 0, 0, 700, 0, 0, 0, 0, 698, 699,
	0, 0, 0, 0, 0, 0, 0, 711, 0, 0,
	0, 0, 1799, 714, 738, 726, 727, 724, 725, 715,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 213, 214, 0, 215, 0, 0, 0, 0,
	772, 718, 0, 0, 0, 216, 217, 218, 395, 779,
	758, 780, 746, 781, 782, 0, 220, 748, 747, 221,
	222, 223, 721, 771, 783, 784, 405, 0, 224, 776,
	0, 762, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 818,
	237, 238, 239, 765, 763, 764, 768, 0, 766, 767,
	240, 241, 464, 242, 785, 243, 786, 787, 704, 244,
	0, 245, 0, 246, 0, 0, 778, 248, 0, 249,
	0, 0, 0, 709, 250, 251, 253, 254, 252, 255,
	788, 789, 733, 819, 0, 0, 0, 0, 0, 256,
	257, 790, 791, 792, 0, 258, 0, 259, 0, 0,
	820, 260, 0, 261, 793, 0, 417, 0, 262, 263,
	264, 265, 266, 267, 773, 775, 822, 0, 757, 0,
	0, 0, 271, 0, 268, 0, 821, 269, 794, 760,
	795, 796, 797, 798, 799, 0, 761, 0, 272, 823,
	273, 274, 275, 824, 800, 801, 0, 0, 276, 277,
	278, 0, 280, 279, 0, 802, 825, 281, 282, 826,
	0, 283, 284, 0, 0, 285, 0, 286, 706, 705,
	287, 288, 290, 750, 289, 827, 291, 292, 294, 293,
	701, 0, 734, 774, 295, 803, 296, 297, 0, 759,
	0, 0, 299, 300, 0, 0, 301, 434, 828, 302,
	829, 804, 303, 304, 305, 306, 307, 308, 309, 0,
	310, 805, 311, 437, 312, 0, 313, 314, 315, 316,
	317, 806, 318, 319, 0, 320, 321, 322, 323, 324,
	0, 326, 327, 325, 328, 329, 330, 331, 0, 332,
	830, 0, 333, 334, 335, 710, 336, 0, 340, 341,
	342, 343, 344, 345, 346, 0, 348, 349, 751, 752,
	753, 754, 347, 350, 351, 769, 352, 337, 338, 353,
	831, 354, 807, 755, 355, 0, 363, 356, 357, 358,
	339, 359, 362, 808, 360, 0, 361, 809, 0, 364,
	365, 0, 366, 367, 368, 369, 370, 371, 749, 373,
	0, 810, 811, 812, 0, 0, 374, 375, 813, 814,
	732, 376, 377, 378, 379, 0, 0, 380, 381, 382,
	383, 770, 384, 0, 756, 385, 386, 387, 454, 815,
	0, 0, 388, 0, 0, 0, 0, 0, 389, 390,
	0, 391, 392, 393, 702, 0, 0, 0, 0, 0,
	0, 0, 700, 0, 0, 0, 0, 698, 699, 0,
	0, 0, 0, 0, 0, 0, 711, 0, 0, 0,
	0, 1797, 714, 738, 726, 727, 724, 725, 715, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 772,
	718, 0, 0, 0, 216, 217, 218, 395, 779, 758,
	780, 746, 781, 782, 0, 220, 748, 747, 221, 222,
	223, 721, 771, 783, 784, 405, 0, 224, 776, 0,
	762, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 818, 237,
	238, 239, 765, 763, 764, 768, 0, 766, 767, 240,
	241, 464, 242, 785, 243, 786, 787, 704, 244, 0,
	245, 0, 246, 0, 0, 778, 248, 0, 249, 0,
	0, 0, 709, 250, 251, 253, 254, 252, 255, 788,
	789, 733, 819, 0, 0, 0, 0, 0, 256, 257,
	790, 791, 792, 0, 258, 0, 259, 0, 0, 820,
	260, 0, 261, 793, 0, 417, 0, 262, 263, 264,
	265, 266, 267, 773, 775, 822, 0, 757, 0, 0,
	0, 271, 0, 268, 0, 821, 269, 794, 760, 795,
	796, 797, 798, 799, 0, 761, 0, 272, 823, 273,
	274, 275, 824, 800, 801, 0, 0, 276, 277, 278,
	0, 280, 279, 0, 802, 825, 281, 282, 826, 0,
	283, 284, 0, 0, 285, 0, 286, 706, 705, 287,
	288, 290, 750, 289, 827, 291, 292, 294, 293, 701,
	0, 734, 774, 295, 803, 296, 297, 0, 759, 0,
	0, 299, 300, 0, 0, 301, 434, 828, 302, 829,
	804, 303, 304, 305, 306, 307, 308, 309, 0, 310,
	805, 311, 437, 312, 0, 313, 314, 315, 316, 317,
	806, 318, 319, 0, 320, 321, 322, 323, 324, 0,
	326, 327, 325, 328, 329, 330, 331, 0, 332, 830,
	0, 333, 334, 335, 710, 336, 0, 340, 341, 342,
	343, 344, 345, 346, 0, 348, 349, 751, 752, 753,
	754, 347, 350, 351, 769, 352, 337, 338, 353, 831,
	354, 807, 755, 355, 0, 363, 356, 357, 358, 339,
	359, 362, 808, 360, 0, 361, 809, 0, 364, 365,
	0, 366, 367, 368, 369, 370, 371, 749, 373, 0,
	810, 811, 812, 0, 0, 374, 375, 813, 814, 732,
	376, 377, 378, 379, 0, 0, 380, 381, 382, 383,
	770, 384, 0, 756, 385, 386, 387, 454, 815, 0,
	0, 388, 0, 0, 0, 0, 0, 389, 390, 0,
	391, 392, 393, 702, 0, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 0, 0, 698, 699, 0, 0,
	0, 0, 0, 0, 0, 711, 0, 0, 0, 0,
	1795, 714, 738, 726, 727, 724, 725, 715, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 772, 718,
	0, 0, 0, 216, 217, 218, 395, 779, 758, 780,
	746, 781, 782, 0, 220, 748, 747, 221, 222, 223,
	721, 771, 783, 784, 405, 0, 224, 776, 0, 762,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 818, 237, 238,
	239, 765, 763, 764, 768, 0, 766, 767, 240, 241,
	464, 242, 785, 243, 786, 787, 704, 244, 0, 245,
	0, 246, 0, 0, 778, 248, 0, 249, 0, 0,
	0, 709, 250, 251, 253, 254, 252, 255, 788, 789,
	733, 819, 0, 0, 0, 0, 0, 256, 257, 790,
	791, 792, 0, 258, 0, 259, 0, 0, 820, 260,
	0, 261, 793, 0, 417, 0, 262, 263, 264, 265,
	266, 267, 773, 775, 822, 0, 757, 0, 0, 0,
	271, 0, 268, 0, 821, 269, 794, 760, 795, 796,
	797, 798, 799, 0, 761, 0, 272, 823, 273, 274,
	275, 824, 800, 801, 0, 0, 276, 277, 278, 0,
	280, 279, 0, 802, 825, 281, 282, 826, 0, 283,
	284, 0, 0, 285, 0, 286, 706, 705, 287, 288,
	290, 750, 289, 827, 291, 292, 294, 293, 701, 0,
	734, 774, 295, 803, 296, 297, 0, 759, 0, 0,
	299, 300, 0, 0, 301, 434, 828, 302, 829, 804,
	303, 304, 305, 306, 307, 308, 309, 0, 310, 805,
	311, 437, 312, 0, 313, 314, 315, 316, 317, 806,
	318, 319, 0, 320, 321, 322, 323, 324, 0, 326,
	327, 325, 328, 329, 330, 331, 0, 332, 830, 0,
	333, 334, 335, 710, 336, 0, 340, 341, 342, 343,
	344, 345, 346, 0, 348, 349, 751, 752, 753, 754,
	347, 350, 351, 769, 352, 337, 338, 353, 831, 354,
	807, 755, 355, 0, 363, 356, 357, 358, 339, 359,
	362, 808, 360, 0, 361, 809, 0, 364, 365, 0,
	366, 367, 368, 369, 370, 371, 749, 373, 0, 810,
	811, 812, 0, 0, 374, 375, 813, 814, 732, 376,
	377, 378, 379, 0, 0, 380, 381, 382, 383, 770,
	384, 0, 756, 385, 386, 387, 454, 815, 0, 0,
	388, 0, 0, 0, 0, 0, 389, 390, 0, 391,
	392, 393, 702, 0, 0, 0, 0, 0, 0, 0,
	700, 0, 0, 0, 0, 698, 699, 0, 0, 0,
	0, 0, 0, 0, 711, 0, 0, 0, 0, 1792,
	714, 1784, 726, 727, 724, 725, 715, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 772, 718, 0,
	0, 0, 216, 217, 218, 395, 779, 758, 780, 746,
	781, 782, 0, 220, 748, 747, 221, 222, 223, 721,
	771, 783, 784, 405, 0, 224, 776, 0, 762, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 818, 237, 238, 239,
	765, 763, 764, 768, 0, 766, 767, 240, 241, 464,
	242, 785, 1787, 786, 787, 704, 244, 0, 245, 0,
	246, 0, 0, 778, 248, 0, 249, 0, 0, 0,
	709, 250, 251, 253, 254, 252, 255, 788, 789, 733,
	819, 0, 0, 0, 0, 0, 256, 257, 790, 791,
	792, 0, 258, 0, 259, 0, 0, 820, 260, 0,
	261, 793, 0, 417, 0, 262, 263, 1788, 265, 266,
	267, 773, 775, 822, 0, 757, 0, 0, 0, 271,
	0, 268, 0, 821, 269, 794, 760, 795, 796, 797,
	798, 799, 0, 761, 0, 272, 823, 273, 274, 275,
	824, 800, 801, 0, 0, 276, 277, 278, 0, 280,
	279, 0, 802, 825, 281, 282, 826, 0, 283, 284,
	0, 0, 285, 0, 286, 706, 705, 1789, 1786, 290,
	750, 289, 827, 291, 292, 294, 293, 701, 0, 734,
	774, 295, 803, 296, 297, 0, 759, 0, 0, 299,
	300, 0, 0, 301, 434, 828, 302, 829, 804, 303,
	304, 305, 306, 307, 308, 309, 0, 310, 805, 311,
	437, 312, 0, 313, 314, 315, 316, 317, 806, 318,
	319, 0, 320, 321, 322, 323, 324, 0, 326, 327,
	325, 328, 329, 330, 331, 0, 332, 830, 0, 333,
	334, 335, 710, 336, 0, 340, 341, 342, 343, 344,
	345, 1790, 0, 348, 349, 751, 752, 753, 754, 347,
	350, 351, 769, 352, 337, 338, 353, 831, 354, 807,
	755, 355, 0, 363, 356, 357, 358, 339, 359, 362,
	808, 360, 0, 361, 809, 0, 364, 365, 0, 366,
	367, 368, 369, 370, 371, 749, 373, 0, 810, 811,
	812, 0, 0, 374, 375, 813, 814, 732, 376, 377,
	378, 379, 0, 0, 380, 381, 382, 383, 770, 384,
	0, 756, 385, 386, 387, 454, 815, 0, 0, 388,
	0, 0, 0, 0, 0, 389, 390, 0, 391, 1785,
	393, 702, 0, 0, 0, 0, 0, 0, 0, 700,
	0, 0, 0, 0, 698, 699, 0, 0, 0, 0,
	0, 0, 0, 711, 0, 0, 0, 0, 1781, 714,
	1784, 726, 727, 724, 725, 715, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 213, 214,
	0, 215, 0, 0, 0, 0, 772, 718, 0, 0,
	0, 216, 217, 218, 395, 779, 758, 780, 746, 781,
	782, 0, 220, 748, 747, 221, 222, 223, 721, 771,
	783, 784, 405, 0, 224, 776, 0, 762, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 818, 237, 238, 239, 765,
	763, 764, 768, 0, 766, 767, 240, 241, 464, 242,
	785, 1787, 786, 787, 704, 244, 0, 245, 0, 246,
	0, 0, 778, 248, 0, 249, 0, 0, 0, 709,
	250, 251, 253, 254, 252, 255, 788, 789, 733, 819,
	0, 0, 0, 0, 0, 256, 257, 790, 791, 792,
	0, 258, 0, 259, 0, 0, 820, 260, 0, 261,
	793, 0, 417, 0, 262, 263, 1788, 265, 266, 267,
	773, 775, 822, 0, 757, 0, 0, 0, 271, 0,
	268, 0, 821, 269, 794, 760, 795, 796, 797, 798,
	799, 0, 761, 0, 272, 823, 273, 274, 275, 824,
	800, 801, 0, 0, 276, 277, 278, 0, 280, 279,
	0, 802, 825, 281, 282, 826, 0, 283, 284, 0,
	0, 285, 0, 286, 706, 705, 1789, 1786, 290, 750,
	289, 827, 291, 292, 294, 293, 701, 0, 734, 774,
	295, 803, 296, 297, 0, 759, 0, 0, 299, 300,
	0, 0, 301, 434, 828, 302, 829, 804, 303, 304,
	305, 306, 307, 308, 309, 0, 310, 805, 311, 437,
	312, 0, 313, 314, 315, 316, 317, 806, 318, 319,
	0, 320, 321, 322, 323, 324, 0, 326, 327, 325,
	328, 329, 330, 331, 0, 332, 830, 0, 333, 334,
	335, 710, 336, 0, 340, 341, 342, 343, 344, 345,
	1790, 0, 348, 349, 751, 752, 753, 754, 347, 350,
	351, 769, 352, 337, 338, 353, 831, 354, 807, 755,
	355, 0, 363, 356, 357, 358, 339, 359, 362, 808,
	360, 0, 361, 809, 0, 364, 365, 0, 366, 367,
	368, 369, 370, 371, 749, 373, 0, 810, 811, 812,
	0, 0, 374, 375, 813, 814, 732, 376, 377, 378,
	379, 0, 0, 380, 381, 382, 383, 770, 384, 0,
	756, 385, 386, 387, 454, 815, 0, 0, 388, 0,
	0, 0, 0, 0, 389, 390, 0, 391, 1785, 393,
	702, 0, 0, 0, 0, 0, 0, 0, 700, 0,
	0, 0, 0, 698, 699, 738, 726, 727, 724, 725,
	715, 0, 711, 0, 0, 0, 0, 0, 714, 0,
	0, 211, 212, 213, 214, 0, 215, 0, 0, 0,
	0, 772, 718, 0, 0, 0, 216, 217, 218, 395,
	779, 758, 780, 746, 781, 782, 0, 220, 748, 747,
	221, 222, 223, 721, 771, 783, 784, 405, 0, 224,
	776, 0, 762, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	818, 237, 238, 239, 765, 763, 764, 768, 0, 766,
	767, 240, 241, 464, 242, 785, 243, 786, 787, 704,
	244, 0, 245, 0, 246, 0, 0, 778, 248, 0,
	249, 0, 0, 0, 709, 250, 251, 253, 254, 252,
	255, 788, 789, 733, 819, 0, 0, 0, 0, 0,
	256, 257, 790, 791, 792, 0, 258, 0, 259, 0,
	0, 820, 260, 0, 261, 793, 0, 417, 0, 262,
	263, 264, 265, 266, 267, 773, 775, 822, 0, 757,
	0, 0, 0, 271, 0, 268, 0, 821, 269, 794,
	760, 795, 796, 797, 798, 799, 0, 761, 0, 272,
	823, 273, 274, 275, 824, 800, 801, 0, 0, 276,
	277, 278, 0, 280, 279, 0, 802, 825, 281, 282,
	826, 0, 283, 284, 0, 0, 285, 0, 286, 706,
	705, 287, 288, 290, 750, 289, 827, 291, 292, 294,
	293, 701, 0, 734, 774, 295, 803, 296, 297, 0,
	759, 0, 0, 299, 300, 0, 0, 301, 434, 828,
	302, 829, 804, 303, 304, 305, 306, 307, 308, 309,
	0, 310, 805, 311, 437, 312, 0, 313, 314, 315,
	316, 317, 806, 318, 319, 0, 320, 321, 322, 323,
	324, 0, 326, 327, 325, 328, 329, 330, 331, 0,
	332, 830, 0, 333, 334, 335, 710, 336, 0, 340,
	341, 342, 343, 344, 345, 346, 0, 348, 349, 751,
	752, 753, 754, 347, 350, 351, 769, 352, 337, 338,
	353, 831, 354, 807, 755, 355, 0, 363, 356, 357,
	358, 339, 359, 362, 808, 360, 0, 361, 809, 0,
	364, 365, 0, 366, 367, 368, 369, 370, 371, 749,
	373, 0, 810, 811, 812, 0, 0, 374, 375, 813,
	814, 732, 376, 377, 378, 379, 0, 0, 380, 381,
	382, 383, 770, 384, 0, 756, 385, 386, 387, 454,
	815, 0, 0, 388, 0, 0, 0, 0, 0, 389,
	390, 0, 391, 392, 393, 702, 0, 0, 0, 0,
	0, 0, 0, 700, 0, 0, 0, 0, 698, 699,
	0, 0, 0, 0, 0, 1300, 0, 711, 0, 0,
	0, 0, 0, 714, 738, 726, 727, 724, 725, 715,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 213, 214, 1636, 215, 0, 0, 0, 0,
	772, 718, 0, 0, 0, 216, 217, 218, 395, 779,
	758, 780, 746, 781, 782, 0, 220, 748, 747, 221,
	222, 223, 721, 771, 783, 784, 405, 0, 224, 776,
	0, 762, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 818,
	237, 238, 239, 765, 763, 764, 768, 0, 766, 767,
	240, 241, 464, 242, 785, 243, 786, 787, 704, 244,
	0, 245, 0, 246, 0, 0, 778, 248, 0, 249,
	0, 0, 0, 709, 250, 251, 253, 254, 252, 255,
	788, 789, 733, 819, 0, 0, 0, 0, 0, 256,
	257, 790, 791, 792, 0, 258, 0, 259, 0, 0,
	820, 260, 0, 261, 793, 0, 417, 0, 262, 263,
	264, 265, 266, 267, 773, 775, 822, 0, 757, 0,
	0, 0, 271, 0, 268, 0, 821, 269, 794, 760,
	795, 796, 797, 798, 799, 0, 761, 0, 272, 823,
	273, 274, 275, 824, 800, 801, 0, 0, 276, 277,
	278, 0, 280, 279, 0, 802, 825, 281, 282, 826,
	0, 283, 284, 0, 0, 285, 0, 286, 706, 705,
	287, 288, 290, 750, 289, 827, 291, 292, 294, 293,
	701, 0, 734, 774, 295, 803, 296, 297, 0, 759,
	0, 0, 299, 300, 0, 0, 301, 434, 828, 302,
	829, 804, 303, 304, 305, 306, 307, 308, 309, 0,
	310, 805, 311, 437, 312, 0, 313, 314, 315, 316,
	317, 806, 318, 319, 0, 320, 321, 322, 323, 324,
	0, 326, 327, 325, 328, 329, 330, 331, 0, 332,
	830, 0, 333, 334, 335, 710, 336, 0, 340, 341,
	342, 343, 344, 345, 346, 0, 348, 349, 751, 752,
	753, 754, 347, 350, 351, 769, 352, 337, 338, 353,
	831, 354, 807, 755, 355, 0, 363, 356, 357, 358,
	339, 359, 362, 808, 360, 0, 361, 809, 0, 364,
	365, 0, 366, 367, 368, 369, 370, 371, 749, 373,
	0, 810, 811, 812, 0, 0, 374, 375, 813, 814,
	732, 376, 377, 378, 379, 0, 0, 380, 381, 382,
	383, 770, 384, 0, 756, 385, 386, 387, 454, 815,
	0, 0, 388, 0, 0, 0, 0, 0, 389, 390,
	0, 391, 392, 393, 702, 0, 0, 0, 0, 0,
	0, 0, 700, 0, 0, 0, 0, 698, 699, 0,
	0, 0, 0, 0, 0, 0, 711, 0, 0, 0,
	0, 1020, 714, 738, 726, 727, 724, 725, 715, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 772,
	718, 0, 0, 0, 216, 217, 218, 395, 779, 758,
	780, 746, 781, 782, 0, 220, 748, 747, 221, 222,
	223, 721, 771, 783, 784, 405, 0, 224, 776, 0,
	762, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 818, 237,
	238, 239, 765, 763, 764, 768, 0, 766, 767, 240,
	241, 464, 242, 785, 243, 786, 787, 704, 244, 0,
	245, 0, 246, 0, 0, 778, 248, 0, 249, 0,
	0, 0, 709, 250, 251, 253, 254, 252, 255, 788,
	789, 733, 819, 0, 0, 0, 0, 0, 256, 257,
	790, 791, 792, 0, 258, 0, 259, 0, 0, 820,
	260, 0, 261, 793, 0, 417, 0, 262, 263, 264,
	265, 266, 267, 773, 775, 822, 0, 757, 0, 0,
	0, 271, 0, 268, 0, 821, 269, 794, 760, 795,
	796, 797, 798, 799, 0, 761, 0, 272, 823, 273,
	274, 275, 824, 800, 801, 0, 0, 276, 277, 278,
	0, 280, 279, 0, 802, 825, 281, 282, 826, 0,
	283, 284, 0, 0, 285, 0, 286, 706, 705, 287,
	288, 290, 750, 289, 827, 291, 292, 294, 293, 701,
	0, 734, 774, 295, 803, 296, 297, 0, 759, 0,
	0, 299, 300, 0, 0, 301, 434, 828, 302, 829,
	804, 303, 304, 305, 306, 307, 308, 309, 0, 310,
	805, 311, 437, 312, 0, 313, 314, 315, 316, 317,
	806, 318, 319, 0, 320, 321, 322, 323, 324, 0,
	326, 327, 325, 328, 329, 330, 331, 0, 332, 830,
	0, 333, 334, 335, 710, 336, 0, 340, 341, 342,
	343, 344, 345, 346, 0, 348, 349, 751, 752, 753,
	754, 347, 350, 351, 769, 352, 337, 338, 353, 831,
	354, 807, 755, 355, 0, 363, 356, 357, 358, 339,
	359, 362, 808, 360, 0, 361, 809, 0, 364, 365,
	0, 366, 367, 368, 369, 370, 371, 749, 373, 0,
	810, 811, 812, 0, 0, 374, 375, 813, 814, 732,
	376, 377, 378, 379, 0, 0, 380, 381, 382, 383,
	770, 384, 0, 756, 385, 386, 387, 454, 815, 0,
	0, 388, 0, 0, 0, 0, 0, 389, 390, 0,
	391, 392, 393, 702, 0, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 0, 0, 698, 699, 0, 0,
	0, 0, 0, 0, 0, 711, 0, 0, 0, 0,
	1018, 714, 738, 726, 727, 724, 725, 715, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 772, 718,
	0, 0, 0, 216, 217, 218, 395, 779, 758, 780,
	746, 781, 782, 0, 220, 748, 747, 221, 222, 223,
	721, 771, 783, 784, 405, 0, 224, 776, 0, 762,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 818, 237, 238,
	239, 765, 763, 764, 768, 0, 766, 767, 240, 241,
	464, 242, 785, 243, 786, 787, 704, 244, 0, 245,
	0, 246, 0, 0, 778, 248, 0, 249, 0, 0,
	0, 709, 250, 251, 253, 254, 252, 255, 788, 789,
	733, 819, 0, 0, 0, 0, 0, 256, 257, 790,
	791, 792, 0, 258, 0, 259, 0, 0, 820, 260,
	0, 261, 793, 0, 417, 0, 262, 263, 264, 265,
	266, 267, 773, 775, 822, 0, 757, 0, 0, 0,
	271, 0, 268, 0, 821, 269, 794, 760, 795, 796,
	797, 798, 799, 0, 761, 0, 272, 823, 273, 274,
	275, 824, 800, 801, 0, 0, 276, 277, 278, 0,
	280, 279, 0, 802, 825, 281, 282, 826, 0, 283,
	284, 0, 0, 285, 0, 286, 706, 705, 287, 288,
	290, 750, 289, 827, 291, 292, 294, 293, 701, 0,
	734, 774, 295, 803, 296, 297, 0, 759, 0, 0,
	299, 300, 0, 0, 301, 434, 828, 302, 829, 804,
	303, 304, 305, 306, 307, 308, 309, 0, 310, 805,
	311, 437, 312, 0, 313, 314, 315, 316, 317, 806,
	318, 319, 0, 320, 321, 322, 323, 324, 0, 326,
	327, 325, 328, 329, 330, 331, 0, 332, 830, 0,
	333, 334, 335, 710, 336, 0, 340, 341, 342, 343,
	344, 345, 346, 0, 348, 349, 751, 752, 753, 754,
	347, 350, 351, 769, 352, 337, 338, 353, 831, 354,
	807, 755, 355, 0, 363, 356, 357, 358, 339, 359,
	362, 808, 360, 0, 361, 809, 0, 364, 365, 0,
	366, 367, 368, 369, 370, 371, 749, 373, 0, 810,
	811, 812, 0, 0, 374, 375, 813, 814, 732, 376,
	377, 378, 379, 0, 0, 380, 381, 382, 383, 770,
	384, 0, 756, 385, 386, 387, 454, 815, 0, 0,
	388, 0, 0, 0, 0, 0, 389, 390, 0, 391,
	392, 393, 702, 0, 0, 0, 0, 0, 0, 0,
	700, 0, 0, 0, 0, 698, 699, 738, 726, 727,
	724, 725, 715, 0, 711, 0, 0, 0, 0, 0,
	714, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 772, 718, 0, 0, 0, 216, 217,
	218, 395, 779, 758, 780, 746, 781, 782, 0, 220,
	748, 747, 221, 222, 223, 721, 771, 783, 784, 405,
	0, 224, 776, 0, 762, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 818, 237, 238, 239, 765, 763, 764, 768,
	0, 766, 767, 240, 241, 464, 242, 785, 243, 786,
	787, 704, 244, 0, 245, 0, 246, 0, 0, 778,
	248, 0, 249, 0, 0, 0, 709, 250, 251, 253,
	254, 252, 255, 788, 789, 733, 819, 0, 0, 0,
	0, 0, 256, 257, 790, 791, 792, 0, 258, 0,
	259, 0, 0, 820, 260, 0, 261, 793, 0, 417,
	0, 262, 263, 264, 265, 266, 267, 773, 775, 822,
	0, 757, 0, 0, 0, 271, 0, 268, 0, 821,
	269, 794, 760, 795, 796, 797, 798, 799, 0, 761,
	0, 272, 823, 273, 274, 275, 824, 800, 801, 0,
	0, 276, 277, 278, 0, 280, 279, 0, 802, 825,
	281, 282, 826, 0, 283, 284, 0, 0, 285, 0,
	286, 706, 705, 287, 288, 290, 750, 289, 827, 291,
	292, 294, 293, 701, 0, 734, 774, 295, 803, 296,
	297, 0, 759, 0, 0, 299, 300, 0, 0, 301,
	434, 828, 302, 829, 804, 303, 304, 305, 306, 307,
	308, 309, 0, 310, 805, 311, 437, 312, 0, 313,
	314, 315, 316, 317, 806, 318, 319, 0, 320, 321,
	322, 323, 324, 0, 326, 327, 325, 328, 329, 330,
	331, 0, 332, 830, 0, 333, 334, 335, 710, 336,
	0, 340, 341, 342, 343, 344, 345, 346, 0, 348,
	349, 751, 752, 753, 754, 347, 350, 351, 769, 352,
	337, 338, 353, 831, 354, 807, 755, 355, 0, 363,
	356, 357, 358, 339, 359, 362, 808, 360, 0, 361,
	809, 0, 364, 365, 0, 366, 367, 368, 369, 370,
	371, 749, 373, 0, 810, 811, 812, 0, 0, 374,
	375, 813, 814, 732, 376, 377, 378, 379, 0, 0,
	380, 381, 382, 383, 770, 384, 0, 756, 385, 386,
	387, 454, 815, 0, 0, 388, 0, 0, 0, 0,
	0, 389, 390, 0, 391, 392, 393, 702, 0, 0,
	0, 0, 0, 0, 0, 700, 0, 0, 0, 0,
	698, 699, 738, 726, 727, 724, 725, 715, 0, 711,
	0, 0, 0, 0, 0, 714, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 772, 718,
	0, 0, 0, 216, 217, 218, 395, 779, 758, 780,
	746, 781, 782, 0, 220, 748, 747, 221, 222, 223,
	721, 771, 783, 784, 405, 0, 224, 776, 0, 762,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 818, 237, 238,
	2936, 765, 763, 764, 768, 0, 766, 767, 240, 241,
	464, 242, 785, 243, 786, 787, 704, 244, 0, 245,
	0, 246, 0, 0, 778, 248, 0, 249, 0, 0,
	0, 709, 250, 251, 253, 254, 252, 255, 788, 789,
	733, 819, 0, 0, 0, 0, 0, 256, 257, 790,
	791, 792, 0, 258, 0, 259, 0, 0, 820, 260,
	0, 261, 793, 0, 417, 0, 262, 263, 264, 265,
	266, 267, 773, 775, 822, 0, 757, 0, 0, 0,
	271, 0, 268, 0, 821, 269, 794, 760, 795, 796,
	797, 798, 799, 0, 761, 0, 272, 823, 273, 274,
	275, 824, 800, 801, 0, 0, 276, 277, 278, 0,
	280, 279, 0, 802, 825, 281, 282, 826, 0, 283,
	284, 0, 0, 285, 0, 286, 706, 705, 287, 288,
	290, 750, 289, 827, 291, 292, 294, 293, 701, 0,
	734, 774, 295, 803, 296, 297, 0, 759, 0, 0,
	299, 300, 0, 0, 301, 434, 828, 302, 829, 804,
	303, 304, 305, 306, 307, 308, 309, 0, 310, 805,
	311, 437, 312, 0, 313, 314, 315, 316, 317, 806,
	318, 319, 0, 320, 321, 322, 323, 324, 0, 326,
	327, 325, 328, 329, 330, 331, 0, 332, 830, 0,
	333, 334, 335, 710, 336, 0, 340, 341, 342, 343,
	344, 345, 346, 0, 348, 349, 751, 752, 753, 754,
	347, 350, 351, 769, 352, 337, 338, 353, 831, 354,
	807, 755, 355, 0, 363, 356, 357, 358, 339, 359,
	362, 808, 360, 0, 361, 809, 0, 364, 365, 0,
	366, 367, 368, 369, 370, 371, 749, 373, 0, 810,
	811, 812, 0, 0, 374, 375, 813, 814, 732, 376,
	377, 2935, 379, 0, 0, 380, 381, 382, 383, 770,
	384, 0, 756, 385, 386, 387, 454, 815, 0, 0,
	388, 0, 0, 0, 0, 0, 389, 390, 0, 391,
	392, 393, 702, 0, 0, 0, 0, 0, 0, 0,
	700, 0, 0, 0, 0, 698, 699, 738, 726, 727,
	724, 725, 715, 0, 711, 0, 0, 0, 0, 0,
	714, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 772, 718, 0, 0, 0, 216, 217,
	218, 2934, 779, 758, 780, 746, 781, 782, 0, 220,
	748, 747, 221, 222, 223, 721, 771, 783, 784, 405,
	0, 224, 776, 0, 762, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 818, 237, 238, 2936, 765, 763, 764, 768,
	0, 766, 767, 240, 241, 464, 242, 785, 243, 786,
	787, 704, 244, 0, 245, 0, 246, 0, 0, 778,
	248, 0, 249, 0, 0, 0, 709, 250, 251, 253,
	254, 252, 255, 788, 789, 733, 819, 0, 0, 0,
	0, 0, 256, 257, 790, 791, 792, 0, 258, 0,
	259, 0, 0, 820, 260, 0, 261, 793, 0, 417,
	0, 262, 263, 264, 265, 266, 267, 773, 775, 822,
	0, 757, 0, 0, 0, 271, 0, 268, 0, 821,
	269, 794, 760, 795, 796, 797, 798, 799, 0, 761,
	0, 272, 823, 273, 274, 275, 824, 800, 801, 0,
	0, 276, 277, 278, 0, 280, 279, 0, 802, 825,
	281, 282, 826, 0, 283, 284, 0, 0, 285, 0,
	286, 706, 705, 287, 288, 290, 750, 289, 827, 291,
	292, 294, 293, 701, 0, 734, 774, 295, 803, 296,
	297, 0, 759, 0, 0, 299, 300, 0, 0, 301,
	434, 828, 302, 829, 804, 303, 304, 305, 306, 307,
	308, 309, 0, 310, 805, 311, 437, 312, 0, 313,
	314, 315, 316, 317, 806, 318, 319, 0, 320, 321,
	322, 323, 324, 0, 326, 327, 325, 328, 329, 330,
	331, 0, 332, 830, 0, 333, 334, 335, 710, 336,
	0, 340, 341, 342, 343, 344, 345, 346, 0, 348,
	349, 751, 752, 753, 754, 347, 350, 351, 769, 352,
	337, 338, 353, 831, 354, 807, 755, 355, 0, 363,
	356, 357, 358, 339, 359, 362, 808, 360, 0, 361,
	809, 0, 364, 365, 0, 366, 367, 368, 369, 370,
	371, 749, 373, 0, 810, 811, 812, 0, 0, 374,
	375, 813, 814, 732, 376, 377, 2935, 379, 0, 0,
	380, 381, 382, 383, 770, 384, 0, 756, 385, 386,
	387, 454, 815, 0, 0, 388, 0, 0, 0, 0,
	0, 389, 390, 0, 391, 392, 393, 702, 0, 0,
	0, 0, 0, 0, 0, 700, 0, 0, 0, 0,
	698, 699, 738, 726, 727, 724, 725, 715, 0, 711,
	0, 0, 0, 0, 0, 714, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 772, 718,
	0, 0, 0, 216, 217, 218, 395, 779, 758, 780,
	746, 781, 782, 0, 220, 748, 747, 221, 222, 223,
	721, 771, 783, 784, 405, 0, 224, 776, 0, 762,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 818, 237, 238,
	239, 765, 763, 764, 768, 0, 766, 767, 240, 241,
	464, 242, 785, 243, 786, 787, 0, 244, 0, 245,
	0, 246, 0, 0, 778, 248, 0, 249, 0, 0,
	0, 709, 250, 251, 253, 254, 252, 255, 788, 789,
	733, 819, 0, 0, 0, 0, 0, 256, 257, 790,
	791, 792, 0, 258, 0, 259, 0, 0, 820, 260,
	0, 261, 793, 0, 417, 0, 262, 263, 264, 265,
	266, 267, 773, 775, 822, 0, 757, 0, 0, 0,
	271, 0, 268, 0, 821, 269, 794, 760, 795, 796,
	797, 798, 799, 0, 761, 0, 272, 823, 273, 274,
	275, 824, 800, 801, 0, 0, 276, 277, 278, 0,
	280, 279, 0, 802, 825, 281, 282, 826, 0, 283,
	284, 0, 0, 285, 0, 286, 885, 884, 287, 288,
	290, 750, 289, 827, 291, 292, 294, 293, 0, 0,
	734, 774, 295, 803, 296, 297, 0, 759, 0, 0,
	299, 300, 0, 0, 301, 434, 828, 302, 829, 804,
	303, 304, 305, 306, 307, 308, 309, 0, 310, 805,
	311, 437, 312, 0, 313, 314, 315, 316, 317, 806,
	318, 319, 0, 320, 321, 322, 323, 324, 0, 326,
	327, 325, 328, 329, 330, 331, 0, 332, 830, 0,
	333, 334, 335, 1809, 336, 0, 340, 341, 342, 343,
	344, 345, 346, 0, 348, 349, 751, 752, 753, 754,
	347, 350, 351, 769, 352, 337, 338, 353, 831, 354,
	807, 755, 355, 0, 363, 356, 357, 358, 339, 359,
	362, 808, 360, 0, 361, 809, 0, 364, 365, 0,
	366, 367, 368, 369, 370, 371, 749, 373, 0, 810,
	811, 812, 0, 0, 374, 375, 813, 814, 732, 376,
	377, 378, 379, 0, 0, 380, 381, 382, 383, 770,
	384, 0, 756, 385, 386, 387, 454, 815, 0, 0,
	388, 0, 0, 0, 0, 0, 389, 390, 0, 391,
	392, 393, 738, 726, 727, 724, 725, 715, 0, 0,
	1807, 0, 0, 0, 0, 1805, 1806, 0, 211, 212,
	213, 214, 0, 215, 1808, 0, 0, 0, 772, 718,
	714, 0, 0, 216, 217, 218, 0, 779, 758, 780,
	746, 781, 782, 0, 220, 748, 747, 221, 222, 223,
	721, 771, 783, 784, 405, 0, 224, 776, 0, 762,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 818, 237, 238,
	2936, 765, 763, 764, 768, 0, 766, 767, 240, 241,
	464, 242, 785, 243, 786, 787, 704, 244, 0, 245,
	0, 246, 0, 0, 778, 248, 0, 249, 0, 0,
	0, 709, 250, 251, 253, 254, 252, 255, 788, 789,
	733, 819, 0, 0, 0, 0, 0, 256, 257, 790,
	791, 792, 0, 258, 0, 259, 0, 0, 820, 260,
	0, 261, 793, 0, 417, 0, 262, 263, 264, 265,
	266, 267, 773, 775, 0, 0, 757, 0, 0, 0,
	271, 0, 268, 0, 821, 269, 794, 760, 795, 796,
	797, 798, 799, 0, 761, 0, 272, 0, 273, 274,
	275, 824, 800, 801, 0, 0, 276, 277, 278, 0,
	280, 279, 0, 802, 825, 281, 282, 0, 0, 283,
	284, 0, 0, 285, 0, 286, 706, 705, 287, 288,
	290, 750, 289, 827, 291, 292, 294, 293, 701, 0,
	734, 774, 295, 803, 296, 297, 0, 759, 0, 0,
	299, 300, 0, 0, 301, 434, 828, 302, 829, 804,
	303, 304, 305, 306, 307, 308, 309, 0, 310, 805,
	311, 437, 312, 0, 313, 314, 315, 316, 317, 806,
	318, 319, 0, 320, 321, 322, 323, 324, 0, 326,
	327, 325, 328, 329, 330, 331, 0, 332, 830, 0,
	333, 334, 335, 710, 336, 0, 340, 341, 342, 343,
	344, 345, 346, 0, 348, 349, 751, 752, 753, 754,
	347, 350, 351, 769, 352, 337, 338, 353, 0, 354,
	807, 755, 355, 0, 363, 356, 357, 358, 339, 359,
	362, 808, 360, 0, 361, 809, 0, 364, 365, 0,
	366, 367, 368, 369, 370, 371, 749, 373, 0, 810,
	811, 812, 0, 0, 374, 375, 813, 814, 732, 376,
	377, 2935, 379, 0, 0, 380, 381, 382, 383, 770,
	384, 0, 756, 385, 386, 387, 454, 815, 0, 0,
	388, 0, 0, 0, 0, 0, 389, 390, 0, 391,
	392, 393, 0, 0, 0, 0, 0, 0, 686, 0,
	881, 0, 0, 0, 0, 698, 699, 0, 0, 0,
	0, 0, 0, 0, 711, 0, 211, 212, 213, 214,
	714, 215, 0, 0, 0, 0, 394, 0, 0, 0,
	0, 216, 217, 218, 395, 396, 397, 398, 219, 399,
	400, 0, 220, 401, 402, 221, 222, 223, 0, 0,
	403, 404, 405, 0, 224, 406, 0, 883, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 818, 237, 238, 239, 0,
	877, 878, 0, 0, 879, 880, 240, 241, 464, 242,
	407, 243, 408, 409, 0, 244, 0, 245, 0, 246,
	0, 0, 247, 248, 0, 249, 0, 0, 0, 410,
	250, 251, 253, 254, 252, 255, 788, 789, 0, 819,
	0, 0, 0, 0, 0, 256, 257, 413, 414, 415,
	0, 258, 0, 259, 0, 0, 820, 260, 0, 261,
	793, 0, 417, 0, 262, 263, 264, 265, 266, 267,
	418, 419, 822, 0, 420, 0, 0, 0, 271, 0,
	268, 0, 821, 269, 421, 270, 422, 423, 424, 425,
	426, 0, 427, 0, 272, 823, 273, 274, 275, 824,
	428, 429, 0, 0, 276, 277, 278, 0, 280, 279,
	0, 802, 825, 281, 282, 826, 0, 283, 284, 0,
	0, 285, 0, 286, 885, 884, 287, 288, 290, 431,
	289, 827, 291, 292, 294, 293, 0, 0, 0, 432,
	295, 433, 296, 297, 0, 298, 0, 875, 299, 300,
	0, 0, 301, 434, 828, 302, 829, 804, 303, 304,
	305, 306, 307, 308, 309, 0, 310, 805, 311, 437,
	312, 0, 313, 314, 315, 316, 317, 438, 318, 319,
	0, 320, 321, 322, 323, 324, 0, 326, 327, 325,
	328, 329, 330, 331, 0, 332, 830, 0, 333, 334,
	335, 439, 336, 0, 340, 341, 342, 343, 344, 345,
	346, 166, 348, 349, 440, 441, 442, 443, 347, 350,
	351, 0, 352, 337, 338, 353, 831, 354, 444, 445,
	355, 0, 363, 356, 357, 358, 339, 359, 362, 446,
	360, 0, 361, 809, 0, 364, 365, 168, 366, 367,
	368, 369, 370, 371, 372, 373, 0, 448, 449, 450,
	0, 0, 374, 375, 813, 814, 0, 376, 377, 378,
	379, 0, 0, 380, 381, 382, 383, 0, 384, 0,
	453, 385, 386, 387, 1091, 455, 0, 0, 388, 0,
	0, 0, 881, 160, 389, 390, 0, 391, 392, 393,
	0, 161, 0, 0, 0, 0, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 394, 0,
	867, 0, 1380, 216, 217, 218, 395, 396, 397, 398,
	219, 399, 400, 0, 220, 401, 402, 221, 222, 223,
	0, 0, 403, 404, 405, 0, 224, 406, 0, 883,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 818, 237, 238,
	239, 0, 877, 878, 0, 0, 879, 880, 240, 241,
	464, 242, 407, 243, 408, 409, 0, 244, 0, 245,
	0, 246, 0, 0, 247, 248, 0, 249, 0, 0,
	0, 410, 250, 251, 253, 254, 252, 255, 788, 789,
	0, 819, 0, 0, 0, 0, 0, 256, 257, 413,
	414, 415, 0, 258, 0, 259, 0, 0, 820, 260,
	0, 261, 793, 0, 417, 0, 262, 263, 264, 265,
	266, 267, 418, 419, 822, 0, 420, 0, 0, 0,
	271, 0, 268, 0, 821, 269, 421, 270, 422, 423,
	424, 425, 426, 0, 427, 0, 272, 823, 273, 274,
	275, 824, 428, 429, 0, 0, 276, 277, 278, 0,
	280, 279, 0, 802, 825, 281, 282, 826, 0, 283,
	284, 0, 0, 285, 0, 286, 885, 884, 287, 288,
	290, 431, 289, 827, 291, 292, 294, 293, 0, 0,
	0, 432, 295, 433, 296, 297, 0, 298, 0, 875,
	299, 300, 0, 0, 301, 434, 828, 302, 829, 804,
	303, 304, 305, 306, 307, 308, 309, 0, 310, 805,
	311, 437, 312, 0, 313, 314, 315, 316, 317, 438,
	318, 319, 0, 320, 321, 322, 323, 324, 0, 326,
	327, 325, 328, 329, 330, 331, 0, 332, 830, 0,
	333, 334, 335, 439, 336, 0, 340, 341, 342, 343,
	344, 345, 346, 166, 348, 349, 440, 441, 442, 443,
	347, 350, 351, 0, 352, 337, 338, 353, 831, 354,
	444, 445, 355, 0, 363, 356, 357, 358, 339, 359,
	362, 446, 360, 0, 361, 809, 0, 364, 365, 168,
	366, 367, 368, 369, 370, 371, 372, 373, 0, 448,
	449, 450, 0, 0, 374, 375, 813, 814, 0, 376,
	377, 378, 379, 0, 0, 380, 381, 382, 383, 0,
	384, 0, 453, 385, 386, 387, 1091, 455, 0, 0,
	388, 0, 0, 0, 881, 160, 389, 390, 0, 391,
	392, 393, 0, 161, 0, 0, 0, 0, 0, 0,
	211, 212, 213, 214, 0, 215, 0, 0, 0, 0,
	772, 0, 867, 0, 1380, 216, 217, 218, 395, 396,
	397, 398, 219, 399, 400, 0, 220, 401, 402, 221,
	222, 223, 0, 771, 403, 404, 405, 0, 224, 776,
	0, 762, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 818,
	237, 238, 239, 765, 763, 764, 768, 0, 766, 767,
	240, 241, 464, 242, 407, 243, 408, 409, 0, 244,
	0, 245, 0, 246, 0, 0, 247, 248, 0, 249,
	0, 0, 0, 410, 250, 251, 253, 254, 252, 255,
	788, 789, 0, 819, 0, 0, 0, 0, 0, 256,
	257, 413, 414, 415, 0, 258, 0, 259, 0, 0,
	820, 260, 0, 261, 793, 0, 417, 0, 262, 263,
	264, 265, 266, 267, 773, 775, 822, 0, 420, 0,
	0, 0, 271, 0, 268, 0, 821, 269, 421, 270,
	422, 423, 424, 425, 426, 0, 427, 0, 272, 823,
	273, 274, 275, 824, 428, 429, 0, 0, 276, 277,
	278, 0, 280, 279, 0, 802, 825, 281, 282, 826,
	0, 283, 284, 0, 0, 285, 0, 286, 885, 884,
	287, 288, 290, 431, 289, 827, 291, 292, 294, 293,
	0, 0, 0, 774, 295, 433, 296, 297, 0, 298,
	0, 0, 299, 300, 0, 0, 301, 434, 828, 302,
	829, 804, 303, 304, 305, 306, 307, 308, 309, 0,
	310, 805, 311, 437, 312, 0, 313, 314, 315, 316,
	317, 438, 318, 319, 0, 320, 321, 322, 323, 324,
	0, 326, 327, 325, 328, 329, 330, 331, 0, 332,
	830, 0, 333, 334, 335, 439, 336, 0, 340, 341,
	342, 343, 344, 345, 346, 0, 348, 349, 440, 441,
	442, 443, 347, 350, 351, 769, 352, 337, 338, 353,
	831, 354, 444, 445, 355, 0, 363, 356, 357, 358,
	339, 359, 362, 446, 360, 0, 361, 809, 0, 364,
	365, 0, 366, 367, 368, 369, 370, 371, 372, 373,
	0, 448, 449, 450, 0, 0, 374, 375, 813, 814,
	0, 376, 377, 378, 379, 0, 0, 380, 381, 382,
	383, 770, 384, 0, 453, 385, 386, 387, 454, 455,
	0, 0, 388, 0, 2181, 0, 881, 0, 389, 390,
	0, 391, 392, 393, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 394, 0, 0, 0, 2491, 216, 217, 218,
	395, 396, 397, 398, 219, 399, 400, 0, 220, 401,
	402, 221, 222, 223, 0, 0, 403, 404, 405, 0,
	224, 406, 0, 883, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 818, 237, 238, 239, 0, 877, 878, 0, 0,
	879, 880, 240, 241, 464, 242, 407, 243, 408, 409,
	0, 244, 0, 245, 0, 246, 0, 0, 247, 248,
	0, 249, 0, 0, 0, 410, 250, 251, 253, 254,
	252, 255, 788, 789, 0, 819, 0, 0, 0, 0,
	0, 256, 257, 413, 414, 415, 0, 258, 0, 259,
	0, 0, 820, 260, 0, 261, 793, 0, 417, 0,
	262, 263, 264, 265, 266, 267, 418, 419, 822, 0,
	420, 0, 0, 0, 271, 0, 268, 0, 821, 269,
	421, 270, 422, 423, 424, 425, 426, 0, 427, 0,
	272, 823, 273, 274, 275, 824, 428, 429, 0, 0,
	276, 277, 278, 0, 280, 279, 0, 802, 825, 281,
	282, 826, 0, 283, 284, 0, 0, 285, 0, 286,
	885, 884, 287, 288, 290, 431, 289, 827, 291, 292,
	294, 293, 0, 0, 0, 432, 295, 433, 296, 297,
	0, 298, 0, 875, 299, 300, 0, 0, 301, 434,
	828, 302, 829, 804, 303, 304, 305, 306, 307, 308,
	309, 0, 310, 805, 311, 437, 312, 0, 313, 314,
	315, 316, 317, 438, 318, 319, 0, 320, 321, 322,
	323, 324, 0, 326, 327, 325, 328, 329, 330, 331,
	0, 332, 830, 0, 333, 334, 335, 439, 336, 0,
	340, 341, 342, 343, 344, 345, 346, 0, 348, 349,
	440, 441, 442, 443, 347, 350, 351, 0, 352, 337,
	338, 353, 831, 354, 444, 445, 355, 0, 363, 356,
	357, 358, 339, 359, 362, 446, 360, 0, 361, 809,
	0, 364, 365, 0, 366, 367, 368, 369, 370, 371,
	372, 373, 0, 448, 449, 450, 0, 0, 374, 375,
	813, 814, 0, 376, 377, 378, 379, 0, 0, 380,
	381, 382, 383, 0, 384, 0, 453, 385, 386, 387,
	454, 455, 0, 0, 388, 0, 866, 0, 881, 0,
	389, 390, 0, 391, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 213, 214, 0, 215,
	0, 0, 0, 0, 394, 0, 867, 0, 873, 216,
	217, 218, 395, 396, 397, 398, 219, 399, 400, 0,
	220, 401, 402, 221, 222, 223, 0, 0, 403, 404,
	405, 0, 224, 406, 0, 883, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 818, 237, 238, 239, 0, 877, 878,
	0, 0, 879, 880, 240, 241, 464, 242, 407, 243,
	408, 409, 0, 244, 0, 245, 0, 246, 0, 0,
	247, 248, 0, 249, 0, 0, 0, 410, 250, 251,
	253, 254, 252, 255, 788, 789, 0, 819, 0, 0,
	0, 0, 0, 256, 257, 413, 414, 415, 0, 258,
	0, 259, 0, 0, 820, 260, 0, 261, 793, 0,
	417, 0, 262, 263, 264, 265, 266, 267, 418, 419,
	822, 0, 420, 0, 0, 0, 271, 0, 268, 0,
	821, 269, 421, 270, 422, 423, 424, 425, 426, 0,
	427, 0, 272, 823, 273, 274, 275, 824, 428, 429,
	0, 0, 276, 277, 278, 0, 280, 279, 0, 802,
	825, 281, 282, 826, 0, 283, 284, 0, 0, 285,
	0, 286, 885, 884, 287, 288, 290, 431, 289, 827,
	291, 292, 294, 293, 0, 0, 0, 432, 295, 433,
	296, 297, 0, 298, 0, 875, 299, 300, 0, 0,
	301, 434, 828, 302, 829, 804, 303, 304, 305, 306,
	307, 308, 309, 0, 310, 805, 311, 437, 312, 0,
	313, 314, 315, 316, 317, 438, 318, 319, 0, 320,
	321, 322, 323, 324, 0, 326, 327, 325, 328, 329,
	330, 331, 0, 332, 830, 0, 333, 334, 335, 439,
	336, 0, 340, 341, 342, 343, 344, 345, 346, 0,
	348, 349, 440, 441, 442, 443, 347, 350, 351, 0,
	352, 337, 338, 353, 831, 354, 444, 445, 355, 0,
	363, 356, 357, 358, 339, 359, 362, 446, 360, 0,
	361, 809, 0, 364, 365, 0, 366, 367, 368, 369,
	370, 371, 372, 373, 0, 448, 449, 450, 0, 0,
	374, 375, 813, 814, 0, 376, 377, 378, 379, 0,
	0, 380, 381, 382, 383, 0, 384, 0, 453, 385,
	386, 387, 454, 455, 0, 0, 388, 0, 0, 0,
	881, 0, 389, 390, 0, 391, 392, 393, 0, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 213, 214,
	0, 215, 0, 0, 0, 0, 394, 0, 867, 0,
	873, 216, 217, 218, 395, 396, 397, 398, 219, 399,
	400, 0, 220, 401, 402, 221, 222, 223, 0, 0,
	403, 404, 405, 0, 224, 406, 0, 883, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 818, 237, 238, 239, 0,
	877, 878, 0, 0, 879, 880, 240, 241, 464, 242,
	407, 243, 408, 409, 0, 244, 0, 245, 0, 246,
	0, 0, 247, 248, 0, 249, 0, 0, 0, 410,
	250, 251, 253, 254, 252, 255, 788, 789, 0, 819,
	0, 0, 0, 0, 0, 256, 257, 413, 414, 415,
	0, 258, 0, 259, 0, 0, 820, 260, 0, 261,
	793, 0, 417, 0, 262, 263, 264, 265, 266, 267,
	418, 419, 822, 0, 420, 0, 0, 0, 271, 0,
	268, 0, 821, 269, 421, 270, 422, 423, 424, 425,
	426, 0, 427, 0, 272, 823, 273, 274, 275, 824,
	428, 429, 0, 0, 276, 277, 278, 0, 280, 279,
	0, 802, 825, 281, 282, 826, 0, 283, 284, 0,
	0, 285, 0, 286, 885, 884, 287, 288, 290, 431,
	289, 827, 291, 292, 294, 293, 0, 0, 0, 432,
	295, 433, 296, 297, 0, 298, 0, 875, 299, 300,
	0, 0, 301, 434, 828, 302, 829, 804, 303, 304,
	305, 306, 307, 308, 309, 0, 310, 805, 311, 437,
	312, 0, 313, 314, 315, 316, 317, 438, 318, 319,
	0, 320, 321, 322, 323, 324, 0, 326, 327, 325,
	328, 329, 330, 331, 0, 332, 830, 0, 333, 334,
	335, 439, 336, 0, 340, 341, 342, 343, 344, 345,
	346, 0, 348, 349, 440, 441, 442, 443, 347, 350,
	351, 0, 352, 337, 338, 353, 831, 354, 444, 445,
	355, 0, 363, 356, 357, 358, 339, 359, 362, 446,
	360, 0, 361, 809, 0, 364, 365, 0, 366, 367,
	368, 369, 370, 371, 372, 373, 0, 448, 449, 450,
	0, 0, 374, 375, 813, 814, 0, 376, 377, 378,
	379, 0, 0, 380, 381, 382, 383, 0, 384, 0,
	453, 385, 386, 387, 454, 455, 0, 0, 388, 0,
	1088, 0, 906, 0, 389, 390, 0, 391, 392, 393,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 394, 0,
	867, 0, 873, 216, 217, 218, 395, 396, 397, 398,
	219, 399, 400, 0, 220, 401, 402, 221, 222, 223,
	0, 0, 403, 404, 405, 0, 224, 406, 0, 883,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 818, 237, 238,
	239, 0, 0, 0, 0, 0, 0, 0, 240, 241,
	464, 242, 407, 243, 408, 409, 0, 244, 0, 245,
	0, 246, 0, 0, 247, 248, 0, 249, 0, 0,
	0, 410, 250, 251, 253, 254, 252, 255, 411, 412,
	0, 819, 0, 0, 0, 0, 0, 256, 257, 413,
	414, 415, 0, 258, 0, 259, 0, 0, 820, 260,
	0, 261, 416, 0, 417, 0, 262, 263, 264, 265,
	266, 267, 418, 419, 822, 0, 420, 0, 0, 0,
	271, 0, 268, 0, 821, 269, 421, 270, 422, 423,
	424, 425, 426, 0, 427, 0, 272, 823, 273, 274,
	275, 824, 428, 429, 0, 0, 276, 277, 278, 0,
	280, 279, 0, 430, 825, 281, 282, 826, 0, 283,
	284, 0, 0, 285, 0, 286, 885, 884, 287, 288,
	290, 431, 289, 827, 291, 292, 294, 293, 0, 0,
	0, 432, 295, 433, 296, 297, 0, 298, 0, 0,
	299, 300, 0, 0, 301, 434, 828, 302, 829, 435,
	303, 304, 305, 306, 307, 308, 309, 0, 310, 436,
	311, 437, 312, 0, 313, 314, 315, 316, 317, 438,
	318, 319, 0, 320, 321, 322, 323, 324, 0, 326,
	327, 325, 328, 329, 330, 331, 0, 332, 830, 0,
	333, 334, 335, 439, 336, 0, 340, 341, 342, 343,
	344, 345, 346, 166, 348, 349, 440, 441, 442, 443,
	347, 350, 351, 0, 352, 337, 338, 353, 831, 354,
	444, 445, 355, 0, 363, 356, 357, 358, 339, 359,
	362, 446, 360, 0, 361, 447, 0, 364, 365, 168,
	366, 367, 368, 369, 370, 371, 372, 373, 0, 448,
	449, 450, 0, 0, 374, 375, 451, 452, 0, 376,
	377, 378, 379, 0, 0, 380, 381, 382, 383, 0,
	384, 0, 453, 385, 386, 387, 1091, 455, 0, 0,
	388, 0, 686, 0, 208, 160, 389, 390, 0, 391,
	392, 393, 0, 161, 0, 0, 0, 0, 0, 0,
	211, 212, 213, 214, 0, 215, 0, 0, 0, 0,
	394, 0, 0, 0, 133, 216, 217, 218, 395, 396,
	397, 398, 219, 399, 400, 0, 220, 401, 402, 221,
	222, 223, 0, 0, 403, 404, 405, 0, 224, 406,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 0,
	237, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	240, 241, 464, 242, 407, 243, 408, 409, 0, 244,
	0, 245, 0, 246, 0, 0, 247, 248, 0, 249,
	0, 0, 0, 410, 250, 251, 253, 254, 252, 255,
	411, 412, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 413, 414, 415, 0, 258, 0, 259, 0, 0,
	0, 260, 0, 261, 416, 0, 417, 0, 262, 263,
	264, 265, 266, 267, 418, 419, 0, 0, 420, 0,
	0, 0, 271, 0, 268, 0, 0, 269, 421, 270,
	422, 423, 424, 425, 426, 0, 427, 0, 272, 0,
	273, 274, 275, 0, 428, 429, 0, 0, 276, 277,
	278, 0, 280, 279, 0, 430, 0, 281, 282, 0,
	0, 283, 284, 0, 0, 285, 0, 286, 0, 0,
	287, 288, 290, 431, 289, 0, 291, 292, 294, 293,
	0, 0, 0, 432, 295, 433, 296, 297, 0, 298,
	0, 0, 299, 300, 0, 0, 301, 434, 0, 302,
	0, 435, 303, 304, 305, 306, 307, 308, 309, 0,
	310, 436, 311, 437, 312, 0, 313, 314, 315, 316,
	317, 438, 318, 319, 0, 320, 321, 322, 323, 324,
	0, 326, 327, 325, 328, 329, 330, 331, 0, 332,
	0, 0, 333, 334, 335, 439, 336, 0, 340, 341,
	342, 343, 344, 345, 346, 166, 348, 349, 440, 441,
	442, 443, 347, 350, 351, 0, 352, 337, 338, 353,
	0, 354, 444, 445, 355, 0, 363, 356, 357, 358,
	339, 359, 362, 446, 360, 0, 361, 447, 0, 364,
	365, 168, 366, 367, 368, 369, 370, 371, 372, 373,
	0, 448, 449, 450, 0, 0, 374, 375, 451, 452,
	0, 376, 377, 378, 379, 0, 0, 380, 381, 382,
	383, 0, 384, 0, 453, 385, 386, 387, 1091, 455,
	0, 0, 388, 0, 0, 0, 208, 160, 389, 390,
	0, 391, 392, 393, 0, 161, 0, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 394, 0, 0, 0, 133, 216, 217, 218,
	395, 396, 397, 398, 219, 399, 400, 0, 220, 401,
	402, 221, 222, 223, 0, 0, 403, 404, 405, 0,
	224, 406, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 239, 0, 0, 0, 0, 0,
	0, 0, 240, 241, 464, 242, 407, 243, 408, 409,
	0, 244, 0, 245, 0, 246, 0, 0, 247, 248,
	0, 249, 0, 0, 0, 410, 250, 251, 253, 254,
	252, 255, 411, 412, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 413, 414, 415, 0, 258, 0, 259,
	0, 0, 0, 260, 0, 261, 416, 0, 417, 0,
	262, 263, 264, 265, 266, 267, 418, 419, 0, 0,
	420, 0, 0, 0, 271, 0, 268, 0, 0, 269,
	421, 270, 422, 423, 424, 425, 426, 0, 427, 0,
	272, 0, 273, 274, 275, 0, 428, 429, 0, 0,
	276, 277, 278, 0, 280, 279, 0, 430, 0, 281,
	282, 0, 0, 283, 284, 0, 0, 285, 0, 286,
	0, 0, 287, 288, 290, 431, 289, 0, 291, 292,
	294, 293, 0, 0, 0, 432, 295, 433, 296, 297,
	0, 298, 0, 0, 299, 300, 0, 0, 301, 434,
	0, 302, 0, 435, 303, 304, 305, 306, 307, 308,
	309, 0, 310, 436, 311, 437, 312, 0, 313, 314,
	315, 316, 317, 438, 318, 319, 0, 320, 321, 322,
	323, 324, 0, 326, 327, 325, 328, 329, 330, 331,
	0, 332, 0, 0, 333, 334, 335, 439, 336, 0,
	340, 341, 342, 343, 344, 345, 346, 0, 348, 349,
	440, 441, 442, 443, 347, 350, 351, 0, 352, 337,
	338, 353, 0, 354, 444, 445, 355, 0, 363, 356,
	357, 358, 339, 359, 362, 446, 360, 0, 361, 447,
	0, 364, 365, 0, 366, 367, 368, 369, 370, 371,
	372, 373, 0, 448, 449, 450, 0, 0, 374, 375,
	451, 452, 0, 376, 377, 378, 379, 0, 0, 380,
	381, 382, 383, 0, 384, 0, 453, 385, 386, 387,
	454, 455, 0, 0, 388, 0, 0, 0, 0, 0,
	389, 390, 0, 391, 392, 393, 738, 726, 727, 724,
	725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 215, 1981, 0,
	0, 0, 394, 0, 0, 0, 0, 216, 217, 218,
	395, 779, 758, 780, 746, 781, 782, 0, 220, 748,
	747, 221, 222, 223, 0, 0, 783, 784, 405, 0,
	224, 406, 0, 883, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 818, 237, 238, 239, 0, 0, 0, 0, 0,
	0, 0, 240, 241, 464, 242, 785, 243, 786, 787,
	0, 244, 0, 245, 0, 246, 0, 0, 778, 248,
	0, 249, 0, 0, 0, 410, 250, 251, 253, 254,
	252, 255, 411, 412, 733, 819, 0, 0, 0, 0,
	0, 256, 257, 790, 791, 792, 0, 258, 0, 259,
	0, 0, 820, 260, 0, 261, 416, 0, 417, 0,
	262, 263, 264, 265, 266, 267, 418, 419, 822, 0,
	757, 0, 0, 0, 271, 0, 268, 0, 821, 269,
	794, 760, 795, 796, 797, 798, 799, 0, 761, 0,
	272, 823, 273, 274, 275, 824, 800, 801, 0, 0,
	276, 277, 278, 0, 280, 279, 0, 430, 825, 281,
	282, 826, 0, 283, 284, 0, 0, 285, 0, 286,
	885, 884, 287, 288, 290, 750, 289, 827, 291, 292,
	294, 293, 0, 0, 734, 432, 295, 803, 296, 297,
	0, 759, 0, 0, 299, 300, 0, 0, 301, 434,
	828, 302, 829, 435, 303, 304, 305, 306, 307, 308,
	309, 0, 310, 436, 311, 437, 312, 0, 313, 314,
	315, 316, 317, 806, 318, 319, 0, 320, 321, 322,
	323, 324, 0, 326, 327, 325, 328, 329, 330, 331,
	0, 332, 830, 0, 333, 334, 335, 439, 336, 0,
	340, 341, 342, 343, 344, 345, 346, 0, 348, 349,
	751, 752, 753, 754, 347, 350, 351, 0, 352, 337,
	338, 353, 831, 354, 807, 755, 355, 0, 363, 356,
	357, 358, 339, 359, 362, 808, 360, 0, 361, 447,
	0, 364, 365, 0, 366, 367, 368, 369, 370, 371,
	749, 373, 0, 810, 811, 812, 0, 0, 374, 375,
	451, 452, 732, 376, 377, 378, 379, 0, 0, 380,
	381, 382, 383, 0, 384, 0, 756, 385, 386, 387,
	454, 815, 208, 0, 388, 0, 0, 0, 0, 0,
	389, 390, 0, 391, 392, 393, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 394, 0,
	0, 0, 0, 216, 217, 218, 395, 396, 397, 398,
	219, 399, 400, 0, 220, 401, 402, 221, 222, 223,
	0, 0, 403, 404, 405, 0, 224, 406, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	239, 0, 0, 0, 0, 0, 0, 0, 240, 241,
	464, 242, 407, 243, 408, 409, 0, 244, 0, 245,
	0, 246, 0, 0, 247, 248, 0, 249, 0, 0,
	0, 410, 250, 251, 253, 254, 252, 255, 411, 412,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 413,
	414, 415, 0, 258, 0, 259, 0, 0, 0, 260,
	0, 261, 416, 0, 417, 0, 262, 263, 264, 265,
	266, 267, 418, 419, 0, 0, 420, 0, 0, 0,
	271, 0, 268, 0, 0, 269, 421, 270, 422, 423,
	424, 425, 426, 0, 427, 0, 272, 0, 273, 274,
	275, 0, 428, 429, 0, 0, 276, 277, 278, 0,
	280, 279, 0, 430, 0, 281, 282, 0, 0, 283,
	284, 0, 0, 285, 0, 286, 0, 0, 287, 288,
	290, 431, 289, 0, 291, 292, 294, 293, 0, 0,
	0, 432, 295, 433, 296, 297, 0, 298, 0, 0,
	299, 300, 0, 0, 301, 434, 0, 302, 0, 435,
	303, 304, 305, 306, 307, 308, 309, 0, 310, 436,
	311, 437, 312, 0, 313, 314, 315, 316, 317, 438,
	318, 319, 0, 320, 321, 322, 323, 324, 0, 326,
	327, 325, 328, 329, 330, 331, 0, 332, 0, 0,
	333, 334, 335, 439, 336, 0, 340, 341, 342, 343,
	344, 345, 346, 0, 348, 349, 440, 441, 442, 443,
	347, 350, 351, 0, 352, 337, 338, 353, 0, 354,
	444, 445, 355, 0, 363, 356, 357, 358, 339, 359,
	362, 446, 360, 0, 361, 447, 0, 364, 365, 0,
	366, 367, 368, 369, 370, 371, 372, 373, 0, 448,
	449, 450, 0, 0, 374, 375, 451, 452, 0, 376,
	377, 378, 379, 0, 0, 380, 381, 382, 383, 0,
	384, 0, 453, 385, 386, 387, 454, 455, 0, 0,
	388, 0, 0, 0, 208, 0, 389, 390, 0, 391,
	392, 393, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 213, 214, 0, 215, 0, 0, 0, 0,
	394, 0, 0, 0, 2405, 216, 217, 218, 395, 396,
	397, 398, 219, 399, 400, 0, 220, 401, 402, 221,
	222, 223, 0, 0, 403, 404, 405, 0, 224, 406,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 0,
	237, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	240, 241, 464, 242, 407, 243, 408, 409, 0, 244,
	0, 245, 0, 246, 0, 0, 247, 248, 0, 249,
	0, 0, 0, 410, 250, 251, 253, 254, 252, 255,
	411, 412, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 413, 414, 415, 0, 258, 0, 259, 0, 0,
	0, 260, 0, 261, 416, 0, 417, 0, 262, 263,
	264, 265, 266, 267, 418, 419, 0, 0, 420, 0,
	0, 0, 271, 0, 268, 0, 0, 269, 421, 270,
	422, 423, 424, 425, 426, 0, 427, 0, 272, 0,
	273, 274, 275, 0, 428, 429, 0, 0, 276, 277,
	278, 0, 280, 279, 0, 430, 0, 281, 282, 0,
	0, 283, 284, 0, 0, 285, 0, 286, 0, 0,
	287, 288, 290, 431, 289, 0, 291, 292, 294, 293,
	0, 0, 0, 432, 295, 433, 296, 297, 0, 298,
	0, 0, 299, 300, 0, 0, 301, 434, 0, 302,
	0, 435, 303, 304, 305, 306, 307, 308, 309, 0,
	310, 436, 311, 437, 312, 0, 313, 314, 315, 316,
	317, 438, 318, 319, 0, 320, 321, 322, 323, 324,
	0, 326, 327, 325, 328, 329, 330, 331, 0, 332,
	0, 0, 333, 334, 335, 439, 336, 0, 340, 341,
	342, 343, 344, 345, 346, 0, 348, 349, 440, 441,
	442, 443, 347, 350, 351, 0, 352, 337, 338, 353,
	0, 354, 444, 445, 355, 0, 363, 356, 357, 358,
	339, 359, 362, 446, 360, 0, 361, 447, 0, 364,
	365, 0, 366, 367, 368, 369, 370, 371, 372, 373,
	0, 448, 449, 450, 0, 0, 374, 375, 451, 452,
	0, 376, 377, 378, 379, 0, 0, 380, 381, 382,
	383, 0, 384, 0, 453, 385, 386, 387, 454, 455,
	0, 0, 388, 0, 0, 0, 0, 0, 389, 390,
	0, 391, 392, 393, 1159, 0, 906, 905, 0, 0,
	0, 903, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 1384, 215, 0, 0,
	0, 0, 394, 0, 0, 0, 0, 216, 217, 218,
	395, 396, 397, 398, 219, 399, 400, 0, 220, 401,
	402, 221, 222, 223, 0, 0, 403, 404, 405, 0,
	224, 406, 0, 883, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 818, 237, 238, 239, 0, 0, 0, 0, 0,
	0, 0, 240, 241, 464, 242, 407, 243, 408, 409,
	0, 244, 0, 245, 0, 246, 0, 0, 247, 248,
	0, 249, 0, 0, 0, 410, 250, 251, 253, 254,
	252, 255, 411, 412, 0, 819, 0, 0, 0, 0,
	0, 256, 257, 413, 414, 415, 0, 258, 0, 259,
	0, 0, 820, 260, 0, 261, 416, 0, 417, 0,
	262, 263, 264, 265, 266, 267, 418, 419, 822, 0,
	420, 0, 0, 0, 271, 0, 268, 0, 821, 269,
	421, 270, 422, 423, 424, 425, 426, 0, 427, 0,
	272, 823, 273, 274, 275, 824, 428, 429, 0, 0,
	276, 277, 278, 0, 280, 279, 0, 430, 825, 281,
	282, 826, 0, 283, 284, 0, 0, 285, 0, 286,
	885, 884, 287, 288, 290, 431, 289, 827, 291, 292,
	294, 293, 0, 0, 0, 432, 295, 433, 296, 297,
	0, 298, 0, 0, 299, 300, 0, 0, 301, 434,
	828, 302, 829, 435, 303, 304, 305, 306, 307, 308,
	309, 0, 310, 436, 311, 437, 312, 0, 313, 314,
	315, 316, 317, 438, 318, 319, 0, 320, 321, 322,
	323, 324, 0, 326, 327, 325, 328, 329, 330, 331,
	0, 332, 830, 0, 333, 334, 335, 439, 336, 0,
	340, 341, 342, 343, 344, 345, 346, 0, 348, 349,
	440, 441, 442, 443, 347, 350, 351, 0, 352, 337,
	338, 353, 831, 354, 444, 445, 355, 0, 363, 356,
	357, 358, 339, 359, 362, 446, 360, 0, 361, 447,
	0, 364, 365, 0, 366, 367, 368, 369, 370, 371,
	372, 373, 0, 448, 449, 450, 0, 0, 374, 375,
	451, 452, 0, 376, 377, 378, 379, 0, 0, 380,
	381, 382, 383, 0, 384, 0, 453, 385, 386, 387,
	454, 455, 0, 0, 388, 1084, 0, 906, 905, 0,
	389, 390, 903, 391, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 394, 0, 0, 0, 0, 216, 217,
	218, 395, 396, 397, 398, 219, 399, 400, 0, 220,
	401, 402, 221, 222, 223, 0, 0, 403, 404, 405,
	0, 224, 406, 0, 883, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 818, 237, 238, 239, 0, 0, 0, 0,
	0, 0, 0, 240, 241, 464, 242, 407, 243, 408,
	409, 0, 244, 0, 245, 0, 246, 0, 0, 247,
	248, 0, 249, 0, 0, 0, 410, 250, 251, 253,
	254, 252, 255, 411, 412, 0, 819, 0, 0, 0,
	0, 0, 256, 257, 413, 414, 415, 0, 258, 0,
	259, 0, 0, 820, 260, 0, 261, 416, 0, 417,
	0, 262, 263, 264, 265, 266, 267, 1083, 419, 822,
	0, 420, 0, 0, 0, 271, 0, 268, 0, 821,
	269, 421, 270, 422, 423, 424, 425, 426, 0, 427,
	0, 272, 823, 273, 274, 275, 824, 428, 429, 0,
	0, 276, 277, 278, 0, 280, 279, 0, 430, 825,
	281, 282, 826, 0, 283, 284, 0, 0, 285, 0,
	286, 885, 884, 287, 288, 290, 431, 289, 827, 291,
	292, 294, 293, 0, 0, 0, 432, 295, 433, 296,
	297, 0, 298, 0, 0, 299, 300, 0, 0, 301,
	434, 828, 302, 829, 435, 303, 304, 305, 306, 307,
	308, 309, 0, 310, 436, 311, 437, 312, 0, 313,
	314, 315, 316, 317, 438, 318, 319, 0, 320, 321,
	322, 323, 324, 0, 326, 327, 325, 328, 329, 330,
	331, 0, 332, 830, 0, 333, 334, 335, 439, 336,
	0, 340, 341, 342, 343, 344, 345, 346, 0, 348,
	349, 440, 441, 442, 443, 347, 350, 351, 0, 352,
	337, 338, 353, 831, 354, 444, 445, 355, 0, 363,
	356, 357, 358, 339, 359, 362, 446, 360, 0, 361,
	447, 0, 364, 365, 0, 366, 367, 368, 369, 370,
	371, 372, 373, 0, 448, 449, 450, 0, 0, 374,
	375, 451, 452, 0, 376, 377, 378, 379, 0, 0,
	380, 381, 382, 383, 0, 384, 0, 453, 385, 386,
	387, 454, 455, 0, 0, 388, 1080, 0, 906, 905,
	0, 389, 390, 903, 391, 392, 393, 0, 0, 0,
	0, 0, 0, 0, 211, 212, 213, 214, 0, 215,
	0, 0, 0, 0, 394, 0, 0, 0, 0, 216,
	217, 218, 395, 396, 397, 398, 219, 399, 400, 0,
	220, 401, 402, 221, 222, 223, 0, 0, 403, 404,
	405, 0, 224, 406, 0, 883, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 818, 237, 238, 239, 0, 0, 0,
	0, 0, 0, 0, 240, 241, 464, 242, 407, 243,
	408, 409, 0, 244, 0, 245, 0, 246, 0, 0,
	247, 248, 0, 249, 0, 0, 0, 410, 250, 251,
	253, 254, 252, 255, 411, 412, 0, 819, 0, 0,
	0, 0, 0, 256, 257, 413, 414, 415, 0, 258,
	0, 259, 0, 0, 820, 260, 0, 261, 416, 0,
	417, 0, 262, 263, 264, 265, 266, 267, 1079, 419,
	822, 0, 420, 0, 0, 0, 271, 0, 268, 0,
	821, 269, 421, 270, 422, 423, 424, 425, 426, 0,
	427, 0, 272, 823, 273, 274, 275, 824, 428, 429,
	0, 0, 276, 277, 278, 0, 280, 279, 0, 430,
	825, 281, 282, 826, 0, 283, 284, 0, 0, 285,
	0, 286, 885, 884, 287, 288, 290, 431, 289, 827,
	291, 292, 294, 293, 0, 0, 0, 432, 295, 433,
	296, 297, 0, 298, 0, 0, 299, 300, 0, 0,
	301, 434, 828, 302, 829, 435, 303, 304, 305, 306,
	307, 308, 309, 0, 310, 436, 311, 437, 312, 0,
	313, 314, 315, 316, 317, 438, 318, 319, 0, 320,
	321, 322, 323, 324, 0, 326, 327, 325, 328, 329,
	330, 331, 0, 332, 830, 0, 333, 334, 335, 439,
	336, 0, 340, 341, 342, 343, 344, 345, 346, 0,
	348, 349, 440, 441, 442, 443, 347, 350, 351, 0,
	352, 337, 338, 353, 831, 354, 444, 445, 355, 0,
	363, 356, 357, 358, 339, 359, 362, 446, 360, 0,
	361, 447, 0, 364, 365, 0, 366, 367, 368, 369,
	370, 371, 372, 373, 0, 448, 449, 450, 0, 0,
	374, 375, 451, 452, 0, 376, 377, 378, 379, 0,
	0, 380, 381, 382, 383, 0, 384, 0, 453, 385,
	386, 387, 454, 455, 0, 0, 388, 1041, 0, 906,
	905, 0, 389, 390, 903, 391, 392, 393, 0, 0,
	0, 0, 0, 0, 0, 211, 212, 213, 214, 0,
	215, 0, 0, 0, 0, 394, 0, 0, 0, 0,
	216, 217, 218, 395, 396, 397, 398, 219, 399, 400,
	0, 220, 401, 402, 221, 222, 223, 0, 0, 403,
	404, 405, 0, 224, 406, 0, 883, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 818, 237, 238, 239, 0, 0,
	0, 0, 0, 0, 0, 240, 241, 464, 242, 407,
	243, 408, 409, 0, 244, 0, 245, 0, 246, 0,
	0, 247, 248, 0, 249, 0, 0, 0, 410, 250,
	251, 253, 254, 252, 255, 411, 412, 0, 819, 0,
	0, 0, 0, 0, 256, 257, 413, 414, 415, 0,
	258, 0, 259, 0, 0, 820, 260, 0, 261, 416,
	0, 417, 0, 262, 263, 264, 265, 266, 267, 1040,
	419, 822, 0, 420, 0, 0, 0, 271, 0, 268,
	0, 821, 269, 421, 270, 422, 423, 424, 425, 426,
	0, 427, 0, 272, 823, 273, 274, 275, 824, 428,
	429, 0, 0, 276, 277, 278, 0, 280, 279, 0,
	430, 825, 281, 282, 826, 0, 283, 284, 0, 0,
	285, 0, 286, 885, 884, 287, 288, 290, 431, 289,
	827, 291, 292, 294, 293, 0, 0, 0, 432, 295,
	433, 296, 297, 0, 298, 0, 0, 299, 300, 0,
	0, 301, 434, 828, 302, 829, 435, 303, 304, 305,
	306, 307, 308, 309, 0, 310, 436, 311, 437, 312,
	0, 313, 314, 315, 316, 317, 438, 318, 319, 0,
	320, 321, 322, 323, 324, 0, 326, 327, 325, 328,
	329, 330, 331, 0, 332, 830, 0, 333, 334, 335,
	439, 336, 0, 340, 341, 342, 343, 344, 345, 346,
	0, 348, 349, 440, 441, 442, 443, 347, 350, 351,
	0, 352, 337, 338, 353, 831, 354, 444, 445, 355,
	0, 363, 356, 357, 358, 339, 359, 362, 446, 360,
	0, 361, 447, 0, 364, 365, 0, 366, 367, 368,
	369, 370, 371, 372, 373, 0, 448, 449, 450, 0,
	0, 374, 375, 451, 452, 0, 376, 377, 378, 379,
	0, 0, 380, 381, 382, 383, 0, 384, 0, 453,
	385, 386, 387, 454, 455, 0, 0, 388, 1038, 0,
	906, 905, 0, 389, 390, 903, 391, 392, 393, 0,
	0, 0, 0, 0, 0, 0, 211, 212, 213, 214,
	0, 215, 0, 0, 0, 0, 394, 0, 0, 0,
	0, 216, 217, 218, 395, 396, 397, 398, 219, 399,
	400, 0, 220, 401, 402, 221, 222, 223, 0, 0,
	403, 404, 405, 0, 224, 406, 0, 883, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 818, 237, 238, 239, 0,
	0, 0, 0, 0, 0, 0, 240, 241, 464, 242,
	407, 243, 408, 409, 0, 244, 0, 245, 0, 246,
	0, 0, 247, 248, 0, 249, 0, 0, 0, 410,
	250, 251, 253, 254, 252, 255, 411, 412, 0, 819,
	0, 0, 0, 0, 0, 256, 257, 413, 414, 415,
	0, 258, 0, 259, 0, 0, 820, 260, 0, 261,
	416, 0, 417, 0, 262, 263, 264, 265, 266, 267,
	1037, 419, 822, 0, 420, 0, 0, 0, 271, 0,
	268, 0, 821, 269, 421, 270, 422, 423, 424, 425,
	426, 0, 427, 0, 272, 823, 273, 274, 275, 824,
	428, 429, 0, 0, 276, 277, 278, 0, 280, 279,
	0, 430, 825, 281, 282, 826, 0, 283, 284, 0,
	0, 285, 0, 286, 885, 884, 287, 288, 290, 431,
	289, 827, 291, 292, 294, 293, 0, 0, 0, 432,
	295, 433, 296, 297, 0, 298, 0, 0, 299, 300,
	0, 0, 301, 434, 828, 302, 829, 435, 303, 304,
	305, 306, 307, 308, 309, 0, 310, 436, 311, 437,
	312, 0, 313, 314, 315, 316, 317, 438, 318, 319,
	0, 320, 321, 322, 323, 324, 0, 326, 327, 325,
	328, 329, 330, 331, 0, 332, 830, 0, 333, 334,
	335, 439, 336, 0, 340, 341, 342, 343, 344, 345,
	346, 0, 348, 349, 440, 441, 442, 443, 347, 350,
	351, 0, 352, 337, 338, 353, 831, 354, 444, 445,
	355, 0, 363, 356, 357, 358, 339, 359, 362, 446,
	360, 0, 361, 447, 0, 364, 365, 0, 366, 367,
	368, 369, 370, 371, 372, 373, 0, 448, 449, 450,
	0, 0, 374, 375, 451, 452, 0, 376, 377, 378,
	379, 0, 0, 380, 381, 382, 383, 0, 384, 0,
	453, 385, 386, 387, 454, 455, 0, 0, 388, 899,
	0, 906, 905, 0, 389, 390, 903, 391, 392, 393,
	0, 0, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 394, 0, 0,
	0, 0, 216, 217, 218, 395, 396, 397, 398, 219,
	399, 400, 0, 220, 401, 402, 221, 222, 223, 0,
	0, 403, 404, 405, 0, 224, 406, 0, 883, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 818, 237, 238, 239,
	0, 0, 0, 0, 0, 0, 0, 240, 241, 464,
	242, 407, 243, 408, 409, 0, 244, 0, 245, 0,
	246, 0, 0, 247, 248, 0, 249, 0, 0, 0,
	410, 250, 251, 253, 254, 252, 255, 411, 412, 0,
	819, 0, 0, 0, 0, 0, 256, 257, 413, 414,
	415, 0, 258, 0, 259, 0, 0, 820, 260, 0,
	261, 416, 0, 417, 0, 262, 263, 264, 265, 266,
	267, 901, 419, 822, 0, 420, 0, 0, 0, 271,
	0, 268, 0, 821, 269, 421, 270, 422, 423, 424,
	425, 426, 0, 427, 0, 272, 823, 273, 274, 275,
	824, 428, 429, 0, 0, 276, 277, 278, 0, 280,
	279, 0, 430, 825, 281, 282, 826, 0, 283, 284,
	0, 0, 285, 0, 286, 885, 884, 287, 288, 290,
	431, 289, 827, 291, 292, 294, 293, 0, 0, 0,
	432, 295, 433, 296, 297, 0, 298, 0, 0, 299,
	300, 0, 0, 301, 434, 828, 302, 829, 435, 303,
	304, 305, 306, 307, 308, 309, 0, 310, 436, 311,
	437, 312, 0, 313, 314, 315, 316, 317, 438, 318,
	319, 0, 320, 321, 322, 323, 324, 0, 326, 327,
	325, 328, 329, 330, 331, 0, 332, 830, 0, 333,
	334, 335, 439, 336, 0, 340, 341, 342, 343, 344,
	345, 346, 0, 348, 349, 440, 441, 442, 443, 347,
	350, 351, 0, 352, 337, 338, 353, 831, 354, 444,
	445, 355, 0, 363, 356, 357, 358, 339, 359, 362,
	446, 360, 0, 361, 447, 0, 364, 365, 0, 366,
	367, 368, 369, 370, 371, 372, 373, 0, 448, 449,
	450, 0, 0, 374, 375, 451, 452, 0, 376, 377,
	378, 379, 0, 0, 380, 381, 382, 383, 0, 384,
	0, 453, 385, 386, 387, 454, 455, 906, 905, 388,
	0, 0, 903, 0, 0, 389, 390, 0, 391, 392,
	393, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 394, 0, 0, 0, 0, 216, 217,
	218, 395, 396, 397, 398, 219, 399, 400, 0, 220,
	401, 402, 221, 222, 223, 0, 0, 403, 404, 405,
	0, 224, 406, 0, 883, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 818, 237, 238, 239, 0, 0, 0, 0,
	0, 0, 0, 240, 241, 464, 242, 407, 243, 408,
	409, 0, 244, 0, 245, 0, 246, 0, 0, 247,
	248, 0, 249, 0, 0, 0, 410, 250, 251, 253,
	254, 252, 255, 411, 412, 0, 819, 0, 0, 0,
	0, 0, 256, 257, 413, 414, 415, 0, 258, 0,
	259, 0, 0, 820, 260, 0, 261, 416, 0, 417,
	0, 262, 263, 264, 265, 266, 267, 418, 419, 822,
	0, 420, 0, 0, 0, 271, 0, 268, 0, 821,
	269, 421, 270, 422, 423, 424, 425, 426, 0, 427,
	0, 272, 823, 273, 274, 275, 824, 428, 429, 0,
	0, 276, 277, 278, 0, 280, 279, 0, 430, 825,
	281, 282, 826, 0, 283, 284, 0, 0, 285, 0,
	286, 885, 884, 287, 288, 290, 431, 289, 827, 291,
	292, 294, 293, 0, 0, 0, 432, 295, 433, 296,
	297, 0, 298, 0, 0, 299, 300, 0, 0, 301,
	434, 828, 302, 829, 435, 303, 304, 305, 306, 307,
	308, 309, 0, 310, 436, 311, 437, 312, 0, 313,
	314, 315, 316, 317, 438, 318, 319, 0, 320, 321,
	322, 323, 324, 0, 326, 327, 325, 328, 329, 330,
	331, 0, 332, 830, 0, 333, 334, 335, 439, 336,
	0, 340, 341, 342, 343, 344, 345, 346, 0, 348,
	349, 440, 441, 442, 443, 347, 350, 351, 0, 352,
	337, 338, 353, 831, 354, 444, 445, 355, 0, 363,
	356, 357, 358, 339, 359, 362, 446, 360, 0, 361,
	447, 0, 364, 365, 0, 366, 367, 368, 369, 370,
	371, 372, 373, 0, 448, 449, 450, 0, 0, 374,
	375, 451, 452, 0, 376, 377, 378, 379, 0, 0,
	380, 381, 382, 383, 0, 384, 0, 453, 385, 386,
	387, 454, 455, 208, 0, 388, 0, 0, 0, 0,
	0, 389, 390, 0, 391, 392, 393, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 394,
	0, 0, 0, 0, 216, 217, 218, 395, 396, 397,
	398, 219, 399, 400, 0, 220, 401, 402, 221, 222,
	223, 0, 0, 403, 404, 405, 0, 224, 406, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 239, 0, 0, 0, 0, 0, 0, 0, 240,
	241, 203, 242, 407, 243, 408, 409, 0, 244, 0,
	245, 0, 246, 0, 0, 247, 248, 0, 249, 0,
	0, 0, 410, 250, 251, 253, 254, 252, 255, 411,
	412, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	413, 414, 415, 0, 258, 0, 259, 0, 0, 0,
	260, 0, 261, 416, 0, 417, 0, 262, 263, 264,
	265, 266, 267, 418, 419, 0, 0, 420, 0, 0,
	0, 271, 0, 268, 0, 0, 269, 421, 270, 422,
	423, 424, 425, 426, 0, 427, 0, 272, 0, 273,
	274, 275, 0, 428, 429, 0, 0, 276, 277, 278,
	0, 280, 279, 0, 430, 0, 281, 282, 0, 0,
	283, 284, 0, 0, 285, 0, 286, 0, 0, 287,
	288, 290, 431, 289, 0, 291, 292, 294, 293, 0,
	0, 0, 432, 295, 433, 296, 297, 0, 298, 0,
	0, 299, 300, 0, 0, 301, 434, 0, 302, 0,
	435, 303, 304, 305, 306, 307, 308, 309, 0, 310,
	436, 311, 437, 312, 0, 313, 314, 315, 316, 317,
	438, 318, 319, 0, 320, 321, 322, 323, 324, 0,
	326, 327, 325, 328, 329, 330, 331, 0, 332, 0,
	1603, 333, 334, 335, 439, 336, 0, 340, 341, 342,
	343, 344, 345, 346, 0, 348, 349, 440, 441, 442,
	443, 347, 350, 351, 0, 352, 337, 338, 353, 0,
	354, 444, 445, 355, 0, 363, 356, 357, 358, 339,
	359, 362, 446, 360, 0, 361, 447, 0, 364, 365,
	202, 366, 367, 368, 369, 370, 371, 372, 373, 0,
	448, 449, 450, 0, 0, 374, 375, 451, 452, 0,
	376, 377, 378, 379, 0, 0, 380, 381, 382, 383,
	0, 384, 0, 453, 385, 386, 387, 454, 455, 0,
	0, 388, 558, 0, 208, 0, 0, 389, 390, 0,
	391, 392, 393, 0, 0, 0, 0, 0, 0, 0,
	211, 212, 213, 214, 0, 215, 0, 0, 207, 0,
	394, 0, 0, 0, 0, 216, 217, 218, 395, 396,
	397, 398, 219, 399, 400, 0, 220, 401, 402, 221,
	222, 223, 0, 0, 403, 404, 405, 0, 224, 406,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 0,
	237, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	240, 241, 203, 242, 407, 243, 408, 409, 0, 244,
	0, 245, 0, 246, 0, 0, 247, 248, 0, 249,
	0, 0, 0, 410, 250, 251, 253, 254, 252, 255,
	411, 412, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 413, 414, 415, 0, 258, 0, 259, 0, 0,
	0, 260, 0, 261, 416, 0, 417, 0, 262, 263,
	264, 265, 266, 267, 418, 419, 0, 0, 420, 0,
	0, 0, 271, 0, 268, 0, 0, 269, 421, 270,
	422, 423, 424, 425, 426, 0, 427, 0, 272, 0,
	273, 274, 275, 0, 428, 429, 0, 0, 276, 277,
	278, 0, 280, 279, 0, 430, 0, 281, 282, 0,
	0, 283, 284, 0, 0, 285, 0, 286, 0, 0,
	287, 288, 290, 431, 289, 0, 291, 292, 294, 293,
	0, 0, 0, 432, 295, 433, 296, 297, 0, 298,
	0, 0, 299, 300, 0, 0, 301, 434, 0, 302,
	0, 435, 303, 304, 305, 306, 307, 308, 309, 0,
	310, 436, 311, 437, 312, 0, 313, 314, 315, 316,
	317, 438, 318, 319, 0, 320, 321, 322, 323, 324,
	0, 326, 327, 325, 328, 329, 330, 331, 0, 332,
	0, 0, 333, 334, 335, 439, 336, 0, 340, 341,
	342, 343, 344, 345, 346, 0, 348, 349, 440, 441,
	442, 443, 347, 350, 351, 0, 352, 337, 338, 353,
	0, 354, 444, 445, 355, 0, 363, 356, 357, 358,
	339, 359, 362, 446, 360, 0, 361, 447, 0, 364,
	365, 202, 366, 367, 368, 369, 370, 371, 372, 373,
	0, 448, 449, 450, 0, 0, 374, 375, 451, 452,
	0, 376, 377, 378, 379, 0, 0, 380, 381, 382,
	383, 0, 384, 0, 453, 385, 386, 387, 454, 455,
	0, 0, 388, 200, 0, 208, 0, 0, 389, 390,
	0, 391, 392, 393, 0, 0, 0, 0, 0, 0,
	0, 211, 212, 213, 214, 0, 215, 0, 0, 207,
	0, 394, 0, 0, 0, 0, 216, 217, 218, 395,
	396, 397, 398, 219, 399, 400, 0, 220, 401, 402,
	221, 222, 223, 0, 0, 403, 404, 405, 0, 224,
	406, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	0, 237, 238, 239, 0, 0, 0, 0, 0, 0,
	0, 240, 241, 203, 242, 407, 243, 408, 409, 0,
	244, 0, 245, 0, 246, 0, 0, 247, 248, 0,
	249, 0, 0, 0, 410, 250, 251, 253, 254, 252,
	255, 411, 412, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 413, 414, 415, 0, 258, 0, 259, 0,
	0, 0, 260, 0, 261, 416, 0, 417, 0, 262,
	263, 264, 265, 266, 267, 418, 419, 0, 0, 420,
	0, 0, 0, 271, 0, 268, 0, 0, 269, 421,
	270, 422, 423, 424, 425, 426, 0, 427, 0, 272,
	0, 273, 274, 275, 0, 428, 429, 0, 0, 276,
	277, 278, 0, 280, 279, 0, 430, 0, 281, 282,
	0, 0, 283, 284, 0, 0, 285, 0, 286, 0,
	0, 287, 288, 290, 431, 289, 0, 291, 292, 294,
	293, 0, 0, 0, 432, 295, 433, 296, 297, 0,
	298, 0, 0, 299, 300, 0, 0, 301, 434, 0,
	302, 0, 435, 303, 304, 305, 306, 307, 308, 309,
	0, 310, 436, 311, 437, 312, 0, 313, 314, 315,
	316, 317, 438, 318, 319, 0, 320, 321, 322, 323,
	324, 0, 326, 327, 325, 328, 329, 330, 331, 0,
	332, 0, 0, 333, 334, 335, 439, 336, 0, 340,
	341, 342, 343, 344, 345, 346, 0, 348, 349, 440,
	441, 442, 443, 347, 350, 351, 0, 352, 337, 338,
	353, 0, 354, 444, 445, 355, 0, 363, 356, 357,
	358, 339, 359, 362, 446, 360, 0, 361, 447, 0,
	364, 365, 202, 366, 367, 368, 369, 370, 371, 372,
	373, 0, 448, 449, 450, 0, 0, 374, 375, 451,
	452, 0, 376, 377, 378, 379, 0, 0, 380, 381,
	382, 383, 0, 384, 0, 453, 385, 386, 387, 454,
	455, 906, 905, 388, 0, 0, 0, 0, 0, 389,
	390, 0, 391, 392, 393, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 394, 0, 0,
	207, 0, 216, 217, 218, 395, 396, 397, 398, 219,
	399, 400, 0, 220, 401, 402, 221, 222, 223, 0,
	0, 403, 404, 405, 0, 224, 406, 0, 883, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 818, 237, 238, 239,
	0, 0, 0, 0, 0, 0, 0, 240, 241, 464,
	242, 407, 243, 408, 409, 0, 244, 0, 245, 0,
	246, 0, 0, 247, 248, 0, 249, 0, 0, 0,
	410, 250, 251, 253, 254, 252, 255, 411, 412, 0,
	819, 0, 0, 0, 0, 0, 256, 257, 413, 414,
	415, 0, 258, 0, 259, 0, 0, 820, 260, 0,
	261, 416, 0, 417, 0, 262, 263, 264, 265, 266,
	267, 418, 419, 822, 0, 420, 0, 0, 0, 271,
	0, 268, 0, 821, 269, 421, 270, 422, 423, 424,
	425, 426, 0, 427, 0, 272, 823, 273, 274, 275,
	824, 428, 429, 0, 0, 276, 277, 278, 0, 280,
	279, 0, 430, 825, 281, 282, 826, 0, 283, 284,
	0, 0, 285, 0, 286, 885, 884, 287, 288, 290,
	431, 289, 827, 291, 292, 294, 293, 0, 0, 0,
	432, 295, 433, 296, 297, 0, 298, 0, 0, 299,
	300, 0, 0, 301, 434, 828, 302, 829, 435, 303,
	304, 305, 306, 307, 308, 309, 0, 310, 436, 311,
	437, 312, 0, 313, 314, 315, 316, 317, 438, 318,
	319, 0, 320, 321, 322, 323, 324, 0, 326, 327,
	325, 328, 329, 330, 331, 0, 332, 830, 0, 333,
	334, 335, 439, 336, 0, 340, 341, 342, 343, 344,
	345, 346, 0, 348, 349, 440, 441, 442, 443, 347,
	350, 351, 0, 352, 337, 338, 353, 831, 354, 444,
	445, 355, 0, 363, 356, 357, 358, 339, 359, 362,
	446, 360, 0, 361, 447, 0, 364, 365, 0, 366,
	367, 368, 369, 370, 371, 372, 373, 0, 448, 449,
	450, 0, 0, 374, 375, 451, 452, 0, 376, 377,
	378, 379, 0, 0, 380, 381, 382, 383, 0, 384,
	0, 453, 385, 386, 387, 454, 455, 208, 0, 388,
	0, 0, 0, 0, 0, 389, 390, 0, 391, 392,
	393, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 394, 0, 0, 0, 0, 216, 217,
	218, 395, 396, 397, 398, 219, 399, 400, 0, 220,
	401, 402, 221, 222, 223, 0, 0, 403, 404, 405,
	0, 224, 406, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 239, 0, 0, 0, 0,
	0, 0, 0, 240, 241, 203, 242, 407, 243, 408,
	409, 0, 244, 0, 245, 0, 246, 0, 0, 247,
	248, 0, 249, 0, 0, 0, 410, 250, 251, 253,
	254, 252, 255, 411, 412, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 413, 414, 415, 0, 258, 0,
	259, 0, 0, 0, 260, 0, 261, 416, 0, 417,
	0, 262, 263, 264, 265, 266, 267, 418, 419, 0,
	0, 420, 0, 0, 0, 271, 0, 268, 0, 0,
	269, 421, 270, 422, 423, 424, 425, 426, 0, 427,
	0, 272, 0, 273, 274, 275, 0, 428, 429, 0,
	0, 276, 277, 278, 0, 280, 279, 0, 430, 0,
	281, 282, 0, 0, 283, 284, 0, 0, 285, 0,
	286, 0, 0, 287, 288, 290, 431, 289, 0, 291,
	292, 294, 293, 0, 0, 0, 432, 295, 433, 296,
	297, 0, 298, 0, 0, 299, 300, 0, 0, 301,
	434, 0, 302, 0, 435, 303, 304, 305, 306, 307,
	308, 309, 0, 310, 436, 311, 437, 312, 0, 313,
	314, 315, 316, 317, 438, 318, 319, 0, 320, 321,
	322, 323, 324, 0, 326, 327, 325, 328, 329, 330,
	331, 0, 332, 0, 0, 333, 334, 335, 439, 336,
	0, 340, 341, 342, 343, 344, 345, 346, 0, 348,
	349, 440, 441, 442, 443, 347, 350, 351, 0, 352,
	337, 338, 353, 0, 354, 444, 445, 355, 0, 363,
	356, 357, 358, 339, 359, 362, 446, 360, 0, 361,
	447, 0, 364, 365, 202, 366, 367, 368, 369, 370,
	371, 372, 373, 0, 448, 449, 450, 0, 0, 374,
	375, 451, 452, 0, 376, 377, 378, 379, 0, 0,
	380, 381, 382, 383, 0, 384, 0, 453, 385, 386,
	387, 454, 455, 906, 0, 388, 0, 0, 0, 0,
	0, 389, 390, 0, 391, 392, 393, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 394,
	0, 0, 207, 0, 216, 217, 218, 395, 396, 397,
	398, 219, 399, 400, 0, 220, 401, 402, 221, 222,
	223, 0, 0, 403, 404, 405, 0, 224, 406, 0,
	883, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 818, 237,
	238, 239, 0, 0, 0, 0, 0, 0, 0, 240,
	241, 464, 242, 407, 243, 408, 409, 0, 244, 0,
	245, 0, 246, 0, 0, 247, 248, 0, 249, 0,
	0, 0, 410, 250, 251, 253, 254, 252, 255, 411,
	412, 0, 819, 0, 0, 0, 0, 0, 256, 257,
	413, 414, 415, 0, 258, 0, 259, 0, 0, 820,
	260, 0, 261, 416, 0, 417, 0, 262, 263, 264,
	265, 266, 267, 418, 419, 822, 0, 420, 0, 0,
	0, 271, 0, 268, 0, 821, 269, 421, 270, 422,
	423, 424, 425, 426, 0, 427, 0, 272, 823, 273,
	274, 275, 824, 428, 429, 0, 0, 276, 277, 278,
	0, 280, 279, 0, 430, 825, 281, 282, 826, 0,
	283, 284, 0, 0, 285, 0, 286, 885, 884, 287,
	288, 290, 431, 289, 827, 291, 292, 294, 293, 0,
	0, 0, 432, 295, 433, 296, 297, 0, 298, 0,
	0, 299, 300, 0, 0, 301, 434, 828, 302, 829,
	435, 303, 304, 305, 306, 307, 308, 309, 0, 310,
	436, 311, 437, 312, 0, 313, 314, 315, 316, 317,
	438, 318, 319, 0, 320, 321, 322, 323, 324, 0,
	326, 327, 325, 328, 329, 330, 331, 0, 332, 830,
	0, 333, 334, 335, 439, 336, 0, 340, 341, 342,
	343, 344, 345, 346, 0, 348, 349, 440, 441, 442,
	443, 347, 350, 351, 0, 352, 337, 338, 353, 831,
	354, 444, 445, 355, 0, 363, 356, 357, 358, 339,
	359, 362, 446, 360, 0, 361, 447, 0, 364, 365,
	0, 366, 367, 368, 369, 370, 371, 372, 373, 0,
	448, 449, 450, 0, 0, 374, 375, 451, 452, 0,
	376, 377, 378, 379, 0, 0, 380, 381, 382, 383,
	0, 384, 0, 453, 385, 386, 387, 454, 455, 208,
	0, 388, 0, 0, 0, 0, 0, 389, 390, 0,
	391, 392, 393, 0, 0, 211, 212, 213, 214, 0,
	215, 0, 0, 0, 0, 394, 0, 0, 0, 0,
	216, 217, 218, 395, 396, 397, 398, 219, 399, 400,
	0, 220, 401, 402, 221, 222, 223, 0, 0, 403,
	404, 405, 0, 224, 406, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 0, 237, 238, 239, 0, 0,
	0, 0, 0, 0, 0, 240, 241, 464, 242, 407,
	243, 408, 409, 0, 244, 0, 245, 0, 246, 0,
	0, 247, 248, 0, 249, 0, 0, 0, 410, 250,
	251, 253, 254, 252, 255, 411, 412, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 413, 414, 415, 0,
	258, 0, 259, 0, 0, 0, 260, 0, 261, 416,
	0, 417, 0, 262, 263, 264, 265, 266, 267, 418,
	419, 0, 0, 420, 0, 0, 0, 271, 0, 268,
	0, 0, 269, 421, 270, 422, 423, 424, 425, 426,
	0, 427, 0, 272, 0, 273, 274, 275, 0, 428,
	429, 0, 0, 276, 277, 278, 0, 280, 279, 0,
	430, 0, 281, 282, 0, 0, 283, 284, 0, 0,
	285, 0, 286, 0, 0, 287, 288, 290, 431, 289,
	0, 291, 292, 294, 293, 0, 0, 0, 432, 295,
	433, 296, 297, 0, 298, 0, 0, 299, 300, 0,
	0, 301, 434, 0, 302, 0, 435, 303, 304, 305,
	306, 307, 308, 309, 0, 310, 436, 311, 437, 312,
	0, 313, 314, 315, 316, 317, 438, 318, 319, 0,
	320, 321, 322, 323, 324, 0, 326, 327, 325, 328,
	329, 330, 331, 0, 332, 0, 0, 333, 334, 335,
	439, 336, 0, 340, 341, 342, 343, 344, 345, 346,
	0, 348, 349, 440, 441, 442, 443, 347, 350, 351,
	0, 352, 337, 338, 353, 0, 354, 444, 445, 355,
	0, 363, 356, 357, 358, 339, 359, 362, 446, 360,
	0, 361, 447, 0, 364, 365, 0, 366, 367, 368,
	369, 370, 371, 372, 373, 0, 448, 449, 450, 0,
	0, 374, 375, 451, 452, 0, 376, 377, 378, 379,
	0, 0, 380, 381, 382, 383, 0, 384, 0, 453,
	385, 386, 387, 454, 455, 208, 0, 388, 0, 0,
	0, 0, 0, 389, 390, 0, 391, 392, 393, 0,
	0, 211, 212, 213, 214, 0, 215, 0, 0, 0,
	0, 394, 0, 0, 207, 0, 216, 217, 218, 395,
	396, 397, 398, 219, 399, 400, 0, 220, 401, 402,
	221, 222, 223, 0, 0, 403, 404, 405, 1880, 224,
	406, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 1877, 234, 0, 235, 236, 0,
	0, 237, 238, 239, 0, 0, 0, 0, 0, 0,
	0, 240, 241, 464, 242, 407, 243, 408, 409, 0,
	244, 0, 245, 0, 246, 0, 0, 247, 248, 0,
	249, 0, 0, 0, 410, 250, 251, 253, 254, 252,
	255, 411, 412, 0, 1952, 0, 0, 0, 0, 0,
	256, 257, 413, 414, 415, 0, 258, 0, 259, 1883,
	0, 0, 260, 0, 261, 416, 0, 417, 0, 262,
	263, 264, 265, 266, 267, 418, 419, 0, 0, 420,
	0, 0, 0, 271, 1950, 268, 0, 0, 269, 421,
	270, 422, 423, 424, 425, 426, 0, 427, 0, 1949,
	0, 273, 274, 275, 0, 428, 429, 0, 0, 276,
	277, 278, 0, 280, 279, 0, 430, 0, 281, 282,
	0, 0, 283, 284, 0, 0, 285, 0, 286, 0,
	0, 287, 288, 290, 431, 289, 0, 291, 292, 294,
	293, 0, 0, 0, 432, 295, 433, 296, 297, 0,
	298, 0, 0, 299, 300, 0, 0, 301, 434, 0,
	302, 0, 435, 303, 304, 305, 306, 307, 308, 309,
	0, 310, 436, 311, 437, 312, 1882, 313, 314, 315,
	316, 317, 438, 318, 319, 0, 320, 321, 322, 323,
	324, 0, 326, 327, 325, 328, 329, 330, 331, 0,
	332, 0, 0, 333, 334, 335, 439, 336, 0, 340,
	341, 342, 343, 344, 345, 346, 0, 348, 349, 440,
	441, 442, 443, 347, 350, 351, 0, 352, 337, 338,
	353, 0, 354, 444, 445, 355, 0, 363, 356, 357,
	358, 339, 359, 362, 446, 360, 0, 361, 447, 0,
	364, 365, 0, 366, 367, 368, 369, 370, 371, 372,
	373, 0, 448, 449, 450, 0, 0, 374, 375, 451,
	452, 0, 376, 377, 378, 379, 0, 1951, 380, 381,
	382, 383, 0, 384, 0, 453, 385, 386, 387, 454,
	455, 208, 0, 388, 0, 0, 0, 0, 0, 389,
	390, 0, 391, 392, 393, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 394, 0, 0,
	0, 0, 216, 217, 218, 395, 396, 397, 398, 219,
	399, 400, 0, 220, 401, 402, 221, 222, 223, 0,
	0, 403, 404, 405, 1880, 224, 406, 0, 0, 1874,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	1877, 234, 0, 235, 236, 0, 0, 237, 238, 239,
	0, 0, 0, 0, 0, 0, 0, 240, 241, 464,
	242, 407, 243, 408, 409, 0, 244, 0, 245, 0,
	246, 0, 0, 247, 248, 0, 249, 0, 0, 0,
	410, 250, 251, 253, 254, 252, 255, 411, 412, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 413, 414,
	415, 0, 258, 0, 259, 1883, 0, 0, 260, 0,
	261, 416, 0, 417, 0, 262, 263, 264, 265, 266,
	267, 1873, 419, 0, 0, 420, 0, 0, 0, 271,
	0, 268, 0, 0, 269, 421, 270, 422, 423, 424,
	425, 426, 0, 427, 0, 272, 0, 273, 274, 275,
	0, 428, 429, 0, 0, 276, 277, 278, 0, 280,
	279, 0, 430, 0, 281, 282, 0, 0, 283, 284,
	0, 0, 285, 0, 286, 0, 0, 287, 288, 290,
	431, 289, 0, 291, 292, 294, 293, 0, 0, 0,
	432, 295, 433, 296, 297, 0, 298, 0, 0, 299,
	300, 0, 0, 301, 434, 0, 302, 0, 435, 303,
	304, 305, 306, 307, 308, 309, 0, 310, 436, 311,
	437, 312, 1882, 313, 314, 315, 316, 317, 438, 318,
	319, 0, 320, 321, 322, 323, 324, 0, 326, 327,
	325, 328, 329, 330, 331, 0, 332, 0, 0, 333,
	334, 335, 439, 336, 0, 340, 341, 342, 343, 344,
	345, 346, 0, 348, 349, 440, 441, 442, 443, 347,
	350, 351, 0, 352, 337, 338, 353, 0, 354, 444,
	445, 355, 0, 363, 356, 357, 358, 339, 359, 362,
	446, 360, 0, 361, 447, 0, 364, 365, 0, 366,
	367, 368, 369, 370, 371, 372, 373, 0, 448, 449,
	450, 0, 0, 374, 375, 451, 452, 0, 376, 377,
	378, 379, 0, 1881, 380, 381, 382, 383, 0, 384,
	0, 453, 385, 386, 387, 454, 455, 0, 564, 388,
	208, 0, 0, 0, 0, 389, 390, 0, 391, 392,
	393, 0, 0, 0, 0, 0, 211, 212, 213, 563,
	545, 215, 0, 0, 0, 0, 394, 0, 0, 0,
	0, 216, 217, 218, 395, 396, 397, 398, 219, 399,
	400, 0, 220, 401, 402, 221, 222, 223, 0, 0,
	403, 404, 405, 0, 224, 406, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 548, 0, 237, 238, 239, 0,
	0, 0, 0, 0, 0, 0, 240, 241, 464, 242,
	407, 243, 408, 409, 0, 244, 0, 245, 0, 246,
	0, 0, 247, 248, 0, 249, 0, 0, 0, 410,
	250, 251, 253, 254, 252, 255, 411, 412, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 413, 414, 415,
	0, 258, 0, 259, 0, 0, 0, 260, 549, 261,
	416, 0, 417, 0, 262, 263, 264, 265, 266, 267,
	418, 419, 0, 0, 420, 0, 0, 0, 271, 0,
	268, 0, 0, 269, 421, 270, 422, 423, 424, 425,
	426, 0, 427, 0, 272, 0, 273, 274, 275, 0,
	428, 429, 0, 0, 276, 277, 278, 0, 280, 279,
	0, 430, 0, 281, 282, 0, 0, 283, 284, 0,
	0, 285, 0, 286, 0, 0, 287, 288, 290, 431,
	289, 0, 291, 292, 294, 293, 0, 0, 0, 432,
	295, 433, 296, 297, 0, 298, 0, 0, 299, 300,
	0, 0, 301, 434, 0, 302, 0, 435, 303, 304,
	305, 306, 307, 308, 309, 0, 310, 436, 311, 437,
	312, 0, 313, 314, 315, 316, 317, 438, 318, 319,
	0, 320, 321, 322, 323, 324, 0, 326, 327, 325,
	328, 329, 330, 331, 0, 332, 0, 0, 333, 334,
	335, 439, 336, 0, 340, 341, 342, 343, 344, 345,
	346, 550, 348, 349, 440, 441, 442, 443, 347, 350,
	351, 0, 352, 337, 338, 353, 0, 354, 444, 445,
	355, 0, 363, 356, 357, 358, 339, 359, 362, 446,
	360, 0, 361, 447, 0, 364, 365, 0, 366, 367,
	368, 369, 370, 371, 372, 373, 0, 448, 449, 450,
	0, 0, 374, 375, 451, 452, 0, 376, 377, 378,
	379, 0, 0, 380, 381, 382, 383, 0, 384, 0,
	453, 385, 386, 387, 454, 455, 0, 544, 388, 208,
	0, 0, 0, 0, 389, 390, 0, 391, 392, 393,
	0, 0, 0, 0, 0, 211, 212, 213, 214, 545,
	215, 0, 0, 0, 0, 394, 0, 0, 0, 0,
	216, 217, 218, 395, 396, 397, 398, 219, 399, 400,
	0, 220, 401, 402, 221, 222, 223, 0, 0, 403,
	404, 405, 0, 224, 406, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 548, 0, 237, 238, 239, 0, 0,
	0, 0, 0, 0, 0, 240, 241, 464, 242, 407,
	243, 408, 409, 0, 244, 0, 245, 0, 246, 0,
	0, 247, 248, 0, 249, 0, 0, 0, 410, 250,
	251, 253, 254, 252, 255, 411, 412, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 413, 414, 415, 0,
	258, 0, 259, 0, 0, 0, 260, 549, 261, 416,
	0, 417, 0, 262, 263, 264, 265, 266, 267, 418,
	419, 0, 0, 420, 0, 0, 0, 271, 0, 268,
	0, 0, 269, 421, 270, 422, 423, 424, 425, 426,
	0, 427, 0, 272, 0, 273, 274, 275, 0, 428,
	429, 0, 0, 276, 277, 278, 0, 280, 279, 0,
	430, 0, 281, 282, 0, 0, 283, 284, 0, 0,
	285, 0, 286, 0, 0, 287, 288, 290, 431, 289,
	0, 291, 292, 294, 293, 0, 0, 0, 432, 295,
	433, 296, 297, 0, 298, 0, 0, 299, 300, 0,
	0, 301, 434, 0, 302, 0, 435, 303, 304, 305,
	306, 307, 308, 309, 0, 310, 436, 311, 437, 312,
	0, 313, 314, 315, 316, 317, 438, 318, 319, 0,
	320, 321, 322, 323, 324, 0, 326, 327, 325, 328,
	329, 330, 331, 0, 332, 0, 0, 333, 334, 335,
	439, 336, 0, 340, 341, 342, 343, 344, 345, 346,
	550, 348, 349, 440, 441, 442, 443, 347, 350, 351,
	0, 352, 337, 338, 353, 0, 354, 444, 445, 355,
	0, 363, 356, 357, 358, 339, 359, 362, 446, 360,
	0, 361, 447, 0, 364, 365, 0, 366, 367, 368,
	369, 370, 371, 372, 373, 0, 448, 449, 450, 0,
	0, 374, 375, 451, 452, 0, 376, 377, 378, 379,
	0, 0, 380, 381, 382, 383, 0, 384, 0, 453,
	385, 386, 387, 454, 455, 208, 0, 388, 0, 0,
	0, 0, 0, 389, 390, 0, 391, 392, 393, 0,
	0, 211, 212, 213, 214, 0, 215, 0, 0, 0,
	0, 394, 0, 0, 0, 0, 216, 217, 218, 395,
	396, 397, 398, 219, 399, 400, 0, 220, 401, 402,
	221, 222, 223, 0, 0, 403, 404, 405, 0, 224,
	406, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 548,
	0, 237, 238, 239, 0, 0, 0, 0, 0, 0,
	0, 240, 241, 464, 242, 407, 243, 408, 409, 0,
	244, 0, 245, 0, 246, 0, 0, 247, 248, 0,
	249, 0, 0, 0, 410, 250, 251, 253, 254, 252,
	255, 411, 412, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 413, 414, 415, 0, 258, 0, 259, 0,
	0, 0, 260, 549, 261, 416, 0, 417, 0, 262,
	263, 264, 265, 266, 267, 418, 419, 0, 0, 420,
	0, 0, 0, 271, 0, 268, 0, 0, 269, 421,
	270, 422, 423, 424, 425, 426, 0, 427, 0, 272,
	0, 273, 274, 275, 0, 428, 429, 0, 0, 276,
	277, 278, 0, 280, 279, 0, 430, 0, 281, 282,
	0, 0, 283, 284, 0, 0, 285, 0, 286, 0,
	0, 287, 288, 290, 431, 289, 0, 291, 292, 294,
	293, 0, 0, 0, 432, 295, 433, 296, 297, 0,
	298, 0, 0, 299, 300, 0, 0, 301, 434, 0,
	302, 0, 435, 303, 304, 305, 306, 307, 308, 309,
	0, 310, 436, 311, 437, 312, 0, 313, 314, 315,
	316, 317, 438, 318, 319, 0, 320, 321, 322, 323,
	324, 0, 326, 327, 325, 328, 329, 330, 331, 0,
	332, 0, 0, 333, 334, 335, 439, 336, 0, 340,
	341, 342, 343, 344, 345, 346, 550, 348, 349, 440,
	441, 442, 443, 347, 350, 351, 0, 352, 337, 338,
	353, 0, 354, 444, 445, 355, 0, 363, 356, 357,
	358, 339, 359, 362, 446, 360, 0, 361, 447, 0,
	364, 365, 0, 366, 367, 368, 369, 370, 371, 372,
	373, 0, 448, 449, 450, 0, 0, 374, 375, 451,
	452, 0, 376, 377, 378, 379, 0, 0, 380, 381,
	382, 383, 0, 384, 0, 453, 385, 386, 387, 454,
	455, 0, 1059, 388, 208, 0, 0, 0, 0, 389,
	390, 0, 391, 392, 393, 0, 0, 0, 0, 0,
	211, 212, 213, 214, 0, 215, 0, 0, 0, 0,
	394, 0, 0, 0, 0, 216, 217, 218, 395, 396,
	397, 398, 219, 399, 400, 0, 220, 401, 402, 221,
	222, 223, 0, 0, 403, 404, 405, 0, 224, 406,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 0,
	237, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	240, 241, 464, 242, 407, 243, 408, 409, 0, 244,
	0, 245, 0, 246, 0, 0, 247, 248, 0, 249,
	0, 0, 0, 410, 250, 251, 253, 254, 252, 255,
	411, 412, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 413, 414, 415, 0, 258, 0, 259, 0, 0,
	0, 260, 0, 261, 416, 0, 417, 0, 262, 263,
	264, 265, 266, 267, 418, 419, 0, 0, 420, 0,
	0, 0, 271, 0, 268, 0, 0, 269, 421, 270,
	422, 423, 424, 425, 426, 0, 427, 0, 272, 0,
	273, 274, 275, 0, 428, 429, 0, 0, 276, 277,
	278, 0, 280, 279, 0, 430, 0, 281, 282, 0,
	0, 283, 284, 0, 0, 285, 0, 286, 0, 0,
	287, 288, 290, 431, 289, 0, 291, 292, 294, 293,
	0, 0, 0, 432, 295, 433, 296, 297, 0, 298,
	0, 875, 299, 300, 0, 0, 301, 434, 0, 302,
	0, 435, 303, 304, 305, 306, 307, 308, 309, 0,
	310, 436, 311, 437, 312, 0, 313, 314, 315, 316,
	317, 438, 318, 319, 0, 320, 321, 322, 323, 324,
	0, 326, 327, 325, 328, 329, 330, 331, 0, 332,
	0, 0, 333, 334, 335, 439, 336, 0, 340, 341,
	342, 343, 344, 345, 346, 0, 348, 349, 440, 441,
	442, 443, 347, 350, 351, 0, 352, 337, 338, 353,
	0, 354, 444, 445, 355, 0, 363, 356, 357, 358,
	339, 359, 362, 446, 360, 0, 361, 447, 0, 364,
	365, 0, 366, 367, 368, 369, 370, 371, 372, 373,
	0, 448, 449, 450, 0, 0, 374, 375, 451, 452,
	0, 376, 377, 378, 379, 0, 0, 380, 381, 382,
	383, 0, 384, 0, 453, 385, 386, 387, 454, 455,
	0, 894, 388, 208, 0, 0, 0, 0, 389, 390,
	0, 391, 392, 393, 0, 0, 0, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 394,
	0, 0, 0, 0, 216, 217, 218, 395, 396, 397,
	398, 219, 399, 400, 0, 220, 401, 402, 221, 222,
	223, 0, 0, 403, 404, 405, 0, 224, 406, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 239, 0, 0, 0, 0, 0, 0, 0, 240,
	241, 464, 242, 407, 243, 408, 409, 0, 244, 0,
	245, 0, 246, 0, 0, 247, 248, 0, 249, 0,
	0, 0, 410, 250, 251, 253, 254, 252, 255, 411,
	412, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	413, 414, 415, 0, 258, 0, 259, 0, 0, 0,
	260, 0, 261, 416, 0, 417, 0, 262, 263, 264,
	265, 266, 267, 896, 419, 0, 0, 420, 0, 0,
	0, 271, 0, 268, 0, 0, 269, 421, 270, 422,
	423, 424, 425, 426, 0, 427, 0, 272, 0, 273,
	274, 275, 0, 428, 429, 0, 0, 276, 277, 278,
	0, 280, 279, 0, 430, 0, 281, 282, 0, 0,
	283, 284, 0, 0, 285, 0, 286, 0, 0, 287,
	288, 290, 431, 289, 0, 291, 292, 294, 293, 0,
	0, 0, 432, 295, 433, 296, 297, 0, 298, 0,
	875, 299, 300, 0, 0, 301, 434, 0, 302, 0,
	435, 303, 304, 305, 306, 307, 308, 309, 0, 310,
	436, 311, 437, 312, 0, 313, 314, 315, 316, 317,
	438, 318, 319, 0, 320, 321, 322, 323, 324, 0,
	326, 327, 325, 328, 329, 330, 331, 0, 332, 0,
	0, 333, 334, 335, 439, 336, 0, 340, 341, 342,
	343, 344, 345, 346, 0, 348, 349, 440, 441, 442,
	443, 347, 350, 351, 0, 352, 337, 338, 353, 0,
	354, 444, 445, 355, 0, 363, 356, 357, 358, 339,
	359, 362, 446, 360, 0, 361, 447, 0, 364, 365,
	0, 366, 367, 368, 369, 370, 371, 372, 373, 0,
	448, 449, 450, 0, 0, 374, 375, 451, 452, 0,
	376, 377, 378, 379, 0, 0, 380, 381, 382, 383,
	0, 384, 0, 453, 385, 386, 387, 454, 455, 0,
	891, 388, 208, 0, 0, 0, 0, 389, 390, 0,
	391, 392, 393, 0, 0, 0, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 394, 0,
	0, 0, 0, 216, 217, 218, 395, 396, 397, 398,
	219, 399, 400, 0, 220, 401, 402, 221, 222, 223,
	0, 0, 403, 404, 405, 0, 224, 406, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	239, 0, 0, 0, 0, 0, 0, 0, 240, 241,
	464, 242, 407, 243, 408, 409, 0, 244, 0, 245,
	0, 246, 0, 0, 247, 248, 0, 249, 0, 0,
	0, 410, 250, 251, 253, 254, 252, 255, 411, 412,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 413,
	414, 415, 0, 258, 0, 259, 0, 0, 0, 260,
	0, 261, 416, 0, 417, 0, 262, 263, 264, 265,
	266, 267, 893, 419, 0, 0, 420, 0, 0, 0,
	271, 0, 268, 0, 0, 269, 421, 270, 422, 423,
	424, 425, 426, 0, 427, 0, 272, 0, 273, 274,
	275, 0, 428, 429, 0, 0, 276, 277, 278, 0,
	280, 279, 0, 430, 0, 281, 282, 0, 0, 283,
	284, 0, 0, 285, 0, 286, 0, 0, 287, 288,
	290, 431, 289, 0, 291, 292, 294, 293, 0, 0,
	0, 432, 295, 433, 296, 297, 0, 298, 0, 875,
	299, 300, 0, 0, 301, 434, 0, 302, 0, 435,
	303, 304, 305, 306, 307, 308, 309, 0, 310, 436,
	311, 437, 312, 0, 313, 314, 315, 316, 317, 438,
	318, 319, 0, 320, 321, 322, 323, 324, 0, 326,
	327, 325, 328, 329, 330, 331, 0, 332, 0, 0,
	333, 334, 335, 439, 336, 0, 340, 341, 342, 343,
	344, 345, 346, 0, 348, 349, 440, 441, 442, 443,
	347, 350, 351, 0, 352, 337, 338, 353, 0, 354,
	444, 445, 355, 0, 363, 356, 357, 358, 339, 359,
	362, 446, 360, 0, 361, 447, 0, 364, 365, 0,
	366, 367, 368, 369, 370, 371, 372, 373, 0, 448,
	449, 450, 0, 0, 374, 375, 451, 452, 0, 376,
	377, 378, 379, 0, 0, 380, 381, 382, 383, 0,
	384, 0, 453, 385, 386, 387, 454, 455, 0, 887,
	388, 208, 0, 0, 0, 0, 389, 390, 0, 391,
	392, 393, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 394, 0, 0,
	0, 0, 216, 217, 218, 395, 396, 397, 398, 219,
	399, 400, 0, 220, 401, 402, 221, 222, 223, 0,
	0, 403, 404, 405, 0, 224, 406, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 0, 237, 238, 239,
	0, 0, 0, 0, 0, 0, 0, 240, 241, 464,
	242, 407, 243, 408, 409, 0, 244, 0, 245, 0,
	246, 0, 0, 247, 248, 0, 249, 0, 0, 0,
	410, 250, 251, 253, 254, 252, 255, 411, 412, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 413, 414,
	415, 0, 258, 0, 259, 0, 0, 0, 260, 0,
	261, 416, 0, 417, 0, 262, 263, 264, 265, 266,
	267, 889, 419, 0, 0, 420, 0, 0, 0, 271,
	0, 268, 0, 0, 269, 421, 270, 422, 423, 424,
	425, 426, 0, 427, 0, 272, 0, 273, 274, 275,
	0, 428, 429, 0, 0, 276, 277, 278, 0, 280,
	279, 0, 430, 0, 281, 282, 0, 0, 283, 284,
	0, 0, 285, 0, 286, 0, 0, 287, 288, 290,
	431, 289, 0, 291, 292, 294, 293, 0, 0, 0,
	432, 295, 433, 296, 297, 0, 298, 0, 875, 299,
	300, 0, 0, 301, 434, 0, 302, 0, 435, 303,
	304, 305, 306, 307, 308, 309, 0, 310, 436, 311,
	437, 312, 0, 313, 314, 315, 316, 317, 438, 318,
	319, 0, 320, 321, 322, 323, 324, 0, 326, 327,
	325, 328, 329, 330, 331, 0, 332, 0, 0, 333,
	334, 335, 439, 336, 0, 340, 341, 342, 343, 344,
	345, 346, 0, 348, 349, 440, 441, 442, 443, 347,
	350, 351, 0, 352, 337, 338, 353, 0, 354, 444,
	445, 355, 0, 363, 356, 357, 358, 339, 359, 362,
	446, 360, 0, 361, 447, 0, 364, 365, 0, 366,
	367, 368, 369, 370, 371, 372, 373, 0, 448, 449,
	450, 0, 0, 374, 375, 451, 452, 0, 376, 377,
	378, 379, 0, 0, 380, 381, 382, 383, 0, 384,
	0, 453, 385, 386, 387, 454, 455, 0, 483, 388,
	208, 0, 0, 0, 0, 389, 390, 0, 391, 392,
	393, 0, 0, 0, 0, 0, 211, 212, 213, 214,
	482, 215, 0, 0, 0, 0, 394, 0, 0, 0,
	0, 216, 217, 218, 395, 396, 397, 398, 219, 399,
	400, 0, 220, 401, 402, 221, 222, 223, 0, 0,
	403, 404, 405, 0, 224, 406, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 239, 0,
	0, 0, 0, 0, 0, 0, 240, 241, 464, 242,
	407, 243, 408, 409, 0, 244, 0, 245, 0, 246,
	0, 0, 247, 248, 0, 249, 0, 0, 0, 410,
	250, 251, 253, 254, 252, 255, 411, 412, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 413, 414, 415,
	0, 258, 0, 259, 0, 0, 0, 260, 0, 261,
	416, 0, 417, 0, 262, 263, 264, 265, 266, 267,
	418, 419, 0, 0, 420, 0, 0, 0, 271, 0,
	268, 0, 0, 269, 421, 270, 422, 423, 424, 425,
	426, 0, 427, 0, 272, 0, 273, 274, 275, 0,
	428, 429, 0, 0, 276, 277, 278, 0, 280, 279,
	0, 430, 0, 281, 282, 0, 0, 283, 284, 0,
	0, 285, 0, 286, 0, 0, 287, 288, 290, 431,
	289, 0, 291, 292, 294, 293, 0, 0, 0, 432,
	295, 433, 296, 297, 0, 298, 0, 0, 299, 300,
	0, 0, 301, 434, 0, 302, 0, 435, 303, 304,
	305, 306, 307, 308, 309, 0, 310, 436, 311, 437,
	481, 0, 313, 314, 315, 316, 317, 438, 318, 319,
	0, 320, 321, 322, 323, 324, 0, 326, 327, 325,
	328, 329, 330, 331, 0, 332, 0, 0, 333, 334,
	335, 439, 336, 0, 340, 341, 342, 343, 344, 345,
	346, 0, 348, 349, 440, 441, 442, 443, 347, 350,
	351, 0, 352, 337, 338, 353, 0, 354, 444, 445,
	355, 0, 363, 356, 357, 358, 339, 359, 362, 446,
	360, 0, 361, 447, 0, 364, 365, 0, 366, 367,
	368, 369, 370, 371, 372, 373, 0, 448, 449, 450,
	0, 0, 374, 375, 451, 452, 0, 376, 377, 378,
	379, 0, 0, 380, 381, 382, 383, 0, 384, 0,
	453, 385, 386, 387, 454, 455, 208, 0, 388, 0,
	0, 0, 0, 0, 389, 390, 0, 391, 392, 393,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 394, 0, 1860, 0, 0, 216, 217, 218,
	395, 396, 397, 398, 219, 399, 400, 0, 220, 401,
	402, 221, 222, 223, 0, 0, 403, 404, 405, 0,
	224, 406, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 239, 0, 0, 0, 0, 0,
	0, 0, 240, 241, 464, 242, 407, 243, 408, 409,
	0, 244, 0, 245, 0, 246, 0, 0, 247, 248,
	0, 249, 0, 0, 0, 410, 250, 251, 253, 254,
	252, 255, 411, 412, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 413, 414, 415, 0, 258, 0, 259,
	0, 0, 0, 260, 0, 261, 416, 0, 417, 0,
	262, 263, 264, 265, 266, 267, 418, 419, 0, 0,
	420, 0, 0, 0, 271, 0, 268, 0, 0, 269,
	421, 270, 422, 423, 424, 425, 426, 0, 427, 0,
	272, 0, 273, 274, 275, 0, 428, 429, 0, 0,
	276, 277, 278, 0, 280, 279, 0, 430, 0, 281,
	282, 0, 0, 283, 284, 0, 0, 285, 0, 286,
	0, 0, 287, 288, 290, 431, 289, 0, 291, 292,
	294, 293, 0, 0, 0, 432, 295, 433, 296, 297,
	0, 298, 0, 0, 299, 300, 0, 0, 301, 434,
	0, 302, 0, 435, 303, 304, 305, 306, 307, 308,
	309, 0, 310, 436, 311, 437, 312, 0, 313, 314,
	315, 316, 317, 438, 318, 319, 0, 320, 321, 322,
	323, 324, 0, 326, 327, 325, 328, 329, 330, 331,
	0, 332, 0, 0, 333, 334, 335, 439, 336, 0,
	340, 341, 342, 343, 344, 345, 346, 0, 348, 349,
	440, 441, 442, 443, 347, 350, 351, 0, 352, 337,
	338, 353, 0, 354, 444, 445, 355, 0, 363, 356,
	357, 358, 339, 359, 362, 446, 360, 0, 361, 447,
	0, 364, 365, 0, 366, 367, 368, 369, 370, 371,
	372, 373, 0, 448, 449, 450, 0, 0, 374, 375,
	451, 452, 0, 376, 377, 378, 379, 0, 0, 380,
	381, 382, 383, 0, 384, 0, 453, 385, 386, 387,
	454, 455, 208, 2341, 388, 0, 0, 0, 0, 0,
	389, 390, 0, 391, 392, 393, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 394, 0,
	0, 0, 0, 216, 217, 218, 395, 396, 397, 398,
	219, 399, 400, 0, 220, 401, 402, 221, 222, 223,
	0, 0, 403, 404, 405, 0, 224, 406, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	239, 0, 0, 0, 0, 0, 0, 0, 240, 241,
	464, 242, 407, 243, 408, 409, 0, 244, 0, 245,
	0, 246, 0, 0, 247, 248, 0, 249, 0, 0,
	0, 410, 250, 251, 253, 254, 252, 255, 411, 412,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 413,
	414, 415, 0, 258, 0, 259, 0, 0, 0, 260,
	0, 261, 416, 0, 417, 0, 262, 263, 264, 265,
	266, 267, 418, 419, 0, 0, 420, 0, 0, 0,
	271, 0, 268, 0, 0, 269, 421, 270, 422, 423,
	424, 425, 426, 0, 427, 0, 272, 0, 273, 274,
	275, 0, 428, 429, 0, 0, 276, 277, 278, 0,
	280, 279, 0, 430, 0, 281, 282, 0, 0, 283,
	284, 0, 0, 285, 0, 286, 0, 0, 287, 288,
	290, 431, 289, 0, 291, 292, 294, 293, 0, 0,
	0, 432, 295, 433, 296, 297, 0, 298, 0, 0,
	299, 300, 0, 0, 301, 434, 0, 302, 0, 435,
	303, 304, 305, 306, 307, 308, 309, 0, 310, 436,
	311, 437, 312, 0, 313, 314, 315, 316, 317, 438,
	318, 319, 0, 320, 321, 322, 323, 324, 0, 326,
	327, 325, 328, 329, 330, 331, 0, 332, 0, 0,
	333, 334, 335, 439, 336, 0, 340, 341, 342, 343,
	344, 345, 346, 0, 348, 349, 440, 441, 442, 443,
	347, 350, 351, 0, 352, 337, 338, 353, 0, 354,
	444, 445, 355, 0, 363, 356, 357, 358, 339, 359,
	362, 446, 360, 0, 361, 447, 0, 364, 365, 0,
	366, 367, 368, 369, 370, 371, 372, 373, 0, 448,
	449, 450, 0, 0, 374, 375, 451, 452, 0, 376,
	377, 378, 379, 0, 0, 380, 381, 382, 383, 0,
	384, 0, 453, 385, 386, 387, 454, 455, 208, 2341,
	388, 0, 0, 0, 0, 0, 389, 390, 0, 391,
	392, 393, 0, 0, 211, 212, 213, 214, 0, 215,
	0, 0, 0, 0, 394, 0, 0, 0, 0, 216,
	217, 218, 395, 396, 397, 398, 219, 399, 400, 0,
	220, 401, 402, 221, 222, 223, 0, 0, 403, 404,
	405, 0, 224, 406, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 0, 237, 238, 239, 0, 0, 0,
	0, 0, 0, 0, 240, 241, 464, 242, 407, 243,
	408, 409, 0, 244, 0, 245, 0, 246, 0, 0,
	247, 248, 0, 249, 0, 0, 0, 410, 250, 251,
	253, 254, 252, 255, 411, 412, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 413, 414, 415, 0, 258,
	0, 259, 0, 0, 0, 260, 0, 261, 416, 0,
	417, 0, 262, 263, 264, 265, 266, 267, 418, 419,
	0, 0, 420, 0, 0, 0, 271, 0, 268, 0,
	0, 269, 421, 270, 422, 423, 424, 425, 426, 0,
	427, 0, 272, 0, 273, 274, 275, 0, 428, 429,
	0, 0, 276, 277, 278, 0, 280, 279, 0, 430,
	0, 281, 282, 0, 0, 283, 284, 0, 0, 285,
	0, 286, 0, 0, 287, 288, 290, 431, 289, 0,
	291, 292, 294, 293, 0, 0, 0, 432, 295, 433,
	296, 297, 0, 298, 0, 0, 299, 2338, 0, 0,
	301, 434, 0, 302, 0, 435, 303, 304, 305, 306,
	307, 308, 309, 0, 310, 436, 311, 437, 312, 0,
	313, 314, 315, 316, 317, 438, 318, 319, 0, 320,
	321, 322, 323, 324, 0, 326, 327, 325, 328, 329,
	330, 331, 0, 332, 0, 0, 333, 334, 335, 439,
	336, 0, 340, 341, 342, 343, 344, 345, 346, 0,
	348, 349, 440, 441, 442, 443, 347, 350, 351, 0,
	352, 337, 338, 353, 0, 354, 444, 445, 355, 0,
	363, 356, 357, 358, 339, 359, 362, 446, 360, 0,
	361, 447, 0, 364, 365, 0, 366, 367, 368, 369,
	370, 371, 372, 373, 0, 448, 449, 450, 0, 0,
	374, 375, 451, 452, 0, 376, 377, 378, 379, 0,
	0, 380, 381, 382, 383, 0, 384, 0, 453, 385,
	386, 387, 454, 455, 208, 0, 388, 0, 0, 0,
	0, 0, 389, 390, 0, 391, 392, 393, 0, 0,
	211, 212, 213, 214, 0, 215, 0, 0, 0, 0,
	394, 0, 0, 0, 0, 216, 217, 218, 395, 396,
	397, 398, 219, 399, 400, 0, 220, 401, 402, 221,
	222, 223, 0, 0, 403, 404, 405, 0, 224, 406,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 0,
	237, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	240, 241, 464, 242, 407, 243, 408, 409, 0, 244,
	0, 245, 0, 246, 0, 0, 247, 248, 0, 249,
	0, 0, 0, 410, 250, 251, 253, 254, 252, 255,
	411, 412, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 413, 414, 415, 0, 258, 0, 259, 0, 0,
	0, 260, 0, 261, 416, 0, 417, 0, 262, 263,
	264, 265, 266, 267, 418, 419, 0, 0, 420, 0,
	0, 0, 271, 0, 268, 0, 0, 269, 421, 270,
	422, 423, 424, 425, 426, 0, 427, 0, 272, 0,
	273, 274, 275, 0, 428, 429, 0, 0, 276, 277,
	278, 0, 280, 279, 0, 430, 0, 281, 282, 0,
	0, 283, 284, 0, 0, 285, 0, 286, 0, 0,
	287, 288, 290, 431, 289, 0, 291, 292, 294, 293,
	0, 0, 0, 432, 295, 433, 296, 297, 0, 298,
	0, 875, 299, 300, 0, 0, 301, 434, 0, 302,
	0, 435, 303, 304, 305, 306, 307, 308, 309, 0,
	310, 436, 311, 437, 312, 0, 313, 314, 315, 316,
	317, 438, 318, 319, 0, 320, 321, 322, 323, 324,
	0, 326, 327, 325, 328, 329, 330, 331, 0, 332,
	0, 0, 333, 334, 335, 439, 336, 0, 340, 341,
	342, 343, 344, 345, 346, 0, 348, 349, 440, 441,
	442, 443, 347, 350, 351, 0, 352, 337, 338, 353,
	0, 354, 444, 445, 355, 0, 363, 356, 357, 358,
	339, 359, 362, 446, 360, 0, 361, 447, 0, 364,
	365, 0, 366, 367, 368, 369, 370, 371, 372, 373,
	0, 448, 449, 450, 0, 0, 374, 375, 451, 452,
	0, 376, 377, 378, 379, 0, 0, 380, 381, 382,
	383, 0, 384, 0, 453, 385, 386, 387, 454, 455,
	0, 1625, 388, 208, 0, 0, 0, 0, 389, 390,
	0, 391, 392, 393, 0, 0, 0, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 394,
	0, 0, 0, 0, 216, 217, 218, 395, 396, 397,
	398, 219, 399, 400, 0, 220, 401, 402, 221, 222,
	223, 0, 0, 403, 404, 405, 0, 224, 406, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 239, 0, 0, 0, 0, 0, 0, 0, 240,
	241, 464, 242, 407, 243, 408, 409, 0, 244, 0,
	245, 0, 246, 0, 0, 247, 248, 0, 249, 0,
	0, 0, 410, 250, 251, 253, 254, 252, 255, 411,
	412, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	413, 414, 415, 0, 258, 0, 259, 0, 0, 0,
	260, 0, 261, 416, 0, 417, 0, 262, 263, 264,
	265, 266, 267, 418, 419, 0, 0, 420, 0, 0,
	0, 271, 0, 268, 0, 0, 269, 421, 270, 422,
	423, 424, 425, 426, 0, 427, 0, 272, 0, 273,
	274, 275, 0, 428, 429, 0, 0, 276, 277, 278,
	0, 280, 279, 0, 430, 0, 281, 282, 0, 0,
	283, 284, 0, 0, 285, 0, 286, 0, 0, 287,
	288, 290, 431, 289, 0, 291, 292, 294, 293, 0,
	0, 0, 432, 295, 433, 296, 297, 0, 298, 0,
	0, 299, 300, 0, 0, 301, 434, 0, 302, 0,
	435, 303, 304, 305, 306, 307, 308, 309, 0, 310,
	436, 311, 437, 312, 0, 313, 314, 315, 316, 317,
	438, 318, 319, 0, 320, 321, 322, 323, 324, 0,
	326, 327, 325, 328, 329, 330, 331, 0, 332, 0,
	0, 333, 334, 335, 439, 336, 0, 340, 341, 342,
	343, 344, 345, 346, 0, 348, 349, 440, 441, 442,
	443, 347, 350, 351, 0, 352, 337, 338, 353, 0,
	354, 444, 445, 355, 0, 363, 356, 357, 358, 339,
	359, 362, 446, 360, 0, 361, 447, 0, 364, 365,
	0, 366, 367, 368, 369, 370, 371, 372, 373, 0,
	448, 449, 450, 0, 0, 374, 375, 451, 452, 0,
	376, 377, 378, 379, 0, 0, 380, 381, 382, 383,
	0, 384, 0, 453, 385, 386, 387, 454, 455, 0,
	1623, 388, 208, 0, 0, 0, 0, 389, 390, 0,
	391, 392, 393, 0, 0, 0, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 394, 0,
	0, 0, 0, 216, 217, 218, 395, 396, 397, 398,
	219, 399, 400, 0, 220, 401, 402, 221, 222, 223,
	0, 0, 403, 404, 405, 0, 224, 406, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	239, 0, 0, 0, 0, 0, 0, 0, 240, 241,
	464, 242, 407, 243, 408, 409, 0, 244, 0, 245,
	0, 246, 0, 0, 247, 248, 0, 249, 0, 0,
	0, 410, 250, 251, 253, 254, 252, 255, 411, 412,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 413,
	414, 415, 0, 258, 0, 259, 0, 0, 0, 260,
	0, 261, 416, 0, 417, 0, 262, 263, 264, 265,
	266, 267, 418, 419, 0, 0, 420, 0, 0, 0,
	271, 0, 268, 0, 0, 269, 421, 270, 422, 423,
	424, 425, 426, 0, 427, 0, 272, 0, 273, 274,
	275, 0, 428, 429, 0, 0, 276, 277, 278, 0,
	280, 279, 0, 430, 0, 281, 282, 0, 0, 283,
	284, 0, 0, 285, 0, 286, 0, 0, 287, 288,
	290, 431, 289, 0, 291, 292, 294, 293, 0, 0,
	0, 432, 295, 433, 296, 297, 0, 298, 0, 0,
	299, 300, 0, 0, 301, 434, 0, 302, 0, 435,
	303, 304, 305, 306, 307, 308, 309, 0, 310, 436,
	311, 437, 312, 0, 313, 314, 315, 316, 317, 438,
	318, 319, 0, 320, 321, 322, 323, 324, 0, 326,
	327, 325, 328, 329, 330, 331, 0, 332, 0, 0,
	333, 334, 335, 439, 336, 0, 340, 341, 342, 343,
	344, 345, 346, 0, 348, 349, 440, 441, 442, 443,
	347, 350, 351, 0, 352, 337, 338, 353, 0, 354,
	444, 445, 355, 0, 363, 356, 357, 358, 339, 359,
	362, 446, 360, 0, 361, 447, 0, 364, 365, 0,
	366, 367, 368, 369, 370, 371, 372, 373, 0, 448,
	449, 450, 0, 0, 374, 375, 451, 452, 0, 376,
	377, 378, 379, 0, 0, 380, 381, 382, 383, 0,
	384, 0, 453, 385, 386, 387, 454, 455, 0, 1621,
	388, 208, 0, 0, 0, 0, 389, 390, 0, 391,
	392, 393, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 394, 0, 0,
	0, 0, 216, 217, 218, 395, 396, 397, 398, 219,
	399, 400, 0, 220, 401, 402, 221, 222, 223, 0,
	0, 403, 404, 405, 0, 224, 406, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 0, 237, 238, 239,
	0, 0, 0, 0, 0, 0, 0, 240, 241, 464,
	242, 407, 243, 408, 409, 0, 244, 0, 245, 0,
	246, 0, 0, 247, 248, 0, 249, 0, 0, 0,
	410, 250, 251, 253, 254, 252, 255, 411, 412, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 413, 414,
	415, 0, 258, 0, 259, 0, 0, 0, 260, 0,
	261, 416, 0, 417, 0, 262, 263, 264, 265, 266,
	267, 418, 419, 0, 0, 420, 0, 0, 0, 271,
	0, 268, 0, 0, 269, 421, 270, 422, 423, 424,
	425, 426, 0, 427, 0, 272, 0, 273, 274, 275,
	0, 428, 429, 0, 0, 276, 277, 278, 0, 280,
	279, 0, 430, 0, 281, 282, 0, 0, 283, 284,
	0, 0, 285, 0, 286, 0, 0, 287, 288, 290,
	431, 289, 0, 291, 292, 294, 293, 0, 0, 0,
	432, 295, 433, 296, 297, 0, 298, 0, 0, 299,
	300, 0, 0, 301, 434, 0, 302, 0, 435, 303,
	304, 305, 306, 307, 308, 309, 0, 310, 436, 311,
	437, 312, 0, 313, 314, 315, 316, 317, 438, 318,
	319, 0, 320, 321, 322, 323, 324, 0, 326, 327,
	325, 328, 329, 330, 331, 0, 332, 0, 0, 333,
	334, 335, 439, 336, 0, 340, 341, 342, 343, 344,
	345, 346, 0, 348, 349, 440, 441, 442, 443, 347,
	350, 351, 0, 352, 337, 338, 353, 0, 354, 444,
	445, 355, 0, 363, 356, 357, 358, 339, 359, 362,
	446, 360, 0, 361, 447, 0, 364, 365, 0, 366,
	367, 368, 369, 370, 371, 372, 373, 0, 448, 449,
	450, 0, 0, 374, 375, 451, 452, 0, 376, 377,
	378, 379, 0, 0, 380, 381, 382, 383, 0, 384,
	0, 453, 385, 386, 387, 454, 455, 208, 0, 388,
	0, 0, 0, 0, 0, 389, 390, 0, 391, 392,
	393, 0, 0, 211, 212, 213, 214, 1599, 215, 0,
	0, 0, 0, 394, 0, 0, 0, 0, 216, 217,
	218, 395, 396, 397, 398, 219, 399, 400, 0, 220,
	401, 402, 221, 222, 223, 0, 0, 403, 404, 405,
	0, 224, 406, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 239, 0, 0, 0, 0,
	0, 0, 0, 240, 241, 464, 242, 407, 243, 408,
	409, 0, 244, 0, 245, 0, 246, 0, 0, 247,
	248, 0, 249, 0, 0, 0, 410, 250, 251, 253,
	254, 252, 255, 411, 412, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 413, 414, 415, 0, 258, 0,
	259, 0, 0, 0, 260, 0, 261, 416, 0, 417,
	0, 262, 263, 264, 265, 266, 267, 418, 419, 0,
	0, 420, 0, 0, 0, 271, 0, 268, 0, 0,
	269, 421, 270, 422, 423, 424, 425, 426, 0, 427,
	0, 272, 0, 273, 274, 275, 0, 428, 429, 0,
	0, 276, 277, 278, 0, 280, 279, 0, 430, 0,
	281, 282, 0, 0, 283, 284, 0, 0, 285, 0,
	286, 0, 0, 287, 288, 290, 431, 289, 0, 291,
	292, 294, 293, 0, 0, 0, 432, 295, 433, 296,
	297, 0, 298, 0, 0, 299, 300, 0, 0, 301,
	434, 0, 302, 0, 435, 303, 304, 305, 306, 307,
	308, 309, 0, 310, 436, 311, 437, 312, 0, 313,
	314, 315, 316, 317, 438, 318, 319, 0, 320, 321,
	322, 323, 324, 0, 326, 327, 325, 328, 329, 330,
	331, 0, 332, 0, 0, 333, 334, 335, 439, 336,
	0, 340, 341, 342, 343, 344, 345, 346, 0, 348,
	349, 440, 441, 442, 443, 347, 350, 351, 0, 352,
	337, 338, 353, 0, 354, 444, 445, 355, 0, 363,
	356, 357, 358, 339, 359, 362, 446, 360, 0, 361,
	447, 0, 364, 365, 0, 366, 367, 368, 369, 370,
	371, 372, 373, 0, 448, 449, 450, 0, 0, 374,
	375, 451, 452, 0, 376, 377, 378, 379, 0, 0,
	380, 381, 382, 383, 0, 384, 0, 453, 385, 386,
	387, 454, 455, 0, 1560, 388, 208, 0, 0, 0,
	0, 389, 390, 0, 391, 392, 393, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 394, 0, 0, 0, 0, 216, 217, 218,
	395, 396, 397, 398, 219, 399, 400, 0, 220, 401,
	402, 221, 222, 223, 0, 0, 403, 404, 405, 0,
	224, 406, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 239, 0, 0, 0, 0, 0,
	0, 0, 240, 241, 464, 242, 407, 243, 408, 409,
	0, 244, 0, 245, 0, 246, 0, 0, 247, 248,
	0, 249, 0, 0, 0, 410, 250, 251, 253, 254,
	252, 255, 411, 412, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 413, 414, 415, 0, 258, 0, 259,
	0, 0, 0, 260, 0, 261, 416, 0, 417, 0,
	262, 263, 264, 265, 266, 267, 418, 419, 0, 0,
	420, 0, 0, 0, 271, 0, 268, 0, 0, 269,
	421, 270, 422, 423, 424, 425, 426, 0, 427, 0,
	272, 0, 273, 274, 275, 0, 428, 429, 0, 0,
	276, 277, 278, 0, 280, 279, 0, 430, 0, 281,
	282, 0, 0, 283, 284, 0, 0, 285, 0, 286,
	0, 0, 287, 288, 290, 431, 289, 0, 291, 292,
	294, 293, 0, 0, 0, 432, 295, 433, 296, 297,
	0, 298, 0, 0, 299, 300, 0, 0, 301, 434,
	0, 302, 0, 435, 303, 304, 305, 306, 307, 308,
	309, 0, 310, 436, 311, 437, 312, 0, 313, 314,
	315, 316, 317, 438, 318, 319, 0, 320, 321, 322,
	323, 324, 0, 326, 327, 325, 328, 329, 330, 331,
	0, 332, 0, 0, 333, 334, 335, 439, 336, 0,
	340, 341, 342, 343, 344, 345, 346, 0, 348, 349,
	440, 441, 442, 443, 347, 350, 351, 0, 352, 337,
	338, 353, 0, 354, 444, 445, 355, 0, 363, 356,
	357, 358, 339, 359, 362, 446, 360, 0, 361, 447,
	0, 364, 365, 0, 366, 367, 368, 369, 370, 371,
	372, 373, 0, 448, 449, 450, 0, 0, 374, 375,
	451, 452, 0, 376, 377, 378, 379, 0, 0, 380,
	381, 382, 383, 0, 384, 0, 453, 385, 386, 387,
	454, 455, 0, 1558, 388, 208, 0, 0, 0, 0,
	389, 390, 0, 391, 392, 393, 0, 0, 0, 0,
	0, 211, 212, 213, 214, 0, 215, 0, 0, 0,
	0, 394, 0, 0, 0, 0, 216, 217, 218, 395,
	396, 397, 398, 219, 399, 400, 0, 220, 401, 402,
	221, 222, 223, 0, 0, 403, 404, 405, 0, 224,
	406, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	0, 237, 238, 239, 0, 0, 0, 0, 0, 0,
	0, 240, 241, 464, 242, 407, 243, 408, 409, 0,
	244, 0, 245, 0, 246, 0, 0, 247, 248, 0,
	249, 0, 0, 0, 410, 250, 251, 253, 254, 252,
	255, 411, 412, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 413, 414, 415, 0, 258, 0, 259, 0,
	0, 0, 260, 0, 261, 416, 0, 417, 0, 262,
	263, 264, 265, 266, 267, 418, 419, 0, 0, 420,
	0, 0, 0, 271, 0, 268, 0, 0, 269, 421,
	270, 422, 423, 424, 425, 426, 0, 427, 0, 272,
	0, 273, 274, 275, 0, 428, 429, 0, 0, 276,
	277, 278, 0, 280, 279, 0, 430, 0, 281, 282,
	0, 0, 283, 284, 0, 0, 285, 0, 286, 0,
	0, 287, 288, 290, 431, 289, 0, 291, 292, 294,
	293, 0, 0, 0, 432, 295, 433, 296, 297, 0,
	298, 0, 0, 299, 300, 0, 0, 301, 434, 0,
	302, 0, 435, 303, 304, 305, 306, 307, 308, 309,
	0, 310, 436, 311, 437, 312, 0, 313, 314, 315,
	316, 317, 438, 318, 319, 0, 320, 321, 322, 323,
	324, 0, 326, 327, 325, 328, 329, 330, 331, 0,
	332, 0, 0, 333, 334, 335, 439, 336, 0, 340,
	341, 342, 343, 344, 345, 346, 0, 348, 349, 440,
	441, 442, 443, 347, 350, 351, 0, 352, 337, 338,
	353, 0, 354, 444, 445, 355, 0, 363, 356, 357,
	358, 339, 359, 362, 446, 360, 0, 361, 447, 0,
	364, 365, 0, 366, 367, 368, 369, 370, 371, 372,
	373, 0, 448, 449, 450, 0, 0, 374, 375, 451,
	452, 0, 376, 377, 378, 379, 0, 0, 380, 381,
	382, 383, 0, 384, 0, 453, 385, 386, 387, 454,
	455, 0, 590, 388, 208, 0, 0, 0, 0, 389,
	390, 0, 391, 392, 393, 0, 0, 0, 0, 0,
	211, 212, 213, 214, 0, 215, 0, 0, 0, 0,
	394, 0, 0, 0, 0, 216, 217, 218, 395, 396,
	397, 398, 219, 399, 400, 0, 220, 401, 402, 221,
	222, 223, 0, 0, 403, 404, 1133, 0, 224, 406,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 0,
	237, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	240, 241, 464, 242, 407, 243, 408, 409, 0, 244,
	0, 245, 0, 246, 0, 0, 247, 248, 0, 249,
	0, 0, 0, 410, 250, 251, 253, 254, 252, 255,
	411, 412, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 413, 414, 415, 0, 258, 0, 259, 0, 0,
	0, 260, 0, 261, 416, 0, 417, 0, 262, 263,
	264, 265, 266, 267, 418, 419, 0, 0, 420, 0,
	0, 0, 271, 0, 268, 0, 0, 269, 421, 270,
	422, 423, 424, 425, 426, 0, 427, 0, 272, 0,
	273, 274, 275, 0, 428, 429, 0, 0, 276, 277,
	278, 0, 280, 279, 0, 430, 0, 281, 282, 0,
	0, 283, 284, 0, 0, 285, 0, 286, 0, 0,
	287, 288, 290, 431, 591, 0, 291, 292, 294, 293,
	0, 0, 0, 432, 295, 433, 296, 297, 0, 298,
	0, 0, 299, 300, 0, 0, 301, 434, 0, 302,
	0, 435, 303, 304, 305, 306, 307, 308, 309, 0,
	310, 436, 311, 437, 312, 0, 313, 314, 315, 316,
	317, 438, 318, 319, 0, 320, 321, 322, 323, 324,
	0, 326, 327, 325, 328, 329, 330, 331, 0, 332,
	0, 0, 333, 334, 335, 439, 336, 0, 340, 341,
	587, 343, 344, 345, 346, 0, 348, 349, 440, 441,
	442, 443, 347, 350, 351, 0, 352, 337, 338, 353,
	0, 354, 444, 445, 355, 0, 363, 356, 357, 358,
	339, 359, 362, 446, 360, 0, 361, 447, 0, 364,
	365, 0, 366, 367, 368, 369, 370, 371, 372, 373,
	0, 586, 449, 450, 0, 0, 374, 375, 451, 452,
	0, 376, 377, 378, 379, 0, 0, 380, 381, 382,
	383, 0, 384, 0, 453, 385, 386, 387, 454, 455,
	0, 1459, 388, 208, 0, 0, 0, 0, 389, 390,
	0, 391, 392, 393, 0, 0, 0, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 394,
	0, 0, 0, 0, 216, 217, 218, 395, 396, 397,
	398, 219, 399, 400, 0, 220, 401, 402, 221, 222,
	223, 0, 0, 403, 404, 405, 0, 224, 406, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 239, 0, 0, 0, 0, 0, 0, 0, 240,
	241, 464, 242, 407, 243, 408, 409, 0, 244, 0,
	245, 0, 246, 0, 0, 247, 248, 0, 249, 0,
	0, 0, 410, 250, 251, 253, 254, 252, 255, 411,
	412, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	413, 414, 415, 0, 258, 0, 259, 0, 0, 0,
	260, 0, 261, 416, 0, 417, 0, 262, 263, 264,
	265, 266, 267, 1458, 419, 0, 0, 420, 0, 0,
	0, 271, 0, 268, 0, 0, 269, 421, 270, 422,
	423, 424, 425, 426, 0, 427, 0, 272, 0, 273,
	274, 275, 0, 428, 429, 0, 0, 276, 277, 278,
	0, 280, 279, 0, 430, 0, 281, 282, 0, 0,
	283, 284, 0, 0, 285, 0, 286, 0, 0, 287,
	288, 290, 431, 289, 0, 291, 292, 294, 293, 0,
	0, 0, 432, 295, 433, 296, 297, 0, 298, 0,
	0, 299, 300, 0, 0, 301, 434, 0, 302, 0,
	435, 303, 304, 305, 306, 307, 308, 309, 0, 310,
	436, 311, 437, 312, 0, 313, 314, 315, 316, 317,
	438, 318, 319, 0, 320, 321, 322, 323, 324, 0,
	326, 327, 325, 328, 329, 330, 331, 0, 332, 0,
	0, 333, 334, 335, 439, 336, 0, 340, 341, 342,
	343, 344, 345, 346, 0, 348, 349, 440, 441, 442,
	443, 347, 350, 351, 0, 352, 337, 338, 353, 0,
	354, 444, 445, 355, 0, 363, 356, 357, 358, 339,
	359, 362, 446, 360, 0, 361, 447, 0, 364, 365,
	0, 366, 367, 368, 369, 370, 371, 372, 373, 0,
	448, 449, 450, 0, 0, 374, 375, 451, 452, 0,
	376, 377, 378, 379, 0, 0, 380, 381, 382, 383,
	0, 384, 0, 453, 385, 386, 387, 454, 455, 0,
	590, 388, 208, 0, 0, 0, 0, 389, 390, 0,
	391, 392, 393, 0, 0, 0, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 394, 0,
	0, 0, 0, 216, 217, 218, 395, 396, 397, 398,
	219, 399, 400, 0, 220, 401, 402, 221, 222, 223,
	0, 0, 403, 404, 1133, 0, 224, 406, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	239, 0, 0, 0, 0, 0, 0, 0, 240, 241,
	464, 242, 407, 243, 408, 409, 0, 244, 0, 245,
	0, 246, 0, 0, 247, 248, 0, 249, 0, 0,
	0, 410, 250, 251, 253, 254, 252, 255, 411, 412,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 413,
	414, 415, 0, 258, 0, 259, 0, 0, 0, 260,
	0, 261, 416, 0, 417, 0, 262, 263, 264, 265,
	266, 267, 418, 419, 0, 0, 420, 0, 0, 0,
	271, 0, 268, 0, 0, 269, 421, 270, 422, 423,
	424, 425, 426, 0, 427, 0, 272, 0, 273, 274,
	275, 0, 428, 429, 0, 0, 276, 277, 278, 0,
	280, 279, 0, 430, 0, 281, 282, 0, 0, 283,
	284, 0, 0, 285, 0, 286, 0, 0, 287, 288,
	290, 431, 591, 0, 291, 292, 294, 293, 0, 0,
	0, 432, 295, 433, 296, 297, 0, 298, 0, 0,
	299, 300, 0, 0, 301, 434, 0, 302, 0, 435,
	303, 304, 305, 306, 307, 308, 309, 0, 310, 436,
	311, 437, 312, 0, 313, 314, 315, 316, 317, 438,
	318, 319, 0, 320, 321, 322, 323, 324, 0, 326,
	327, 325, 328, 329, 330, 331, 0, 332, 0, 0,
	333, 334, 335, 439, 336, 0, 340, 341, 587, 343,
	344, 345, 346, 0, 348, 349, 440, 441, 442, 443,
	347, 350, 351, 0, 352, 337, 338, 353, 0, 354,
	444, 445, 355, 0, 363, 356, 357, 358, 339, 359,
	362, 446, 360, 0, 361, 447, 0, 364, 365, 0,
	366, 367, 368, 369, 370, 371, 372, 373, 0, 586,
	449, 450, 0, 0, 374, 1134, 451, 452, 0, 376,
	377, 378, 379, 0, 0, 380, 381, 382, 383, 0,
	384, 0, 453, 385, 386, 387, 454, 455, 0, 590,
	388, 208, 0, 0, 0, 0, 389, 390, 0, 391,
	392, 393, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 394, 0, 0,
	0, 0, 216, 217, 218, 395, 396, 397, 398, 219,
	399, 400, 0, 220, 401, 402, 221, 222, 223, 0,
	0, 403, 404, 405, 0, 580, 406, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 0, 237, 238, 239,
	0, 0, 0, 0, 0, 0, 0, 240, 241, 464,
	242, 407, 243, 408, 409, 0, 244, 0, 245, 0,
	246, 0, 0, 247, 248, 0, 249, 0, 0, 0,
	410, 250, 251, 253, 254, 252, 255, 411, 412, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 413, 414,
	415, 0, 258, 0, 259, 0, 0, 0, 260, 0,
	261, 416, 0, 417, 0, 262, 263, 264, 265, 266,
	267, 418, 419, 0, 0, 420, 0, 0, 0, 271,
	0, 268, 0, 0, 269, 421, 270, 422, 423, 424,
	425, 426, 0, 427, 0, 272, 0, 273, 274, 275,
	0, 428, 429, 0, 0, 276, 277, 278, 0, 280,
	279, 0, 430, 0, 281, 282, 0, 0, 283, 284,
	0, 0, 285, 0, 286, 0, 0, 287, 288, 290,
	431, 591, 0, 291, 292, 294, 293, 0, 0, 0,
	432, 295, 433, 296, 297, 0, 298, 0, 0, 299,
	300, 0, 0, 301, 434, 0, 302, 0, 435, 303,
	304, 305, 306, 307, 308, 309, 0, 310, 436, 311,
	437, 312, 0, 313, 314, 315, 316, 317, 438, 318,
	319, 0, 320, 321, 322, 323, 324, 0, 326, 327,
	325, 328, 329, 330, 331, 0, 332, 0, 0, 333,
	334, 335, 439, 336, 0, 340, 341, 587, 343, 344,
	345, 346, 0, 348, 349, 440, 441, 442, 443, 347,
	1109, 351, 0, 352, 337, 338, 353, 0, 354, 444,
	445, 355, 0, 363, 356, 357, 358, 339, 359, 362,
	446, 360, 0, 361, 447, 0, 364, 365, 0, 366,
	367, 368, 369, 370, 371, 372, 373, 0, 586, 449,
	450, 0, 0, 374, 375, 451, 452, 0, 376, 377,
	378, 379, 0, 0, 380, 381, 382, 383, 0, 384,
	0, 453, 385, 386, 387, 454, 455, 0, 1077, 388,
	208, 0, 0, 0, 0, 389, 390, 0, 391, 392,
	393, 0, 0, 0, 0, 0, 211, 212, 213, 214,
	0, 215, 0, 0, 0, 0, 394, 0, 0, 0,
	0, 216, 217, 218, 395, 396, 397, 398, 219, 399,
	400, 0, 220, 401, 402, 221, 222, 223, 0, 0,
	403, 404, 405, 0, 224, 406, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 239, 0,
	0, 0, 0, 0, 0, 0, 240, 241, 464, 242,
	407, 243, 408, 409, 0, 244, 0, 245, 0, 246,
	0, 0, 247, 248, 0, 249, 0, 0, 0, 410,
	250, 251, 253, 254, 252, 255, 411, 412, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 413, 414, 415,
	0, 258, 0, 259, 0, 0, 0, 260, 0, 261,
	416, 0, 417, 0, 262, 263, 264, 265, 266, 267,
	1076, 419, 0, 0, 420, 0, 0, 0, 271, 0,
	268, 0, 0, 269, 421, 270, 422, 423, 424, 425,
	426, 0, 427, 0, 272, 0, 273, 274, 275, 0,
	428, 429, 0, 0, 276, 277, 278, 0, 280, 279,
	0, 430, 0, 281, 282, 0, 0, 283, 284, 0,
	0, 285, 0, 286, 0, 0, 287, 288, 290, 431,
	289, 0, 291, 292, 294, 293, 0, 0, 0, 432,
	295, 433, 296, 297, 0, 298, 0, 0, 299, 300,
	0, 0, 301, 434, 0, 302, 0, 435, 303, 304,
	305, 306, 307, 308, 309, 0, 310, 436, 311, 437,
	312, 0, 313, 314, 315, 316, 317, 438, 318, 319,
	0, 320, 321, 322, 323, 324, 0, 326, 327, 325,
	328, 329, 330, 331, 0, 332, 0, 0, 333, 334,
	335, 439, 336, 0, 340, 341, 342, 343, 344, 345,
	346, 0, 348, 349, 440, 441, 442, 443, 347, 350,
	351, 0, 352, 337, 338, 353, 0, 354, 444, 445,
	355, 0, 363, 356, 357, 358, 339, 359, 362, 446,
	360, 0, 361, 447, 0, 364, 365, 0, 366, 367,
	368, 369, 370, 371, 372, 373, 0, 448, 449, 450,
	0, 0, 374, 375, 451, 452, 0, 376, 377, 378,
	379, 0, 0, 380, 381, 382, 383, 0, 384, 0,
	453, 385, 386, 387, 454, 455, 0, 1073, 388, 208,
	0, 0, 0, 0, 389, 390, 0, 391, 392, 393,
	0, 0, 0, 0, 0, 211, 212, 213, 214, 0,
	215, 0, 0, 0, 0, 394, 0, 0, 0, 0,
	216, 217, 218, 395, 396, 397, 398, 219, 399, 400,
	0, 220, 401, 402, 221, 222, 223, 0, 0, 403,
	404, 405, 0, 224, 406, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 0, 237, 238, 239, 0, 0,
	0, 0, 0, 0, 0, 240, 241, 464, 242, 407,
	243, 408, 409, 0, 244, 0, 245, 0, 246, 0,
	0, 247, 248, 0, 249, 0, 0, 0, 410, 250,
	251, 253, 254, 252, 255, 411, 412, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 413, 414, 415, 0,
	258, 0, 259, 0, 0, 0, 260, 0, 261, 416,
	0, 417, 0, 262, 263, 264, 265, 266, 267, 1072,
	419, 0, 0, 420, 0, 0, 0, 271, 0, 268,
	0, 0, 269, 421, 270, 422, 423, 424, 425, 426,
	0, 427, 0, 272, 0, 273, 274, 275, 0, 428,
	429, 0, 0, 276, 277, 278, 0, 280, 279, 0,
	430, 0, 281, 282, 0, 0, 283, 284, 0, 0,
	285, 0, 286, 0, 0, 287, 288, 290, 431, 289,
	0, 291, 292, 294, 293, 0, 0, 0, 432, 295,
	433, 296, 297, 0, 298, 0, 0, 299, 300, 0,
	0, 301, 434, 0, 302, 0, 435, 303, 304, 305,
	306, 307, 308, 309, 0, 310, 436, 311, 437, 312,
	0, 313, 314, 315, 316, 317, 438, 318, 319, 0,
	320, 321, 322, 323, 324, 0, 326, 327, 325, 328,
	329, 330, 331, 0, 332, 0, 0, 333, 334, 335,
	439, 336, 0, 340, 341, 342, 343, 344, 345, 346,
	0, 348, 349, 440, 441, 442, 443, 347, 350, 351,
	0, 352, 337, 338, 353, 0, 354, 444, 445, 355,
	0, 363, 356, 357, 358, 339, 359, 362, 446, 360,
	0, 361, 447, 0, 364, 365, 0, 366, 367, 368,
	369, 370, 371, 372, 373, 0, 448, 449, 450, 0,
	0, 374, 375, 451, 452, 0, 376, 377, 378, 379,
	0, 0, 380, 381, 382, 383, 0, 384, 0, 453,
	385, 386, 387, 454, 455, 0, 1070, 388, 208, 0,
	0, 0, 0, 389, 390, 0, 391, 392, 393, 0,
	0, 0, 0, 0, 211, 212, 213, 214, 0, 215,
	0, 0, 0, 0, 394, 0, 0, 0, 0, 216,
	217, 218, 395, 396, 397, 398, 219, 399, 400, 0,
	220, 401, 402, 221, 222, 223, 0, 0, 403, 404,
	405, 0, 224, 406, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 0, 237, 238, 239, 0, 0, 0,
	0, 0, 0, 0, 240, 241, 464, 242, 407, 243,
	408, 409, 0, 244, 0, 245, 0, 246, 0, 0,
	247, 248, 0, 249, 0, 0, 0, 410, 250, 251,
	253, 254, 252, 255, 411, 412, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 413, 414, 415, 0, 258,
	0, 259, 0, 0, 0, 260, 0, 261, 416, 0,
	417, 0, 262, 263, 264, 265, 266, 267, 1069, 419,
	0, 0, 420, 0, 0, 0, 271, 0, 268, 0,
	0, 269, 421, 270, 422, 423, 424, 425, 426, 0,
	427, 0, 272, 0, 273, 274, 275, 0, 428, 429,
	0, 0, 276, 277, 278, 0, 280, 279, 0, 430,
	0, 281, 282, 0, 0, 283, 284, 0, 0, 285,
	0, 286, 0, 0, 287, 288, 290, 431, 289, 0,
	291, 292, 294, 293, 0, 0, 0, 432, 295, 433,
	296, 297, 0, 298, 0, 0, 299, 300, 0, 0,
	301, 434, 0, 302, 0, 435, 303, 304, 305, 306,
	307, 308, 309, 0, 310, 436, 311, 437, 312, 0,
	313, 314, 315, 316, 317, 438, 318, 319, 0, 320,
	321, 322, 323, 324, 0, 326, 327, 325, 328, 329,
	330, 331, 0, 332, 0, 0, 333, 334, 335, 439,
	336, 0, 340, 341, 342, 343, 344, 345, 346, 0,
	348, 349, 440, 441, 442, 443, 347, 350, 351, 0,
	352, 337, 338, 353, 0, 354, 444, 445, 355, 0,
	363, 356, 357, 358, 339, 359, 362, 446, 360, 0,
	361, 447, 0, 364, 365, 0, 366, 367, 368, 369,
	370, 371, 372, 373, 0, 448, 449, 450, 0, 0,
	374, 375, 451, 452, 0, 376, 377, 378, 379, 0,
	0, 380, 381, 382, 383, 0, 384, 0, 453, 385,
	386, 387, 454, 455, 0, 1067, 388, 208, 0, 0,
	0, 0, 389, 390, 0, 391, 392, 393, 0, 0,
	0, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 394, 0, 0, 0, 0, 216, 217,
	218, 395, 396, 397, 398, 219, 399, 400, 0, 220,
	401, 402, 221, 222, 223, 0, 0, 403, 404, 405,
	0, 224, 406, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 239, 0, 0, 0, 0,
	0, 0, 0, 240, 241, 464, 242, 407, 243, 408,
	409, 0, 244, 0, 245, 0, 246, 0, 0, 247,
	248, 0, 249, 0, 0, 0, 410, 250, 251, 253,
	254, 252, 255, 411, 412, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 413, 414, 415, 0, 258, 0,
	259, 0, 0, 0, 260, 0, 261, 416, 0, 417,
	0, 262, 263, 264, 265, 266, 267, 1066, 419, 0,
	0, 420, 0, 0, 0, 271, 0, 268, 0, 0,
	269, 421, 270, 422, 423, 424, 425, 426, 0, 427,
	0, 272, 0, 273, 274, 275, 0, 428, 429, 0,
	0, 276, 277, 278, 0, 280, 279, 0, 430, 0,
	281, 282, 0, 0, 283, 284, 0, 0, 285, 0,
	286, 0, 0, 287, 288, 290, 431, 289, 0, 291,
	292, 294, 293, 0, 0, 0, 432, 295, 433, 296,
	297, 0, 298, 0, 0, 299, 300, 0, 0, 301,
	434, 0, 302, 0, 435, 303, 304, 305, 306, 307,
	308, 309, 0, 310, 436, 311, 437, 312, 0, 313,
	314, 315, 316, 317, 438, 318, 319, 0, 320, 321,
	322, 323, 324, 0, 326, 327, 325, 328, 329, 330,
	331, 0, 332, 0, 0, 333, 334, 335, 439, 336,
	0, 340, 341, 342, 343, 344, 345, 346, 0, 348,
	349, 440, 441, 442, 443, 347, 350, 351, 0, 352,
	337, 338, 353, 0, 354, 444, 445, 355, 0, 363,
	356, 357, 358, 339, 359, 362, 446, 360, 0, 361,
	447, 0, 364, 365, 0, 366, 367, 368, 369, 370,
	371, 372, 373, 0, 448, 449, 450, 0, 0, 374,
	375, 451, 452, 0, 376, 377, 378, 379, 0, 0,
	380, 381, 382, 383, 0, 384, 0, 453, 385, 386,
	387, 454, 455, 0, 1063, 388, 208, 0, 0, 0,
	0, 389, 390, 0, 391, 392, 393, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 394, 0, 0, 0, 0, 216, 217, 218,
	395, 396, 397, 398, 219, 399, 400, 0, 220, 401,
	402, 221, 222, 223, 0, 0, 403, 404, 405, 0,
	224, 406, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 239, 0, 0, 0, 0, 0,
	0, 0, 240, 241, 464, 242, 407, 243, 408, 409,
	0, 244, 0, 245, 0, 246, 0, 0, 247, 248,
	0, 249, 0, 0, 0, 410, 250, 251, 253, 254,
	252, 255, 411, 412, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 413, 414, 415, 0, 258, 0, 259,
	0, 0, 0, 260, 0, 261, 416, 0, 417, 0,
	262, 263, 264, 265, 266, 267, 1062, 419, 0, 0,
	420, 0, 0, 0, 271, 0, 268, 0, 0, 269,
	421, 270, 422, 423, 424, 425, 426, 0, 427, 0,
	272, 0, 273, 274, 275, 0, 428, 429, 0, 0,
	276, 277, 278, 0, 280, 279, 0, 430, 0, 281,
	282, 0, 0, 283, 284, 0, 0, 285, 0, 286,
	0, 0, 287, 288, 290, 431, 289, 0, 291, 292,
	294, 293, 0, 0, 0, 432, 295, 433, 296, 297,
	0, 298, 0, 0, 299, 300, 0, 0, 301, 434,
	0, 302, 0, 435, 303, 304, 305, 306, 307, 308,
	309, 0, 310, 436, 311, 437, 312, 0, 313, 314,
	315, 316, 317, 438, 318, 319, 0, 320, 321, 322,
	323, 324, 0, 326, 327, 325, 328, 329, 330, 331,
	0, 332, 0, 0, 333, 334, 335, 439, 336, 0,
	340, 341, 342, 343, 344, 345, 346, 0, 348, 349,
	440, 441, 442, 443, 347, 350, 351, 0, 352, 337,
	338, 353, 0, 354, 444, 445, 355, 0, 363, 356,
	357, 358, 339, 359, 362, 446, 360, 0, 361, 447,
	0, 364, 365, 0, 366, 367, 368, 369, 370, 371,
	372, 373, 0, 448, 449, 450, 0, 0, 374, 375,
	451, 452, 0, 376, 377, 378, 379, 0, 0, 380,
	381, 382, 383, 0, 384, 0, 453, 385, 386, 387,
	454, 455, 208, 0, 388, 0, 0, 0, 0, 0,
	389, 390, 0, 391, 392, 393, 0, 0, 211, 212,
	213, 214, 1051, 215, 0, 0, 0, 0, 394, 0,
	0, 0, 0, 216, 217, 218, 395, 396, 397, 398,
	219, 399, 400, 0, 220, 401, 402, 221, 222, 223,
	0, 0, 403, 404, 405, 0, 224, 406, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	239, 0, 0, 0, 0, 0, 0, 0, 240, 241,
	464, 242, 407, 243, 408, 409, 0, 244, 0, 245,
	0, 246, 0, 0, 247, 248, 0, 249, 0, 0,
	0, 410, 250, 251, 253, 254, 252, 255, 411, 412,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 413,
	414, 415, 0, 258, 0, 259, 0, 0, 0, 260,
	0, 261, 416, 0, 417, 0, 262, 263, 264, 265,
	266, 267, 418, 419, 0, 0, 420, 0, 0, 0,
	271, 0, 268, 0, 0, 269, 421, 270, 422, 423,
	424, 425, 426, 0, 427, 0, 272, 0, 273, 274,
	275, 0, 428, 429, 0, 0, 276, 277, 278, 0,
	280, 279, 0, 430, 0, 281, 282, 0, 0, 283,
	284, 0, 0, 285, 0, 286, 0, 0, 287, 288,
	290, 431, 289, 0, 291, 292, 294, 293, 0, 0,
	0, 432, 295, 433, 296, 297, 0, 298, 0, 0,
	299, 300, 0, 0, 301, 434, 0, 302, 0, 435,
	303, 304, 305, 306, 307, 308, 309, 0, 310, 436,
	311, 437, 312, 0, 313, 314, 315, 316, 317, 438,
	318, 319, 0, 320, 321, 322, 323, 324, 0, 326,
	327, 325, 328, 329, 330, 331, 0, 332, 0, 0,
	333, 334, 335, 439, 336, 0, 340, 341, 342, 343,
	344, 345, 346, 0, 348, 349, 440, 441, 442, 443,
	347, 350, 351, 0, 352, 337, 338, 353, 0, 354,
	444, 445, 355, 0, 363, 356, 357, 358, 339, 359,
	362, 446, 360, 0, 361, 447, 0, 364, 365, 0,
	366, 367, 368, 369, 370, 371, 372, 373, 0, 448,
	449, 450, 0, 0, 374, 375, 451, 452, 0, 376,
	377, 378, 379, 0, 0, 380, 381, 382, 383, 0,
	384, 0, 453, 385, 386, 387, 454, 455, 0, 1049,
	388, 208, 0, 0, 0, 0, 389, 390, 0, 391,
	392, 393, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 394, 0, 0,
	0, 0, 216, 217, 218, 395, 396, 397, 398, 219,
	399, 400, 0, 220, 401, 402, 221, 222, 223, 0,
	0, 403, 404, 405, 0, 224, 406, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 0, 237, 238, 239,
	0, 0, 0, 0, 0, 0, 0, 240, 241, 464,
	242, 407, 243, 408, 409, 0, 244, 0, 245, 0,
	246, 0, 0, 247, 248, 0, 249, 0, 0, 0,
	410, 250, 251, 253, 254, 252, 255, 411, 412, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 413, 414,
	415, 0, 258, 0, 259, 0, 0, 0, 260, 0,
	261, 416, 0, 417, 0, 262, 263, 264, 265, 266,
	267, 1048, 419, 0, 0, 420, 0, 0, 0, 271,
	0, 268, 0, 0, 269, 421, 270, 422, 423, 424,
	425, 426, 0, 427, 0, 272, 0, 273, 274, 275,
	0, 428, 429, 0, 0, 276, 277, 278, 0, 280,
	279, 0, 430, 0, 281, 282, 0, 0, 283, 284,
	0, 0, 285, 0, 286, 0, 0, 287, 288, 290,
	431, 289, 0, 291, 292, 294, 293, 0, 0, 0,
	432, 295, 433, 296, 297, 0, 298, 0, 0, 299,
	300, 0, 0, 301, 434, 0, 302, 0, 435, 303,
	304, 305, 306, 307, 308, 309, 0, 310, 436, 311,
	437, 312, 0, 313, 314, 315, 316, 317, 438, 318,
	319, 0, 320, 321, 322, 323, 324, 0, 326, 327,
	325, 328, 329, 330, 331, 0, 332, 0, 0, 333,
	334, 335, 439, 336, 0, 340, 341, 342, 343, 344,
	345, 346, 0, 348, 349, 440, 441, 442, 443, 347,
	350, 351, 0, 352, 337, 338, 353, 0, 354, 444,
	445, 355, 0, 363, 356, 357, 358, 339, 359, 362,
	446, 360, 0, 361, 447, 0, 364, 365, 0, 366,
	367, 368, 369, 370, 371, 372, 373, 0, 448, 449,
	450, 0, 0, 374, 375, 451, 452, 0, 376, 377,
	378, 379, 0, 0, 380, 381, 382, 383, 0, 384,
	0, 453, 385, 386, 387, 454, 455, 0, 1043, 388,
	208, 0, 0, 0, 0, 389, 390, 0, 391, 392,
	393, 0, 0, 0, 0, 0, 211, 212, 213, 214,
	0, 215, 0, 0, 0, 0, 394, 0, 0, 0,
	0, 216, 217, 218, 395, 396, 397, 398, 219, 399,
	400, 0, 220, 401, 402, 221, 222, 223, 0, 0,
	403, 404, 405, 0, 224, 406, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 239, 0,
	0, 0, 0, 0, 0, 0, 240, 241, 464, 242,
	407, 243, 408, 409, 0, 244, 0, 245, 0, 246,
	0, 0, 247, 248, 0, 249, 0, 0, 0, 410,
	250, 251, 253, 254, 252, 255, 411, 412, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 413, 414, 415,
	0, 258, 0, 259, 0, 0, 0, 260, 0, 261,
	416, 0, 417, 0, 262, 263, 264, 265, 266, 267,
	418, 419, 0, 0, 420, 0, 0, 0, 271, 0,
	268, 0, 0, 269, 421, 270, 422, 423, 424, 425,
	426, 0, 427, 0, 272, 0, 273, 274, 275, 0,
	428, 429, 0, 0, 276, 277, 278, 0, 280, 279,
	0, 430, 0, 281, 282, 0, 0, 283, 284, 0,
	0, 285, 0, 286, 0, 0, 287, 288, 290, 431,
	289, 0, 291, 292, 294, 293, 0, 0, 0, 432,
	295, 433, 296, 297, 0, 298, 0, 0, 299, 300,
	0, 0, 301, 434, 0, 302, 0, 435, 303, 304,
	305, 306, 307, 308, 309, 0, 310, 436, 311, 437,
	312, 0, 313, 314, 315, 316, 317, 438, 318, 319,
	0, 320, 321, 322, 323, 324, 0, 326, 327, 325,
	328, 329, 330, 331, 0, 332, 0, 0, 333, 334,
	335, 439, 336, 0, 340, 341, 342, 343, 344, 345,
	346, 0, 348, 349, 440, 441, 442, 443, 347, 350,
	351, 0, 352, 337, 338, 353, 0, 354, 444, 445,
	355, 0, 363, 356, 357, 358, 339, 359, 362, 446,
	360, 0, 361, 447, 0, 364, 365, 0, 366, 367,
	368, 369, 370, 371, 372, 373, 0, 448, 449, 450,
	0, 0, 374, 375, 451, 452, 0, 376, 377, 378,
	379, 0, 0, 380, 381, 382, 383, 0, 384, 0,
	453, 385, 386, 387, 454, 455, 0, 1034, 388, 208,
	0, 0, 0, 0, 389, 390, 0, 391, 392, 393,
	0, 0, 0, 0, 0, 211, 212, 213, 214, 0,
	215, 0, 0, 0, 0, 394, 0, 0, 0, 0,
	216, 217, 218, 395, 396, 397, 398, 219, 399, 400,
	0, 220, 401, 402, 221, 222, 223, 0, 0, 403,
	404, 405, 0, 224, 406, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 0, 237, 238, 239, 0, 0,
	0, 0, 0, 0, 0, 240, 241, 464, 242, 407,
	243, 408, 409, 0, 244, 0, 245, 0, 246, 0,
	0, 247, 248, 0, 249, 0, 0, 0, 410, 250,
	251, 253, 254, 252, 255, 411, 412, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 413, 414, 415, 0,
	258, 0, 259, 0, 0, 0, 260, 0, 261, 416,
	0, 417, 0, 262, 263, 264, 265, 266, 267, 1033,
	419, 0, 0, 420, 0, 0, 0, 271, 0, 268,
	0, 0, 269, 421, 270, 422, 423, 424, 425, 426,
	0, 427, 0, 272, 0, 273, 274, 275, 0, 428,
	429, 0, 0, 276, 277, 278, 0, 280, 279, 0,
	430, 0, 281, 282, 0, 0, 283, 284, 0, 0,
	285, 0, 286, 0, 0, 287, 288, 290, 431, 289,
	0, 291, 292, 294, 293, 0, 0, 0, 432, 295,
	433, 296, 297, 0, 298, 0, 0, 299, 300, 0,
	0, 301, 434, 0, 302, 0, 435, 303, 304, 305,
	306, 307, 308, 309, 0, 310, 436, 311, 437, 312,
	0, 313, 314, 315, 316, 317, 438, 318, 319, 0,
	320, 321, 322, 323, 324, 0, 326, 327, 325, 328,
	329, 330, 331, 0, 332, 0, 0, 333, 334, 335,
	439, 336, 0, 340, 341, 342, 343, 344, 345, 346,
	0, 348, 349, 440, 441, 442, 443, 347, 350, 351,
	0, 352, 337, 338, 353, 0, 354, 444, 445, 355,
	0, 363, 356, 357, 358, 339, 359, 362, 446, 360,
	0, 361, 447, 0, 364, 365, 0, 366, 367, 368,
	369, 370, 371, 372, 373, 0, 448, 449, 450, 0,
	0, 374, 375, 451, 452, 0, 376, 377, 378, 379,
	0, 0, 380, 381, 382, 383, 0, 384, 0, 453,
	385, 386, 387, 454, 455, 0, 1030, 388, 208, 0,
	0, 0, 0, 389, 390, 0, 391, 392, 393, 0,
	0, 0, 0, 0, 211, 212, 213, 214, 0, 215,
	0, 0, 0, 0, 394, 0, 0, 0, 0, 216,
	217, 218, 395, 396, 397, 398, 219, 399, 400, 0,
	220, 401, 402, 221, 222, 223, 0, 0, 403, 404,
	405, 0, 224, 406, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 0, 237, 238, 239, 0, 0, 0,
	0, 0, 0, 0, 240, 241, 464, 242, 407, 243,
	408, 409, 0, 244, 0, 245, 0, 246, 0, 0,
	247, 248, 0, 249, 0, 0, 0, 410, 250, 251,
	253, 254, 252, 255, 411, 412, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 413, 414, 415, 0, 258,
	0, 259, 0, 0, 0, 260, 0, 261, 416, 0,
	417, 0, 262, 263, 264, 265, 266, 267, 418, 419,
	0, 0, 420, 0, 0, 0, 271, 0, 268, 0,
	0, 269, 421, 270, 422, 423, 424, 425, 426, 0,
	427, 0, 272, 0, 273, 274, 275, 0, 428, 429,
	0, 0, 276, 277, 278, 0, 280, 279, 0, 430,
	0, 281, 282, 0, 0, 283, 284, 0, 0, 285,
	0, 286, 0, 0, 287, 288, 290, 431, 289, 0,
	291, 292, 294, 293, 0, 0, 0, 432, 295, 433,
	296, 297, 0, 298, 0, 0, 299, 300, 0, 0,
	301, 434, 0, 302, 0, 435, 303, 304, 305, 306,
	307, 308, 309, 0, 310, 436, 311, 437, 312, 0,
	313, 314, 315, 316, 317, 438, 318, 319, 0, 320,
	321, 322, 323, 324, 0, 326, 327, 325, 328, 329,
	330, 331, 0, 332, 0, 0, 333, 334, 335, 439,
	336, 0, 340, 341, 342, 343, 344, 345, 346, 0,
	348, 349, 440, 441, 442, 443, 347, 350, 351, 0,
	352, 337, 338, 353, 0, 354, 444, 445, 355, 0,
	363, 356, 357, 358, 339, 359, 362, 446, 360, 0,
	361, 447, 0, 364, 365, 0, 366, 367, 368, 369,
	370, 371, 372, 373, 0, 448, 449, 450, 0, 0,
	374, 375, 451, 452, 0, 376, 377, 378, 379, 0,
	0, 380, 381, 382, 383, 0, 384, 0, 453, 385,
	386, 387, 454, 455, 0, 1026, 388, 208, 0, 0,
	0, 0, 389, 390, 0, 391, 392, 393, 0, 0,
	0, 0, 0, 211, 212, 213, 214, 0, 215, 0,
	0, 0, 0, 394, 0, 0, 0, 0, 216, 217,
	218, 395, 396, 397, 398, 219, 399, 400, 0, 220,
	401, 402, 221, 222, 223, 0, 0, 403, 404, 405,
	0, 224, 406, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 239, 0, 0, 0, 0,
	0, 0, 0, 240, 241, 464, 242, 407, 243, 408,
	409, 0, 244, 0, 245, 0, 246, 0, 0, 247,
	248, 0, 249, 0, 0, 0, 410, 250, 251, 253,
	254, 252, 255, 411, 412, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 413, 414, 415, 0, 258, 0,
	259, 0, 0, 0, 260, 0, 261, 416, 0, 417,
	0, 262, 263, 264, 265, 266, 267, 1028, 419, 0,
	0, 420, 0, 0, 0, 271, 0, 268, 0, 0,
	269, 421, 270, 422, 423, 424, 425, 426, 0, 427,
	0, 272, 0, 273, 274, 275, 0, 428, 429, 0,
	0, 276, 277, 278, 0, 280, 279, 0, 430, 0,
	281, 282, 0, 0, 283, 284, 0, 0, 285, 0,
	286, 0, 0, 287, 288, 290, 431, 289, 0, 291,
	292, 294, 293, 0, 0, 0, 432, 295, 433, 296,
	297, 0, 298, 0, 0, 299, 300, 0, 0, 301,
	434, 0, 302, 0, 435, 303, 304, 305, 306, 307,
	308, 309, 0, 310, 436, 311, 437, 312, 0, 313,
	314, 315, 316, 317, 438, 318, 319, 0, 320, 321,
	322, 323, 324, 0, 326, 327, 325, 328, 329, 330,
	331, 0, 332, 0, 0, 333, 334, 335, 439, 336,
	0, 340, 341, 342, 343, 344, 345, 346, 0, 348,
	349, 440, 441, 442, 443, 347, 350, 351, 0, 352,
	337, 338, 353, 0, 354, 444, 445, 355, 0, 363,
	356, 357, 358, 339, 359, 362, 446, 360, 0, 361,
	447, 0, 364, 365, 0, 366, 367, 368, 369, 370,
	371, 372, 373, 0, 448, 449, 450, 0, 0, 374,
	375, 451, 452, 0, 376, 377, 378, 379, 0, 0,
	380, 381, 382, 383, 0, 384, 0, 453, 385, 386,
	387, 454, 455, 0, 913, 388, 208, 0, 0, 0,
	0, 389, 390, 0, 391, 392, 393, 0, 0, 0,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 394, 0, 0, 0, 0, 216, 217, 218,
	395, 396, 397, 398, 219, 399, 400, 0, 220, 401,
	402, 221, 222, 223, 0, 0, 403, 404, 405, 0,
	224, 406, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 239, 0, 0, 0, 0, 0,
	0, 0, 240, 241, 464, 242, 407, 243, 408, 409,
	0, 244, 0, 245, 0, 246, 0, 0, 247, 248,
	0, 249, 0, 0, 0, 410, 250, 251, 253, 254,
	252, 255, 411, 412, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 413, 414, 415, 0, 258, 0, 259,
	0, 0, 0, 260, 0, 261, 416, 0, 417, 0,
	262, 263, 264, 265, 266, 267, 915, 419, 0, 0,
	420, 0, 0, 0, 271, 0, 268, 0, 0, 269,
	421, 270, 422, 423, 424, 425, 426, 0, 427, 0,
	272, 0, 273, 274, 275, 0, 428, 429, 0, 0,
	276, 277, 278, 0, 280, 279, 0, 430, 0, 281,
	282, 0, 0, 283, 284, 0, 0, 285, 0, 286,
	0, 0, 287, 288, 290, 431, 289, 0, 291, 292,
	294, 293, 0, 0, 0, 432, 295, 433, 296, 297,
	0, 298, 0, 0, 299, 300, 0, 0, 301, 434,
	0, 302, 0, 435, 303, 304, 305, 306, 307, 308,
	309, 0, 310, 436, 311, 437, 312, 0, 313, 314,
	315, 316, 317, 438, 318, 319, 0, 320, 321, 322,
	323, 324, 0, 326, 327, 325, 328, 329, 330, 331,
	0, 332, 0, 0, 333, 334, 335, 439, 336, 0,
	340, 341, 342, 343, 344, 345, 346, 0, 348, 349,
	440, 441, 442, 443, 347, 350, 351, 0, 352, 337,
	338, 353, 0, 354, 444, 445, 355, 0, 363, 356,
	357, 358, 339, 359, 362, 446, 360, 0, 361, 447,
	0, 364, 365, 0, 366, 367, 368, 369, 370, 371,
	372, 373, 0, 448, 449, 450, 0, 0, 374, 375,
	451, 452, 0, 376, 377, 378, 379, 0, 0, 380,
	381, 382, 383, 0, 384, 0, 453, 385, 386, 387,
	454, 455, 0, 910, 388, 208, 0, 0, 0, 0,
	389, 390, 0, 391, 392, 393, 0, 0, 0, 0,
	0, 211, 212, 213, 214, 0, 215, 0, 0, 0,
	0, 394, 0, 0, 0, 0, 216, 217, 218, 395,
	396, 397, 398, 219, 399, 400, 0, 220, 401, 402,
	221, 222, 223, 0, 0, 403, 404, 405, 0, 224,
	406, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	0, 237, 238, 239, 0, 0, 0, 0, 0, 0,
	0, 240, 241, 464, 242, 407, 243, 408, 409, 0,
	244, 0, 245, 0, 246, 0, 0, 247, 248, 0,
	249, 0, 0, 0, 410, 250, 251, 253, 254, 252,
	255, 411, 412, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 413, 414, 415, 0, 258, 0, 259, 0,
	0, 0, 260, 0, 261, 416, 0, 417, 0, 262,
	263, 264, 265, 266, 267, 418, 419, 0, 0, 420,
	0, 0, 0, 271, 0, 268, 0, 0, 269, 421,
	270, 422, 423, 424, 425, 426, 0, 427, 0, 272,
	0, 273, 274, 275, 0, 428, 429, 0, 0, 276,
	277, 278, 0, 280, 279, 0, 430, 0, 281, 282,
	0, 0, 283, 284, 0, 0, 285, 0, 286, 0,
	0, 287, 288, 290, 431, 289, 0, 291, 292, 294,
	293, 0, 0, 0, 432, 295, 433, 296, 297, 0,
	298, 0, 0, 299, 300, 0, 0, 301, 434, 0,
	302, 0, 435, 303, 304, 305, 306, 307, 308, 309,
	0, 310, 436, 311, 437, 312, 0, 313, 314, 315,
	316, 317, 438, 318, 319, 0, 320, 321, 322, 323,
	324, 0, 326, 327, 325, 328, 329, 330, 331, 0,
	332, 0, 0, 333, 334, 335, 439, 336, 0, 340,
	341, 342, 343, 344, 345, 346, 0, 348, 349, 440,
	441, 442, 443, 347, 350, 351, 0, 352, 337, 338,
	353, 0, 354, 444, 445, 355, 0, 363, 356, 357,
	358, 339, 359, 362, 446, 360, 0, 361, 447, 0,
	364, 365, 0, 366, 367, 368, 369, 370, 371, 372,
	373, 0, 448, 449, 450, 0, 0, 374, 375, 451,
	452, 0, 376, 377, 378, 379, 0, 0, 380, 381,
	382, 383, 0, 384, 0, 453, 385, 386, 387, 454,
	455, 0, 590, 388, 208, 0, 0, 0, 0, 389,
	390, 0, 391, 392, 393, 0, 0, 0, 0, 0,
	211, 212, 213, 214, 0, 215, 0, 0, 0, 0,
	394, 0, 0, 0, 0, 216, 217, 218, 395, 396,
	397, 398, 219, 399, 400, 0, 220, 401, 402, 221,
	222, 223, 0, 0, 403, 404, 405, 0, 580, 406,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 0,
	237, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	240, 241, 464, 242, 407, 243, 408, 409, 0, 244,
	0, 245, 0, 246, 0, 0, 247, 248, 0, 249,
	0, 0, 0, 410, 250, 251, 253, 254, 252, 255,
	411, 412, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 413, 414, 415, 0, 258, 0, 259, 0, 0,
	0, 260, 0, 261, 416, 0, 417, 0, 262, 263,
	264, 265, 266, 267, 418, 419, 0, 0, 420, 0,
	0, 0, 271, 0, 268, 0, 0, 269, 421, 270,
	422, 423, 424, 425, 426, 0, 427, 0, 272, 0,
	273, 274, 275, 0, 428, 429, 0, 0, 276, 277,
	278, 0, 280, 279, 0, 430, 0, 281, 282, 0,
	0, 283, 579, 0, 0, 285, 0, 286, 0, 0,
	287, 288, 290, 431, 591, 0, 291, 292, 294, 293,
	0, 0, 0, 432, 295, 433, 296, 297, 0, 298,
	0, 0, 299, 300, 0, 0, 301, 434, 0, 302,
	0, 435, 303, 304, 305, 306, 307, 308, 309, 0,
	310, 436, 311, 437, 312, 0, 313, 314, 315, 316,
	317, 438, 318, 319, 0, 320, 321, 322, 323, 324,
	0, 326, 327, 325, 328, 329, 330, 331, 0, 332,
	0, 0, 333, 334, 335, 581, 336, 0, 340, 341,
	587, 343, 344, 345, 346, 0, 348, 349, 440, 441,
	442, 443, 347, 582, 351, 0, 352, 337, 338, 353,
	0, 354, 444, 445, 355, 0, 363, 356, 357, 358,
	339, 359, 362, 446, 360, 0, 361, 447, 0, 364,
	365, 0, 366, 367, 368, 369, 370, 371, 372, 373,
	0, 586, 449, 450, 0, 0, 374, 584, 451, 452,
	0, 376, 377, 378, 379, 0, 0, 380, 381, 382,
	383, 0, 384, 0, 453, 385, 386, 387, 454, 455,
	0, 570, 388, 208, 0, 0, 0, 0, 389, 390,
	0, 391, 392, 393, 0, 0, 0, 0, 0, 211,
	212, 213, 214, 0, 215, 0, 0, 0, 0, 394,
	0, 0, 0, 0, 216, 217, 218, 395, 396, 397,
	398, 219, 399, 400, 0, 220, 401, 402, 221, 222,
	223, 0, 0, 403, 404, 405, 0, 224, 406, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 239, 0, 0, 0, 0, 0, 0, 0, 240,
	241, 464, 242, 407, 243, 408, 409, 0, 244, 0,
	245, 0, 246, 0, 0, 247, 248, 0, 249, 0,
	0, 0, 410, 250, 251, 253, 254, 252, 255, 411,
	412, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	413, 414, 415, 0, 258, 0, 259, 0, 0, 0,
	260, 0, 261, 416, 0, 417, 0, 262, 263, 264,
	265, 266, 267, 418, 419, 0, 0, 420, 0, 0,
	0, 271, 0, 268, 0, 0, 269, 421, 270, 422,
	423, 424, 425, 426, 0, 427, 0, 272, 0, 273,
	274, 275, 0, 428, 429, 0, 0, 276, 277, 278,
	0, 280, 279, 0, 430, 0, 281, 282, 0, 0,
	283, 284, 0, 0, 285, 0, 286, 0, 0, 287,
	288, 290, 431, 289, 0, 291, 292, 294, 293, 0,
	0, 0, 432, 295, 433, 296, 297, 0, 298, 0,
	0, 299, 300, 0, 0, 301, 434, 0, 302, 0,
	435, 303, 304, 305, 306, 307, 308, 309, 0, 310,
	436, 311, 437, 312, 0, 313, 314, 315, 316, 317,
	438, 318, 319, 0, 320, 321, 322, 323, 324, 0,
	326, 327, 325, 328, 329, 330, 331, 0, 332, 0,
	0, 333, 334, 335, 439, 336, 0, 571, 341, 342,
	343, 344, 345, 346, 0, 348, 349, 440, 441, 442,
	443, 347, 350, 351, 0, 352, 337, 338, 353, 0,
	354, 444, 445, 355, 0, 363, 356, 357, 358, 339,
	359, 362, 446, 360, 0, 361, 447, 0, 364, 365,
	0, 366, 367, 368, 369, 370, 371, 372, 373, 0,
	448, 449, 450, 0, 0, 374, 375, 451, 452, 0,
	376, 377, 378, 379, 0, 0, 380, 381, 382, 383,
	0, 384, 0, 453, 385, 386, 387, 454, 455, 0,
	566, 388, 208, 0, 0, 0, 0, 389, 390, 0,
	391, 392, 393, 0, 0, 0, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 394, 0,
	0, 0, 0, 216, 217, 218, 395, 396, 397, 398,
	219, 399, 400, 0, 220, 401, 402, 221, 222, 223,
	0, 0, 403, 404, 405, 0, 224, 406, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	239, 0, 0, 0, 0, 0, 0, 0, 240, 241,
	464, 242, 407, 243, 408, 409, 0, 244, 0, 245,
	0, 246, 0, 0, 247, 248, 0, 249, 0, 0,
	0, 410, 250, 251, 253, 254, 252, 255, 411, 412,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 413,
	414, 415, 0, 258, 0, 259, 0, 0, 0, 260,
	0, 261, 416, 0, 417, 0, 262, 263, 264, 265,
	266, 267, 418, 419, 0, 0, 420, 0, 0, 0,
	271, 0, 268, 0, 0, 269, 421, 270, 422, 423,
	424, 425, 426, 0, 427, 0, 272, 0, 273, 274,
	275, 0, 428, 429, 0, 0, 276, 277, 278, 0,
	280, 279, 0, 430, 0, 281, 282, 0, 0, 283,
	284, 0, 0, 285, 0, 286, 0, 0, 287, 288,
	290, 431, 289, 0, 291, 292, 294, 293, 0, 0,
	0, 432, 295, 433, 296, 297, 0, 298, 0, 0,
	299, 300, 0, 0, 301, 434, 0, 302, 0, 435,
	303, 304, 305, 306, 307, 308, 309, 0, 310, 436,
	311, 437, 312, 0, 313, 314, 315, 316, 317, 438,
	318, 319, 0, 320, 321, 322, 323, 324, 0, 326,
	327, 325, 328, 329, 330, 331, 0, 332, 0, 0,
	333, 334, 335, 439, 336, 0, 340, 341, 342, 343,
	344, 345, 346, 0, 348, 349, 440, 441, 442, 443,
	347, 350, 351, 0, 352, 337, 338, 353, 0, 354,
	444, 445, 355, 0, 363, 356, 357, 358, 339, 359,
	362, 446, 360, 0, 361, 447, 0, 364, 365, 0,
	366, 367, 368, 369, 370, 371, 372, 373, 0, 448,
	449, 450, 0, 0, 374, 375, 451, 452, 0, 376,
	377, 378, 379, 0, 0, 380, 381, 382, 383, 0,
	384, 0, 453, 385, 386, 387, 454, 455, 0, 556,
	388, 208, 0, 0, 0, 0, 389, 390, 0, 391,
	392, 393, 0, 0, 0, 0, 0, 211, 212, 213,
	214, 0, 215, 0, 0, 0, 0, 394, 0, 0,
	0, 0, 216, 217, 218, 395, 396, 397, 398, 219,
	399, 400, 0, 220, 401, 402, 221, 222, 223, 0,
	0, 403, 404, 405, 0, 224, 406, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 0, 237, 238, 239,
	0, 0, 0, 0, 0, 0, 0, 240, 241, 464,
	242, 407, 243, 408, 409, 0, 244, 0, 245, 0,
	246, 0, 0, 247, 248, 0, 249, 0, 0, 0,
	410, 250, 251, 253, 254, 252, 255, 411, 412, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 413, 414,
	415, 0, 258, 0, 259, 0, 0, 0, 260, 0,
	261, 416, 0, 417, 0, 262, 263, 264, 265, 266,
	267, 418, 419, 0, 0, 420, 0, 0, 0, 271,
	0, 268, 0, 0, 269, 421, 270, 422, 423, 424,
	425, 426, 0, 427, 0, 272, 0, 273, 274, 275,
	0, 428, 429, 0, 0, 276, 277, 278, 0, 280,
	279, 0, 430, 0, 281, 282, 0, 0, 283, 284,
	0, 0, 285, 0, 286, 0, 0, 287, 288, 290,
	431, 289, 0, 291, 292, 294, 293, 0, 0, 0,
	432, 295, 433, 296, 297, 0, 298, 0, 0, 299,
	300, 0, 0, 301, 434, 0, 302, 0, 435, 303,
	304, 305, 306, 307, 308, 309, 0, 310, 436, 311,
	437, 312, 0, 313, 314, 315, 316, 317, 438, 318,
	319, 0, 320, 321, 322, 323, 324, 0, 326, 327,
	325, 328, 329, 330, 331, 0, 332, 0, 0, 333,
	334, 335, 439, 336, 0, 340, 341, 342, 343, 344,
	345, 346, 0, 348, 349, 440, 441, 442, 443, 347,
	350, 351, 0, 352, 337, 338, 353, 0, 354, 444,
	445, 355, 0, 363, 356, 357, 358, 339, 359, 362,
	446, 360, 0, 361, 447, 0, 364, 365, 0, 366,
	367, 368, 369, 370, 371, 372, 373, 0, 448, 449,
	450, 0, 0, 374, 375, 451, 452, 0, 376, 377,
	378, 379, 0, 0, 380, 381, 382, 383, 0, 384,
	0, 453, 385, 386, 387, 454, 455, 0, 505, 388,
	208, 0, 0, 0, 0, 389, 390, 0, 391, 392,
	393, 0, 0, 0, 0, 0, 211, 212, 213, 214,
	0, 215, 0, 0, 0, 0, 394, 0, 0, 0,
	0, 216, 217, 218, 395, 396, 397, 398, 219, 399,
	400, 0, 220, 401, 402, 221, 222, 223, 0, 0,
	403, 404, 405, 0, 224, 406, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 239, 0,
	0, 0, 0, 0, 0, 0, 240, 241, 464, 242,
	407, 243, 408, 409, 0, 244, 0, 245, 0, 246,
	0, 0, 247, 248, 0, 249, 0, 0, 0, 410,
	250, 251, 253, 254, 252, 255, 411, 412, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 413, 414, 415,
	0, 258, 0, 259, 0, 0, 0, 260, 0, 261,
	416, 0, 417, 0, 262, 263, 264, 265, 266, 267,
	418, 419, 0, 0, 420, 0, 0, 0, 271, 0,
	268, 0, 0, 269, 421, 270, 422, 423, 424, 425,
	426, 0, 427, 0, 272, 0, 273, 274, 275, 0,
	428, 429, 0, 0, 276, 277, 278, 0, 280, 279,
	0, 430, 0, 281, 282, 0, 0, 283, 284, 0,
	0, 285, 0, 286, 0, 0, 287, 288, 290, 431,
	289, 0, 291, 292, 294, 293, 0, 0, 0, 432,
	295, 433, 296, 297, 0, 298, 0, 0, 299, 300,
	0, 0, 301, 434, 0, 302, 0, 435, 303, 304,
	305, 306, 307, 308, 309, 0, 310, 436, 311, 437,
	312, 0, 313, 314, 315, 316, 317, 438, 318, 319,
	0, 320, 321, 322, 323, 324, 0, 326, 327, 325,
	328, 329, 330, 331, 0, 332, 0, 0, 333, 334,
	335, 439, 336, 0, 340, 341, 342, 343, 344, 345,
	346, 0, 348, 349, 440, 441, 442, 443, 347, 350,
	351, 0, 352, 337, 338, 353, 0, 354, 444, 445,
	355, 0, 363, 356, 357, 358, 339, 359, 362, 446,
	360, 0, 361, 447, 0, 364, 365, 0, 366, 367,
	368, 369, 370, 371, 372, 373, 0, 448, 449, 450,
	0, 0, 374, 375, 451, 452, 0, 376, 377, 378,
	379, 0, 0, 380, 381, 382, 383, 0, 384, 0,
	453, 385, 386, 387, 454, 455, 208, 0, 388, 0,
	0, 0, 0, 0, 389, 390, 0, 391, 392, 393,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 394, 0, 0, 0, 0, 216, 217, 218,
	395, 396, 397, 398, 219, 399, 400, 0, 220, 401,
	402, 221, 222, 223, 0, 0, 403, 404, 405, 0,
	224, 406, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 239, 0, 0, 0, 0, 0,
	0, 0, 240, 241, 464, 242, 407, 243, 408, 409,
	0, 244, 0, 245, 0, 246, 0, 0, 247, 248,
	0, 249, 0, 0, 0, 410, 250, 251, 253, 254,
	252, 255, 411, 412, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 413, 414, 415, 0, 258, 0, 259,
	0, 0, 0, 260, 0, 261, 416, 0, 417, 0,
	262, 263, 264, 265, 266, 267, 418, 419, 0, 0,
	420, 0, 0, 0, 271, 0, 268, 0, 0, 269,
	421, 270, 422, 423, 424, 425, 426, 0, 427, 0,
	272, 0, 273, 274, 275, 0, 428, 429, 0, 0,
	276, 277, 278, 0, 280, 279, 0, 430, 0, 281,
	282, 0, 0, 283, 284, 0, 0, 285, 0, 286,
	0, 0, 287, 288, 290, 431, 289, 0, 291, 292,
	294, 293, 0, 0, 0, 432, 295, 433, 296, 297,
	0, 298, 0, 0, 299, 300, 0, 0, 301, 434,
	0, 302, 0, 435, 303, 304, 305, 306, 307, 308,
	309, 0, 310, 436, 311, 437, 312, 0, 313, 314,
	315, 316, 317, 438, 318, 319, 0, 320, 321, 322,
	323, 324, 0, 326, 327, 325, 328, 329, 330, 331,
	0, 332, 0, 0, 333, 334, 335, 439, 336, 0,
	340, 341, 342, 343, 344, 345, 346, 0, 348, 349,
	440, 441, 442, 443, 347, 350, 351, 0, 352, 337,
	338, 353, 0, 354, 444, 445, 355, 0, 363, 356,
	357, 358, 339, 359, 362, 446, 360, 0, 361, 447,
	0, 364, 365, 0, 366, 367, 368, 369, 370, 371,
	372, 373, 0, 448, 449, 450, 0, 0, 374, 375,
	451, 452, 0, 376, 377, 378, 379, 0, 0, 380,
	381, 382, 383, 0, 384, 0, 453, 385, 386, 387,
	454, 455, 208, 0, 388, 0, 0, 0, 0, 0,
	389, 390, 0, 391, 392, 393, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 394, 0,
	0, 0, 0, 216, 217, 218, 395, 396, 397, 398,
	219, 399, 400, 0, 220, 401, 402, 221, 222, 223,
	0, 0, 403, 404, 405, 0, 224, 406, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	239, 0, 0, 0, 0, 0, 0, 0, 240, 241,
	464, 242, 407, 243, 408, 409, 0, 244, 0, 245,
	0, 246, 0, 0, 247, 248, 0, 249, 0, 0,
	0, 410, 250, 251, 253, 254, 252, 255, 411, 412,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 413,
	414, 415, 0, 258, 0, 259, 0, 0, 0, 260,
	0, 261, 416, 0, 417, 0, 262, 263, 264, 265,
	266, 267, 2233, 419, 0, 0, 420, 0, 0, 0,
	271, 0, 268, 0, 0, 269, 421, 270, 422, 423,
	424, 425, 426, 0, 427, 0, 272, 0, 273, 274,
	275, 0, 428, 429, 0, 0, 276, 277, 278, 0,
	280, 279, 0, 430, 0, 281, 282, 0, 0, 283,
	284, 0, 0, 285, 0, 286, 0, 0, 287, 288,
	290, 431, 289, 0, 291, 292, 294, 293, 0, 0,
	0, 432, 295, 433, 296, 297, 0, 298, 0, 0,
	299, 300, 0, 0, 301, 434, 0, 302, 0, 435,
	303, 304, 305, 306, 307, 308, 309, 0, 310, 436,
	311, 437, 312, 0, 313, 314, 315, 316, 317, 438,
	318, 319, 0, 320, 321, 322, 323, 324, 0, 326,
	327, 325, 328, 329, 330, 331, 0, 332, 0, 0,
	333, 334, 335, 439, 336, 0, 340, 341, 342, 343,
	344, 345, 346, 0, 348, 349, 440, 441, 442, 443,
	347, 350, 351, 0, 352, 337, 338, 353, 0, 354,
	444, 445, 355, 0, 363, 356, 357, 358, 339, 359,
	362, 446, 360, 0, 361, 447, 0, 364, 365, 0,
	366, 367, 368, 369, 370, 371, 372, 373, 0, 448,
	449, 450, 0, 0, 374, 375, 451, 452, 0, 376,
	377, 378, 379, 0, 0, 380, 381, 382, 383, 0,
	384, 0, 453, 385, 386, 387, 454, 455, 208, 0,
	388, 0, 0, 0, 0, 0, 389, 390, 0, 391,
	392, 393, 0, 0, 211, 212, 213, 214, 0, 215,
	0, 0, 0, 0, 394, 0, 0, 0, 0, 216,
	217, 218, 395, 396, 397, 398, 219, 399, 400, 0,
	220, 401, 402, 221, 222, 223, 0, 0, 403, 404,
	405, 0, 224, 406, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 0, 237, 238, 239, 0, 0, 0,
	0, 0, 0, 0, 240, 241, 464, 242, 407, 243,
	408, 409, 0, 244, 0, 245, 0, 246, 0, 0,
	247, 248, 0, 249, 0, 0, 0, 410, 250, 251,
	253, 254, 252, 255, 411, 412, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 413, 414, 415, 0, 258,
	0, 259, 0, 0, 0, 260, 0, 261, 416, 0,
	417, 0, 262, 263, 264, 265, 266, 267, 2231, 419,
	0, 0, 420, 0, 0, 0, 271, 0, 268, 0,
	0, 269, 421, 270, 422, 423, 424, 425, 426, 0,
	427, 0, 272, 0, 273, 274, 275, 0, 428, 429,
	0, 0, 276, 277, 278, 0, 280, 279, 0, 430,
	0, 281, 282, 0, 0, 283, 284, 0, 0, 285,
	0, 286, 0, 0, 287, 288, 290, 431, 289, 0,
	291, 292, 294, 293, 0, 0, 0, 432, 295, 433,
	296, 297, 0, 298, 0, 0, 299, 300, 0, 0,
	301, 434, 0, 302, 0, 435, 303, 304, 305, 306,
	307, 308, 309, 0, 310, 436, 311, 437, 312, 0,
	313, 314, 315, 316, 317, 438, 318, 319, 0, 320,
	321, 322, 323, 324, 0, 326, 327, 325, 328, 329,
	330, 331, 0, 332, 0, 0, 333, 334, 335, 439,
	336, 0, 340, 341, 342, 343, 344, 345, 346, 0,
	348, 349, 440, 441, 442, 443, 347, 350, 351, 0,
	352, 337, 338, 353, 0, 354, 444, 445, 355, 0,
	363, 356, 357, 358, 339, 359, 362, 446, 360, 0,
	361, 447, 0, 364, 365, 0, 366, 367, 368, 369,
	370, 371, 372, 373, 0, 448, 449, 450, 0, 0,
	374, 375, 451, 452, 0, 376, 377, 378, 379, 0,
	0, 380, 381, 382, 383, 0, 384, 0, 453, 385,
	386, 387, 454, 455, 208, 0, 388, 0, 0, 0,
	0, 0, 389, 390, 0, 391, 392, 393, 0, 0,
	211, 212, 213, 214, 0, 215, 0, 0, 0, 0,
	394, 0, 0, 0, 0, 216, 217, 218, 395, 396,
	397, 398, 219, 399, 400, 0, 220, 401, 402, 221,
	222, 223, 0, 0, 403, 404, 405, 0, 224, 406,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 0,
	237, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	240, 241, 464, 242, 407, 243, 408, 409, 0, 244,
	0, 245, 0, 246, 0, 0, 247, 248, 0, 249,
	0, 0, 0, 410, 250, 251, 253, 254, 252, 255,
	411, 412, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 413, 414, 415, 0, 258, 0, 259, 0, 0,
	0, 260, 0, 261, 416, 0, 417, 0, 262, 263,
	264, 265, 266, 267, 2220, 419, 0, 0, 420, 0,
	0, 0, 271, 0, 268, 0, 0, 269, 421, 270,
	422, 423, 424, 425, 426, 0, 427, 0, 272, 0,
	273, 274, 275, 0, 428, 429, 0, 0, 276, 277,
	278, 0, 280, 279, 0, 430, 0, 281, 282, 0,
	0, 283, 284, 0, 0, 285, 0, 286, 0, 0,
	287, 288, 290, 431, 289, 0, 291, 292, 294, 293,
	0, 0, 0, 432, 295, 433, 296, 297, 0, 298,
	0, 0, 299, 300, 0, 0, 301, 434, 0, 302,
	0, 435, 303, 304, 305, 306, 307, 308, 309, 0,
	310, 436, 311, 437, 312, 0, 313, 314, 315, 316,
	317, 438, 318, 319, 0, 320, 321, 322, 323, 324,
	0, 326, 327, 325, 328, 329, 330, 331, 0, 332,
	0, 0, 333, 334, 335, 439, 336, 0, 340, 341,
	342, 343, 344, 345, 346, 0, 348, 349, 440, 441,
	442, 443, 347, 350, 351, 0, 352, 337, 338, 353,
	0, 354, 444, 445, 355, 0, 363, 356, 357, 358,
	339, 359, 362, 446, 360, 0, 361, 447, 0, 364,
	365, 0, 366, 367, 368, 369, 370, 371, 372, 373,
	0, 448, 449, 450, 0, 0, 374, 375, 451, 452,
	0, 376, 377, 378, 379, 0, 0, 380, 381, 382,
	383, 0, 384, 0, 453, 385, 386, 387, 454, 455,
	208, 0, 388, 0, 0, 0, 0, 0, 389, 390,
	0, 391, 392, 393, 0, 0, 211, 212, 213, 214,
	0, 215, 0, 0, 0, 0, 394, 0, 0, 0,
	0, 216, 217, 218, 395, 396, 397, 398, 219, 399,
	400, 0, 220, 401, 402, 221, 222, 223, 0, 0,
	403, 404, 405, 0, 224, 406, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 239, 0,
	0, 0, 0, 0, 0, 0, 240, 241, 464, 242,
	407, 243, 408, 409, 0, 244, 0, 245, 0, 246,
	0, 0, 247, 248, 0, 249, 0, 0, 0, 410,
	250, 251, 253, 254, 252, 255, 411, 412, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 413, 414, 415,
	0, 258, 0, 259, 0, 0, 0, 260, 0, 261,
	416, 0, 417, 0, 262, 263, 264, 265, 266, 267,
	418, 419, 0, 0, 420, 0, 0, 0, 271, 0,
	268, 0, 0, 269, 421, 270, 422, 423, 424, 425,
	426, 0, 427, 0, 272, 0, 273, 274, 275, 0,
	428, 429, 0, 0, 276, 277, 278, 0, 280, 279,
	0, 430, 0, 281, 282, 0, 0, 283, 284, 0,
	0, 285, 0, 286, 0, 0, 287, 288, 290, 431,
	289, 0, 291, 292, 294, 293, 0, 0, 0, 432,
	295, 433, 296, 297, 0, 298, 0, 0, 299, 300,
	0, 0, 301, 434, 0, 302, 0, 435, 303, 304,
	305, 306, 307, 308, 309, 0, 310, 436, 311, 437,
	312, 0, 313, 314, 315, 316, 317, 438, 318, 319,
	0, 320, 321, 322, 323, 324, 0, 326, 327, 325,
	328, 329, 330, 331, 0, 332, 0, 0, 333, 334,
	335, 439, 336, 0, 571, 341, 342, 343, 344, 345,
	346, 0, 348, 349, 440, 441, 442, 443, 347, 350,
	351, 0, 352, 337, 338, 353, 0, 354, 444, 445,
	355, 0, 363, 356, 357, 358, 339, 359, 362, 446,
	360, 0, 361, 447, 0, 364, 365, 0, 366, 367,
	368, 369, 370, 371, 372, 373, 0, 448, 449, 450,
	0, 0, 374, 375, 451, 452, 0, 376, 377, 378,
	379, 0, 0, 380, 381, 382, 383, 0, 384, 0,
	453, 385, 386, 387, 454, 455, 208, 0, 388, 0,
	0, 0, 0, 0, 389, 390, 0, 391, 392, 393,
	0, 0, 211, 212, 213, 214, 0, 215, 0, 0,
	0, 0, 394, 0, 1472, 0, 0, 216, 217, 218,
	395, 396, 397, 398, 219, 399, 400, 0, 220, 401,
	402, 221, 222, 223, 0, 0, 403, 404, 405, 0,
	224, 406, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 239, 0, 0, 0, 0, 0,
	0, 0, 240, 241, 464, 242, 407, 243, 408, 409,
	0, 244, 0, 245, 0, 246, 0, 0, 247, 248,
	0, 249, 0, 0, 0, 410, 250, 251, 253, 254,
	252, 255, 411, 412, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 413, 414, 415, 0, 258, 0, 259,
	0, 0, 0, 260, 0, 261, 416, 0, 417, 0,
	262, 263, 264, 265, 266, 267, 418, 419, 0, 0,
	420, 0, 0, 0, 271, 0, 268, 0, 0, 269,
	421, 270, 422, 423, 424, 425, 426, 0, 427, 0,
	272, 0, 273, 274, 275, 0, 428, 429, 0, 0,
	276, 277, 278, 0, 280, 279, 0, 430, 0, 281,
	282, 0, 0, 283, 284, 0, 0, 285, 0, 286,
	0, 0, 287, 288, 290, 431, 289, 0, 291, 292,
	294, 293, 0, 0, 0, 432, 295, 433, 296, 297,
	0, 298, 0, 0, 299, 300, 0, 0, 301, 434,
	0, 302, 0, 435, 303, 304, 305, 306, 307, 308,
	309, 0, 310, 436, 311, 437, 312, 0, 313, 314,
	315, 316, 317, 438, 318, 319, 0, 320, 321, 322,
	323, 324, 0, 326, 327, 325, 328, 329, 330, 331,
	0, 332, 0, 0, 333, 334, 335, 439, 336, 0,
	340, 341, 342, 343, 344, 345, 346, 0, 348, 349,
	440, 441, 442, 443, 347, 350, 351, 0, 0, 337,
	338, 353, 0, 354, 444, 445, 355, 0, 363, 356,
	357, 358, 339, 359, 362, 446, 360, 0, 361, 447,
	0, 364, 365, 0, 366, 367, 368, 369, 370, 371,
	372, 373, 0, 448, 449, 450, 0, 0, 374, 375,
	451, 452, 0, 376, 377, 378, 379, 0, 0, 380,
	381, 382, 383, 0, 384, 0, 453, 385, 386, 387,
	454, 455, 208, 0, 388, 0, 0, 0, 0, 0,
	389, 390, 0, 391, 392, 393, 0, 0, 211, 212,
	213, 214, 0, 215, 0, 0, 0, 0, 394, 0,
	0, 0, 0, 216, 217, 218, 395, 396, 397, 398,
	219, 399, 400, 0, 220, 401, 402, 221, 222, 223,
	0, 0, 403, 404, 405, 0, 224, 406, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	239, 0, 0, 0, 0, 0, 0, 0, 240, 241,
	464, 242, 407, 243, 408, 409, 0, 244, 0, 245,
	0, 246, 0, 0, 247, 248, 0, 249, 0, 0,
	0, 410, 250, 251, 253, 254, 252, 255, 411, 412,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 413,
	414, 415, 0, 258, 0, 259, 0, 0, 0, 260,
	0, 261, 416, 0, 417, 0, 262, 263, 264, 265,
	266, 267, 1463, 419, 0, 0, 420, 0, 0, 0,
	271, 0, 268, 0, 0, 269, 421, 270, 422, 423,
	424, 425, 426, 0, 427, 0, 272, 0, 273, 274,
	275, 0, 428, 429, 0, 0, 276, 277, 278, 0,
	280, 279, 0, 430, 0, 281, 282, 0, 0, 283,
	284, 0, 0, 285, 0, 286, 0, 0, 287, 288,
	290, 431, 289, 0, 291, 292, 294, 293, 0, 0,
	0, 432, 295, 433, 296, 297, 0, 298, 0, 0,
	299, 300, 0, 0, 301, 434, 0, 302, 0, 435,
	303, 304, 305, 306, 307, 308, 309, 0, 310, 436,
	311, 437, 312, 0, 313, 314, 315, 316, 317, 438,
	318, 319, 0, 320, 321, 322, 323, 324, 0, 326,
	327, 325, 328, 329, 330, 331, 0, 332, 0, 0,
	333, 334, 335, 439, 336, 0, 340, 341, 342, 343,
	344, 345, 346, 0, 348, 349, 440, 441, 442, 443,
	347, 350, 351, 0, 352, 337, 338, 353, 0, 354,
	444, 445, 355, 0, 363, 356, 357, 358, 339, 359,
	362, 446, 360, 0, 361, 447, 0, 364, 365, 0,
	366, 367, 368, 369, 370, 371, 372, 373, 0, 448,
	449, 450, 0, 0, 374, 375, 451, 452, 0, 376,
	377, 378, 379, 0, 0, 380, 381, 382, 383, 0,
	384, 0, 453, 385, 386, 387, 454, 455, 208, 0,
	388, 0, 0, 0, 0, 0, 389, 390, 0, 391,
	392, 393, 0, 0, 211, 212, 213, 214, 0, 215,
	0, 0, 0, 0, 394, 0, 0, 0, 0, 216,
	217, 218, 395, 396, 397, 398, 219, 399, 400, 0,
	220, 401, 402, 221, 222, 223, 0, 0, 403, 404,
	405, 0, 224, 406, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 0, 237, 238, 239, 0, 0, 0,
	0, 0, 0, 0, 240, 241, 464, 242, 407, 243,
	408, 409, 0, 244, 0, 245, 0, 246, 0, 0,
	247, 248, 0, 249, 0, 0, 0, 410, 250, 251,
	253, 254, 252, 255, 411, 412, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 413, 414, 415, 0, 258,
	0, 259, 0, 0, 0, 260, 0, 261, 416, 0,
	417, 0, 262, 263, 264, 265, 266, 267, 418, 419,
	0, 0, 420, 0, 0, 0, 271, 0, 268, 0,
	0, 269, 421, 270, 422, 423, 424, 425, 426, 0,
	427, 0, 272, 0, 273, 274, 275, 0, 428, 429,
	0, 0, 276, 277, 278, 0, 280, 279, 0, 430,
	0, 281, 282, 0, 0, 283, 284, 0, 0, 285,
	0, 286, 0, 0, 287, 288, 290, 431, 289, 0,
	291, 292, 294, 293, 0, 0, 0, 432, 295, 433,
	296, 297, 0, 298, 0, 0, 299, 300, 0, 0,
	301, 434, 0, 302, 0, 435, 303, 304, 305, 306,
	307, 308, 309, 0, 310, 436, 311, 437, 312, 0,
	313, 314, 315, 316, 317, 438, 849, 319, 0, 320,
	321, 322, 323, 324, 0, 326, 327, 325, 328, 329,
	330, 331, 0, 332, 0, 0, 333, 334, 335, 439,
	336, 0, 340, 341, 342, 343, 344, 345, 346, 0,
	348, 349, 440, 441, 442, 443, 347, 350, 351, 0,
	352, 337, 338, 353, 0, 354, 444, 445, 355, 0,
	363, 356, 357, 358, 339, 359, 362, 446, 360, 0,
	361, 447, 0, 364, 365, 0, 366, 367, 368, 369,
	370, 371, 372, 373, 0, 448, 449, 450, 0, 0,
	374, 375, 451, 452, 0, 376, 377, 378, 379, 0,
	0, 380, 381, 382, 383, 0, 384, 0, 453, 385,
	386, 387, 454, 455, 208, 0, 388, 0, 0, 0,
	0, 0, 389, 390, 0, 391, 392, 393, 0, 0,
	211, 212, 213, 214, 0, 215, 0, 0, 0, 0,
	394, 0, 0, 0, 0, 216, 217, 218, 395, 396,
	397, 398, 219, 399, 400, 0, 220, 401, 402, 221,
	222, 223, 0, 0, 403, 404, 405, 0, 224, 406,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 0,
	237, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	240, 241, 464, 242, 407, 243, 408, 409, 0, 244,
	0, 245, 0, 246, 0, 0, 247, 248, 0, 249,
	0, 0, 0, 410, 250, 251, 253, 254, 252, 255,
	411, 412, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 413, 414, 415, 0, 258, 0, 259, 0, 0,
	0, 260, 0, 261, 416, 0, 417, 0, 262, 263,
	264, 265, 266, 267, 418, 419, 0, 0, 420, 0,
	0, 0, 271, 0, 268, 0, 0, 269, 421, 270,
	422, 423, 424, 425, 426, 0, 427, 0, 272, 0,
	273, 274, 275, 0, 428, 429, 0, 0, 276, 277,
	278, 0, 280, 279, 0, 430, 0, 281, 282, 0,
	0, 283, 284, 0, 0, 285, 0, 286, 0, 0,
	287, 288, 290, 431, 289, 0, 291, 292, 294, 293,
	0, 0, 0, 432, 295, 433, 296, 297, 0, 298,
	0, 0, 299, 300, 0, 0, 301, 434, 0, 302,
	0, 435, 303, 304, 305, 0, 307, 308, 309, 0,
	310, 436, 311, 437, 312, 0, 313, 314, 315, 0,
	317, 438, 318, 319, 0, 320, 321, 322, 323, 324,
	0, 326, 327, 325, 328, 329, 330, 331, 0, 332,
	0, 0, 333, 334, 335, 439, 0, 0, 340, 341,
	342, 343, 344, 345, 346, 0, 348, 349, 440, 441,
	442, 443, 347, 350, 351, 0, 352, 337, 338, 353,
	0, 354, 444, 445, 355, 0, 363, 356, 357, 358,
	339, 359, 362, 446, 360, 0, 361, 447, 0, 364,
	365, 0, 366, 367, 368, 369, 370, 371, 372, 373,
	0, 448, 449, 450, 0, 0, 374, 375, 451, 452,
	0, 376, 377, 378, 379, 0, 0, 380, 381, 382,
	383, 0, 384, 0, 453, 385, 386, 387, 454, 455,
	0, 0, 388, 0, 0, 0, 0, 0, 389, 390,
	0, 391, 392, 393, 1229, 1230, 0, 1262, 1263, 1264,
	1272, 1273, 1274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1265, 0, 0, 0, 0, 0, 0, 1232,
	0, 0, 1276, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1229, 1230, 0, 1262, 1263,
	1264, 1272, 1273, 1274, 1231, 0, 0, 0, 0, 0,
	0, 0, 1251, 1265, 0, 0, 0, 0, 0, 1248,
	1232, 0, 0, 1276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1231, 0, 0, 0, 0,
	0, 0, 0, 1251, 0, 0, 0, 0, 0, 0,
	1248, 0, 0, 0, 0, 0, 0, 0, 0, 1254,
	1255, 1256, 1257, 0, 0, 0, 0, 0, 1237, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1229,
	1230, 0, 1262, 1263, 1264, 1272, 1273, 1274, 0, 0,
	1269, 1277, 0, 1259, 1260, 1261, 0, 1265, 0, 0,
	1254, 1255, 1256, 1257, 1232, 0, 0, 1276, 0, 1237,
	0, 0, 0, 1275, 0, 0, 0, 0, 0, 0,
	1246, 1247, 0, 0, 0, 0, 0, 0, 0, 1231,
	0, 1269, 1277, 1267, 1259, 1260, 1261, 1251, 0, 0,
	1252, 0, 0, 0, 1248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1275, 0, 0, 0, 0, 0,
	0, 1246, 1247, 0, 0, 0, 0, 0, 1266, 0,
	0, 0, 0, 0, 1267, 0, 0, 0, 0, 0,
	0, 1252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1254, 1255, 1256, 1257, 0, 0,
	0, 0, 0, 1237, 1258, 0, 0, 0, 0, 1266,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1253, 0, 0, 0, 1269, 1277, 0, 1259, 1260,
	1261, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1270, 1258, 0, 0, 1275, 0,
	0, 0, 0, 0, 0, 1246, 1247, 0, 0, 0,
	0, 0, 1253, 0, 0, 0, 0, 0, 1267, 0,
	0, 0, 0, 0, 0, 1252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1268, 0,
	0, 1243, 1244, 1250, 1249, 1245, 1271, 0, 1242, 1240,
	1241, 1233, 1234, 1235, 1236, 1238, 1239, 0, 0, 1258,
	0, 0, 0, 0, 0, 2118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1253, 0, 0, 1268,
	0, 0, 1243, 1244, 1250, 1249, 1245, 1271, 0, 1242,
	1240, 1241, 1233, 1234, 1235, 1236, 1238, 1239, 0, 1270,
	0, 0, 0, 0, 1229, 1230, 2117, 1262, 1263, 1264,
	1272, 1273, 1274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1265, 0, 0, 0, 0, 0, 0, 1232,
	0, 0, 1276, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1231, 0, 0, 0, 0, 0,
	0, 0, 1251, 0, 0, 0, 0, 0, 0, 1248,
	0, 0, 0, 1268, 0, 0, 1243, 1244, 1250, 1249,
	1245, 1271, 0, 1242, 1240, 1241, 1233, 1234, 1235, 1236,
	1238, 1239, 0, 0, 0, 0, 0, 0, 1229, 1230,
	2116, 1262, 1263, 1264, 1272, 1273, 1274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1265, 0, 0, 1254,
	1255, 1256, 1257, 1232, 0, 0, 1276, 0, 1237, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1229,
	1230, 0, 1262, 1263, 1264, 1272, 1273, 1274, 1231, 0,
	1269, 1277, 0, 1259, 1260, 1261, 1251, 1265, 0, 0,
	0, 0, 0, 1248, 1232, 0, 0, 1276, 0, 0,
	0, 0, 0, 1275, 0, 0, 0, 0, 0, 0,
	1246, 1247, 0, 0, 0, 0, 0, 0, 0, 1231,
	0, 0, 0, 1267, 0, 0, 0, 1251, 0, 0,
	1252, 0, 0, 0, 1248, 0, 0, 0, 0, 0,
	0, 0, 0, 1254, 1255, 1256, 1257, 0, 0, 0,
	0, 0, 1237, 0, 0, 0, 0, 0, 1266, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1269, 1277, 0, 1259, 1260, 1261,
	0, 0, 0, 0, 1254, 1255, 1256, 1257, 0, 0,
	0, 0, 0, 1237, 1258, 0, 0, 1275, 0, 0,
	0, 0, 0, 0, 1246, 1247, 0, 0, 0, 0,
	0, 1253, 0, 0, 0, 1269, 1277, 1267, 1259, 1260,
	1261, 0, 0, 0, 1252, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1270, 0, 0, 0, 1275, 0,
	0, 0, 0, 0, 0, 1246, 1247, 0, 0, 0,
	0, 0, 1266, 0, 0, 0, 0, 0, 1267, 0,
	0, 0, 0, 0, 0, 1252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1258, 0,
	0, 0, 0, 1266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1253, 0, 0, 1268, 0,
	0, 1243, 1244, 1250, 1249, 1245, 1271, 0, 1242, 1240,
	1241, 1233, 1234, 1235, 1236, 1238, 1239, 0, 1270, 1258,
	0, 2895, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1270,
	0, 1229, 1230, 0, 1262, 1263, 1264, 1272, 1273, 1274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1265,
	0, 0, 0, 0, 0, 0, 1232, 0, 0, 1276,
	0, 0, 1268, 0, 0, 1243, 1244, 1250, 1249, 1245,
	1271, 0, 1242, 1240, 1241, 1233, 1234, 1235, 1236, 1238,
	1239, 1231, 0, 0, 0, 2835, 0, 0, 0, 1251,
	0, 0, 0, 0, 0, 0, 1248, 0, 0, 0,
	0, 0, 0, 1268, 0, 0, 1243, 1244, 1250, 1249,
	1245, 1271, 0, 1242, 1240, 1241, 1233, 1234, 1235, 1236,
	1238, 1239, 0, 0, 0, 0, 2784, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1254, 1255, 1256, 1257,
	0, 0, 0, 0, 0, 1237, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1229, 1230, 0, 1262, 1263,
	1264, 1272, 1273, 1274, 0, 0, 0, 1269, 1277, 0,
	1259, 1260, 1261, 1265, 0, 0, 0, 0, 0, 0,
	1232, 0, 0, 1276, 0, 0, 0, 0, 0, 0,
	1275, 0, 0, 0, 0, 0, 0, 1246, 1247, 0,
	0, 0, 0, 0, 0, 1231, 0, 0, 0, 0,
	1267, 0, 0, 1251, 0, 0, 0, 1252, 0, 0,
	1248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1254, 1255, 1256, 1257, 0, 0, 0, 0, 0, 1237,
	0, 1258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1253, 0,
	0, 1269, 1277, 0, 1259, 1260, 1261, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1270, 0, 0, 1275, 0, 0, 0, 0, 0,
	0, 1246, 1247, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1267, 0, 0, 0, 0, 0,
	0, 1252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1266,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1268, 0, 0, 1243, 1244,
	1250, 1249, 1245, 1271, 0, 1242, 1240, 1241, 1233, 1234,
	1235, 1236, 1238, 1239, 0, 1258, 0, 0, 2752, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1253, 1229, 1230, 0, 1262, 1263, 1264, 1272,
	1273, 1274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1265, 0, 0, 0, 1270, 0, 0, 1232, 0,
	0, 1276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1231, 0, 0, 0, 0, 0, 0,
	0, 1251, 0, 0, 0, 0, 0, 0, 1248, 0,
	0, 0, 0, 1229, 1230, 0, 1262, 1263, 1264, 1272,
	1273, 1274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1265, 0, 0, 0, 0, 0, 0, 1232, 1268,
	0, 1276, 1243, 1244, 1250, 1249, 1245, 1271, 0, 1242,
	1240, 1241, 1233, 1234, 1235, 1236, 1238, 1239, 1254, 1255,
	1256, 1257, 2746, 1231, 0, 0, 0, 1237, 0, 0,
	0, 1251, 0, 0, 0, 0, 0, 0, 1248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1269,
	1277, 0, 1259, 1260, 1261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1275, 0, 0, 0, 0, 0, 0, 1246,
	1247, 0, 0, 0, 0, 0, 0, 0, 1254, 1255,
	1256, 1257, 1267, 0, 0, 0, 0, 1237, 0, 1252,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1269,
	1277, 0, 1259, 1260, 1261, 0, 0, 1266, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1275, 0, 0, 0, 0, 0, 0, 1246,
	1247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1267, 1258, 0, 0, 0, 0, 0, 1252,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1253, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1266, 0, 0,
	0, 0, 0, 1270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1253, 1229, 1230, 0, 1262, 1263, 1264, 1272, 1273, 1274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1265,
	0, 0, 0, 1270, 0, 0, 1232, 1268, 0, 1276,
	1243, 1244, 1250, 1249, 1245, 1271, 0, 1242, 1240, 1241,
	1233, 1234, 1235, 1236, 1238, 1239, 0, 0, 0, 0,
	2740, 1231, 0, 0, 0, 0, 0, 0, 0, 1251,
	0, 0, 0, 0, 0, 0, 1248, 0, 0, 0,
	0, 1229, 1230, 0, 1262, 1263, 1264, 1272, 1273, 1274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1265,
	0, 0, 0, 0, 0, 0, 1232, 1268, 0, 1276,
	1243, 1244, 1250, 1249, 1245, 1271, 0, 1242, 1240, 1241,
	1233, 1234, 1235, 1236, 1238, 1239, 1254, 1255, 1256, 1257,
	2658, 1231, 0, 0, 0, 1237, 0, 0, 0, 1251,
	0, 0, 0, 0, 0, 0, 1248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1269, 1277, 0,
	1259, 1260, 1261, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1275, 0, 0, 0, 0, 0, 0, 1246, 1247, 0,
	0, 0, 0, 0, 0, 0, 1254, 1255, 1256, 1257,
	1267, 0, 0, 0, 0, 1237, 0, 1252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1269, 1277, 0,
	1259, 1260, 1261, 0, 0, 1266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1275, 0, 0, 0, 0, 0, 0, 1246, 1247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1267, 1258, 0, 0, 0, 0, 0, 1252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1266, 0, 0, 0, 0,
	0, 1270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1253, 1229,
	1230, 0, 1262, 1263, 1264, 1272, 1273, 1274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1265, 0, 0,
	0, 1270, 0, 0, 1232, 1268, 0, 1276, 1243, 1244,
	1250, 1249, 1245, 1271, 0, 1242, 1240, 1241, 1233, 1234,
	1235, 1236, 1238, 1239, 0, 0, 0, 0, 2615, 1231,
	0, 0, 0, 0, 0, 0, 0, 1251, 0, 0,
	0, 0, 0, 0, 1248, 0, 0, 0, 0, 1229,
	1230, 0, 1262, 1263, 1264, 1272, 1273, 1274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1265, 0, 0,
	0, 0, 0, 0, 1232, 1268, 0, 1276, 1243, 1244,
	1250, 1249, 1245, 1271, 0, 1242, 1240, 1241, 1233, 1234,
	1235, 1236, 1238, 1239, 1254, 1255, 1256, 1257, 2614, 1231,
	0, 0, 0, 1237, 0, 0, 0, 1251, 0, 0,
	0, 0, 0, 0, 1248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1269, 1277, 0, 1259, 1260,
	1261, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1275, 0,
	0, 0, 0, 0, 0, 1246, 1247, 0, 0, 0,
	0, 0, 0, 0, 1254, 1255, 1256, 1257, 1267, 0,
	0, 0, 0, 1237, 0, 1252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1269, 1277, 0, 1259, 1260,
	1261, 0, 0, 1266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1275, 0,
	0, 0, 0, 0, 0, 1246, 1247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1267, 1258,
	0, 0, 0, 0, 0, 1252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1266, 0, 0, 0, 0, 0, 1270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1253, 1229, 1230, 0,
	1262, 1263, 1264, 1272, 1273, 1274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1265, 0, 0, 0, 1270,
	0, 0, 1232, 1268, 0, 1276, 1243, 1244, 1250, 1249,
	1245, 1271, 0, 1242, 1240, 1241, 1233, 1234, 1235, 1236,
	1238, 1239, 0, 0, 0, 0, 2586, 1231, 0, 0,
	0, 0, 0, 0, 0, 1251, 0, 0, 0, 0,
	0, 0, 1248, 0, 0, 0, 0, 1229, 1230, 0,
	1262, 1263, 1264, 1272, 1273, 1274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1265, 0, 0, 0, 0,
	0, 0, 1232, 1268, 0, 1276, 1243, 1244, 1250, 1249,
	1245, 1271, 0, 1242, 1240, 1241, 1233, 1234, 1235, 1236,
	1238, 1239, 1254, 1255, 1256, 1257, 2409, 1231, 0, 0,
	0, 1237, 0, 0, 0, 1251, 0, 0, 0, 0,
	0, 0, 1248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1269, 1277, 0, 1259, 1260, 1261, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1275, 0, 0, 0,
	0, 0, 0, 1246, 1247, 0, 0, 0, 0, 0,
	0, 0, 1254, 1255, 1256, 1257, 1267, 0, 0, 0,
	0, 1237, 0, 1252, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1269, 1277, 0, 1259, 1260, 1261, 0,
	0, 1266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1275, 0, 0, 0,
	0, 0, 0, 1246, 1247, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1267, 1258, 0, 0,
	0, 0, 0, 1252, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1253, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1266, 0, 0, 0, 0, 0, 1270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1253, 1229, 1230, 0, 1262, 1263,
	1264, 1272, 1273, 1274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1265, 0, 0, 0, 1270, 0, 0,
	1232, 1268, 0, 1276, 1243, 1244, 1250, 1249, 1245, 1271,
	0, 1242, 1240, 1241, 1233, 1234, 1235, 1236, 1238, 1239,
	0, 0, 0, 0, 2382, 1231, 0, 0, 0, 0,
	0, 0, 0, 1251, 0, 0, 0, 0, 0, 0,
	1248, 0, 0, 0, 0, 1229, 1230, 0, 1262, 1263,
	1264, 1272, 1273, 1274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1265, 0, 0, 0, 0, 0, 0,
	1232, 1268, 0, 1276, 1243, 1244, 1250, 1249, 1245, 1271,
	0, 1242, 1240, 1241, 1233, 1234, 1235, 1236, 1238, 1239,
	1254, 1255, 1256, 1257, 1735, 1231, 0, 0, 0, 1237,
	0, 0, 0, 1251, 0, 0, 0, 0, 0, 0,
	1248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1269, 1277, 0, 1259, 1260, 1261, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1275, 0, 0, 0, 0, 0,
	0, 1246, 1247, 0, 0, 0, 0, 0, 0, 0,
	1254, 1255, 1256, 1257, 1267, 0, 0, 0, 0, 1237,
	2977, 1252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1269, 1277, 0, 1259, 1260, 1261, 0, 0, 1266,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1275, 0, 0, 0, 0, 0,
	0, 1246, 1247, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1267, 1258, 0, 0, 0, 0,
	0, 1252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1253, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1266,
	0, 0, 0, 0, 0, 1270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1253, 1229, 1230, 0, 1262, 1263, 1264, 1272,
	1273, 1274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1265, 0, 0, 0, 1270, 0, 0, 1232, 1268,
	0, 1276, 1243, 1244, 1250, 1249, 1245, 1271, 0, 1242,
	1240, 1241, 1233, 1234, 1235, 1236, 1238, 1239, 0, 0,
	2085, 0, 0, 1231, 0, 0, 0, 0, 0, 0,
	0, 1251, 0, 0, 0, 0, 0, 0, 1248, 0,
	0, 0, 1229, 1230, 0, 1262, 1263, 1264, 1272, 1273,
	1274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1265, 0, 0, 0, 0, 2058, 0, 1232, 0, 1268,
	1276, 0, 1243, 1244, 1250, 1249, 1245, 1271, 0, 1242,
	1240, 1241, 1233, 1234, 1235, 1236, 1238, 1239, 1254, 1255,
	1256, 1257, 1231, 0, 0, 0, 0, 1237, 0, 2165,
	1251, 0, 2164, 0, 0, 0, 0, 1248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1269,
	1277, 0, 1259, 1260, 1261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2059, 0, 0, 0, 0, 0,
	0, 0, 1275, 0, 0, 0, 0, 0, 0, 1246,
	1247, 0, 0, 0, 0, 0, 0, 1254, 1255, 1256,
	1257, 0, 1267, 0, 0, 0, 1237, 0, 0, 1252,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1269, 1277,
	0, 1259, 1260, 1261, 0, 0, 0, 1266, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1275, 0, 0, 0, 1833, 0, 0, 1246, 1247,
	0, 1229, 1230, 0, 1262, 1263, 1264, 1272, 1273, 1274,
	0, 1267, 0, 1258, 0, 0, 0, 0, 1252, 1265,
	0, 0, 0, 1832, 0, 0, 1232, 0, 0, 1276,
	1253, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1266, 0, 0, 0,
	0, 1231, 0, 1270, 0, 0, 0, 0, 0, 1251,
	0, 0, 0, 0, 0, 0, 1248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1253,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1254, 1255, 1256, 1257,
	0, 0, 1270, 0, 0, 1237, 0, 1268, 0, 0,
	1243, 1244, 1250, 1249, 1245, 1271, 0, 1242, 1240, 1241,
	1233, 1234, 1235, 1236, 1238, 1239, 0, 1269, 1277, 0,
	1259, 1260, 1261, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1275, 0, 0, 0, 0, 0, 0, 1246, 1247, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1267, 0, 0, 0, 0, 0, 1268, 1252, 0, 1243,
	1244, 1250, 1249, 1245, 1271, 0, 1242, 1240, 1241, 1233,
	1234, 1235, 1236, 1238, 1239, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1229, 1230,
	0, 1262, 1263, 1264, 1272, 1273, 1274, 0, 0, 0,
	0, 1258, 0, 0, 0, 0, 1265, 0, 0, 0,
	0, 0, 0, 1232, 0, 0, 1276, 0, 1253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1229,
	1230, 0, 1262, 1263, 1264, 1272, 1273, 1274, 1231, 0,
	0, 1270, 0, 0, 0, 0, 1251, 1265, 0, 0,
	0, 0, 0, 1248, 1232, 0, 0, 1276, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1231,
	0, 0, 0, 0, 0, 0, 0, 1251, 0, 0,
	0, 0, 0, 0, 1248, 0, 0, 0, 0, 0,
	0, 0, 0, 1254, 1255, 1256, 1257, 0, 0, 0,
	0, 0, 1237, 0, 0, 1268, 0, 0, 1243, 1244,
	1250, 1249, 1245, 1271, 0, 1242, 1240, 1241, 1233, 1234,
	1235, 1236, 1238, 1239, 1269, 1277, 0, 1259, 1260, 1261,
	0, 0, 0, 0, 1254, 1255, 1256, 1257, 0, 0,
	0, 0, 0, 1237, 0, 0, 0, 1275, 0, 0,
	0, 0, 0, 0, 1246, 1247, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1269, 1277, 1267, 1259, 1260,
	1261, 0, 0, 0, 1252, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1275, 0,
	0, 0, 0, 0, 0, 1246, 1247, 0, 0, 0,
	0, 0, 1266, 683, 0, 0, 0, 0, 1267, 0,
	0, 0, 0, 0, 0, 1252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1258, 0,
	0, 0, 0, 1266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1229, 1230, 0, 1262,
	1263, 1264, 1272, 1273, 1274, 0, 0, 0, 1270, 1258,
	0, 0, 0, 0, 1265, 0, 0, 0, 0, 0,
	0, 1232, 0, 0, 1276, 0, 1253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1231, 0, 0, 1270,
	0, 0, 1229, 1230, 1251, 1262, 1263, 1264, 1272, 1273,
	1274, 1248, 0, 0, 0, 0, 0, 0, 0, 0,
	1265, 0, 0, 0, 2169, 0, 0, 1232, 0, 2386,
	1276, 0, 1268, 0, 0, 1243, 1244, 1250, 1249, 1245,
	1271, 0, 1242, 1240, 1241, 1233, 1234, 1235, 1236, 1238,
	1239, 0, 1231, 0, 0, 0, 0, 0, 0, 0,
	1251, 1254, 1255, 1256, 1257, 0, 0, 1248, 0, 0,
	1237, 0, 0, 1268, 0, 2174, 1243, 1244, 1250, 1249,
	1245, 1271, 0, 1242, 1240, 1241, 1233, 1234, 1235, 1236,
	1238, 1239, 1269, 1277, 0, 1259, 1260, 1261, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1275, 0, 1254, 1255, 1256,
	1257, 0, 1246, 1247, 0, 0, 1237, 0, 0, 0,
	0, 0, 0, 0, 0, 1267, 0, 0, 0, 0,
	0, 0, 1252, 0, 0, 0, 0, 0, 1269, 1277,
	0, 1259, 1260, 1261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1266, 1275, 0, 0, 0, 0, 0, 0, 1246, 1247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1267, 0, 0, 0, 0, 0, 0, 1252, 0,
	0, 0, 0, 0, 0, 0, 1258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1253, 0, 0, 1266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1270, 0, 0, 1229,
	1230, 0, 1262, 1263, 1264, 1272, 1273, 1274, 0, 0,
	0, 0, 1258, 0, 0, 0, 0, 1265, 0, 0,
	0, 0, 0, 0, 1232, 0, 0, 1276, 0, 1253,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1229, 1230, 0, 1262, 1263, 1264, 1272, 1273, 1274, 1231,
	0, 0, 1270, 0, 0, 0, 0, 1251, 1265, 0,
	0, 0, 2115, 0, 1248, 1232, 0, 0, 1276, 0,
	1268, 0, 0, 1243, 1244, 1250, 1249, 1245, 1271, 0,
	1242, 1240, 1241, 1233, 1234, 1235, 1236, 1238, 1239, 0,
	1231, 0, 0, 0, 0, 0, 0, 0, 1251, 0,
	0, 0, 0, 0, 0, 1248, 0, 0, 0, 0,
	0, 0, 0, 0, 1254, 1255, 1256, 1257, 0, 0,
	0, 0, 0, 1237, 0, 0, 1268, 0, 0, 1243,
	1244, 1250, 1249, 1245, 1271, 0, 1242, 1240, 1241, 1233,
	1234, 1235, 1236, 1238, 1239, 1269, 1277, 0, 1259, 1260,
	1261, 0, 0, 0, 0, 1254, 1255, 1256, 1257, 0,
	0, 0, 0, 0, 1237, 0, 0, 0, 1275, 0,
	0, 0, 0, 0, 0, 1246, 1247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1269, 1277, 1267, 1259,
	1260, 1261, 0, 0, 0, 1252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1275,
	0, 0, 0, 0, 0, 0, 1246, 1247, 0, 0,
	0, 0, 0, 1266, 0, 0, 0, 0, 0, 1267,
	0, 0, 0, 0, 0, 0, 1252, 0, 2131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1258,
	0, 0, 0, 0, 1266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1229, 1230, 0,
	1262, 1263, 1264, 1272, 1273, 1274, 0, 0, 0, 1270,
	1258, 0, 0, 0, 0, 1265, 0, 0, 0, 0,
	0, 0, 1232, 0, 0, 1276, 0, 1253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1231, 0, 0,
	1270, 0, 0, 1229, 1230, 1251, 1262, 1263, 1264, 1272,
	1273, 1274, 1248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1232, 0,
	0, 1276, 0, 1268, 0, 0, 1243, 1244, 1250, 1249,
	1245, 1271, 0, 1242, 1240, 1241, 1233, 1234, 1235, 1236,
	1238, 1239, 0, 1231, 0, 0, 0, 0, 0, 0,
	0, 1251, 1254, 1255, 1256, 1257, 0, 0, 1248, 0,
	0, 1237, 0, 0, 1268, 0, 0, 1243, 1244, 1250,
	1249, 1245, 1271, 0, 1242, 1240, 1241, 1233, 1234, 1235,
	1236, 1238, 1239, 1269, 1277, 0, 1259, 1260, 1261, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1275, 0, 1254, 1255,
	1256, 1257, 0, 1246, 1247, 0, 0, 1237, 0, 0,
	0, 0, 0, 0, 0, 0, 1267, 0, 0, 0,
	0, 0, 0, 1252, 0, 0, 0, 0, 0, 1269,
	1277, 0, 1259, 1260, 1261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1266, 0, 0, 0, 0, 0, 0, 0, 1246,
	1247, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1521, 1267, 0, 0, 0, 0, 0, 0, 1252,
	0, 0, 0, 0, 0, 0, 0, 1258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1253, 0, 1532, 1518, 1522, 1506,
	1542, 1541, 0, 0, 1508, 1507, 0, 0, 0, 0,
	0, 1550, 1549, 0, 0, 0, 0, 1270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1253, 1543, 0, 1539, 1538, 0, 0, 0, 0, 0,
	0, 0, 0, 1537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1536, 1534,
	1535, 1268, 0, 0, 1243, 1244, 1250, 1249, 1245, 1271,
	0, 1242, 1240, 1241, 1233, 1234, 1235, 1236, 1238, 1239,
	0, 0, 0, 0, 0, 1517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1525, 1520, 1526, 1527, 1528,
	1529, 1530, 0, 1524, 0, 0, 0, 1521, 0, 0,
	0, 1547, 1548, 0, 0, 0, 0, 1268, 0, 0,
	1243, 1244, 1250, 1249, 1245, 1271, 0, 1242, 1240, 1241,
	1233, 1234, 1235, 1236, 1238, 1239, 0, 0, 0, 0,
	1510, 0, 1532, 1518, 1522, 1506, 1542, 1541, 0, 0,
	1508, 1507, 1540, 0, 0, 0, 1519, 1550, 1549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1533, 0,
	0, 0, 1656, 1654, 1655, 1658, 1657, 1543, 0, 1539,
	1538, 0, 0, 0, 0, 0, 0, 0, 0, 1537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1511, 1512, 1513, 1514, 0,
	0, 0, 0, 0, 1536, 1534, 1535, 0, 0, 1531,
	1515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1517, 0, 0, 0, 1509, 0, 0, 1544, 1545,
	1546, 1525, 1520, 1526, 1527, 1528, 1529, 1530, 616, 1524,
	647, 0, 0, 0, 0, 0, 0, 1547, 1548, 0,
	0, 1516, 0, 0, 0, 0, 1551, 0, 0, 0,
	623, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 621, 0, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1540, 0,
	0, 0, 1519, 0, 622, 0, 0, 0, 0, 624,
	0, 0, 0, 652, 0, 0, 0, 0, 0, 630,
	631, 0, 0, 0, 642, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1533, 0, 0, 0, 648, 625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 646, 636, 0, 0, 0, 0, 0, 0,
	0, 1511, 1512, 1513, 1514, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1531, 1515, 0, 0, 626,
	0, 0, 0, 0, 0, 620, 1552, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 627,
	628, 1509, 0, 0, 1544, 1545, 1546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 634, 0,
	0, 0, 0, 0, 0, 629, 0, 1516, 0, 0,
	0, 0, 1551, 0, 0, 0, 0, 0, 633, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	649, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 632, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 644, 0,
	0, 0, 0, 0, 0, 0, 0, 639, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 618,
	637, 650, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 619, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 640, 0, 0, 638, 0,
	0, 0, 645, 0, 0, 0, 0, 651, 0, 0,
	0, 0, 0, 641, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 643,
}
var sqlPact = [...]int{

	5121, -1000, -13, -1000, -1000, -1000, 253, -1000, -1000, -1000,
	-1000, 251, 246, 243, -1000, 241, 240, 222, 221, 218,
	217, 216, 212, 211, 210, 208, -1000, -1000, 206, -1000,
	-1000, -1000, -1000, 203, 202, 192, -1000, 191, 1421, 28221,
	180, 178, 1660, 45522, 1532, 177, 176, -1000, 171, 2807,
	33366, 1163, 1617, -1000, 170, 157, 1457, 45156, 4337, 31155,
	1373, 1917, 44787, 27850, 1913, 30786, 44418, -1000, -1000, 1097,
	-1000, -1000, 44049, 155, 153, 152, 151, 150, -1000, 149,
	43680, 148, 147, 144, 139, 129, 128, 127, 126, 125,
	124, 122, 118, 117, 116, 114, 112, 111, 107, 104,
	103, -1000, 102, 100, 99, -1000, 53826, 98, 97, 96,
	-1000, 1371, 88, 86, 82, 81, 80, -1000, -1000, 78,
	71, 69, 61, 60, 59, 161, 58, 57, 56, 54,
	53, -1000, 1087, 788, 1781, 12002, 1223, 1214, 1212, 1201,
	1216, 775, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	48084, 45522, 52, -56, 51, -1000, 2303, 776, 21904, 5121,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 32997, 32628, 32259, 26747, 43311, 42942, 9221, 9221, 1001,
	-1000, -20, 29685, 45522, -1000, -1000, 283, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18068,
	17659, 390, -1000, 278, -1000, 1321, -1000, -1000, -1000, -1000,
	42573, 42204, 41835, 26376, 26005, 41466, 1780, 1773, 41097, -1000,
	-1000, 40728, -1000, -1000, 2165, 1922, 1906, 31890, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 40362, 39993, 39624,
	39255, 38886, 25634, 25263, 581, -1000, -1000, -1000, -1000, 22648,
	-1000, -1000, -1000, -1000, -1000, 46, -1000, 45, 44, -1000,
	41, 40, 39, 38, 37, 34, 32, 14, -1000, 8,
	6, -1000, 0, -2, -1000, -9, -11, 1375, 1355, 1428,
	38517, 1082, 1520, -36, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 45522, -1000, 18463, -1000, 580, -1000, 1925, -1000, 18463,
	-1000, 1514, 113, 1427, -1000, -1000, -1000, 1380, 1038, -1000,
	-1000, 45522, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2467,
	1442, 579, 38148, -1000, 1725, -1000, 712, 12792, -1000, 919,
	-1000, 12792, 273, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1679, 2108,
	2430, 24892, 1456, 2307, 2160, 2466, 1662, 2109, 2098, 2086,
	2030, 2003, 2465, 1205, 2464, 1023, 871, 2462, 2001, 1986,
	2448, 1540, 855, 2461, 2459, 1920, 1902, -1000, -1000, -1000,
	-1000, 1050, -1000, -1000, -1000, -1000, 34830, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1087, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1545,
	2258, 2258, 2258, 2337, 369, 361, -1000, 161, -1000, 1493,
	-1000, 1412, -1000, -1000, -1000, 53227, -1000, -1000, 18463, 18463,
	18463, 18463, 18463, 1350, -1000, -1000, -1000, 605, -1000, 575,
	574, 10407, -1000, -1000, 2426, -1000, -1000, -1000, 389, -1000,
	-1000, 18463, -1000, 272, -1000, -1000, -1000, -1000, 573, 2451,
	-1000, 764, -1000, -1000, -1000, 720, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1970, 525, 518, -1000, 517, 513, -1000, -1000,
	-1000, 572, 570, 566, 559, 558, 555, -1000, 1275, -1000,
	777, -1000, -1000, 777, 777, -1000, 497, 497, 551, 550,
	504, -1000, -1000, 547, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 544, 497, 543, 541, -1000, -1000, -1000, 539,
	717, 669, -1000, 537, 532, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1594, -1000, -1000, 1594, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1000, 46986, -1000, -1000, -1000, -42, 45522,
	-1000, 390, -42, -1000, -1000, 531, -1000, 13187, 13187, 13187,
	-1000, -1000, 1485, 18463, -1000, 2174, -1000, 3005, -221, 529,
	652, 652, -1000, 20788, 615, 24510, -1000, 525, 518, 517,
	513, -1000, 271, -1000, -1000, -1000, -1000, -1000, 1306, 2143,
	904, -1000, 1252, 2137, -1000, 3031, 2128, 1243, -1000, -1000,
	749, 2122, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1404, -1000, -1000, 1542, 2119, -182, 2005, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1568,
	-1000, 27113, 29685, -20, -105, -1000, 8841, 53227, -1000, 53227,
	-1000, 1896, 45522, 9221, 45522, 45522, -1000, 511, 1628, 1478,
	-1000, -1000, 3031, 1627, -1000, -1000, 732, 1626, -1000, -1000,
	1625, -1000, 390, -1000, -1000, 37779, 47718, 732, 1615, -1000,
	-1000, -1000, 34830, -1000, 45522, -1000, 45522, -1000, 1094, -1000,
	47352, 154, 2110, -1000, -1000, 154, 2101, -1000, 154, 2091,
	-1000, 135, 2077, -1000, -1000, 1406, 2076, -1000, -145, 2075,
	-1000, -1000, -145, 2074, -1000, -1000, 18463, 31, -1000, -1000,
	-1000, 776, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 37410,
	28953, 45522, 31521, 711, 53227, 2372, 53653, 27113, 53227, 28953,
	45522, 1969, -1000, 37041, 36672, 2276, 704, -1000, -1000, 45522,
	-1000, 18463, -1000, 2369, 1576, -84, -1000, -1000, -1000, -1000,
	-1000, 1670, 1672, 862, 962, -1000, 12792, 12792, 2212, -1000,
	269, 9221, -1000, -1000, 1039, -1000, -1000, -1000, -1000, -1000,
	36303, -1000, -1000, -1000, 1439, 45522, -1000, -1000, 27479, 1954,
	-1000, 45522, -1000, 45522, -1000, 45522, -1000, 45522, -1000, 45522,
	-1000, -1000, -1000, -1000, -1000, 2079, 1221, 1967, -1000, 45522,
	-1000, 45522, -1000, -1000, -1000, 1665, -1000, -1000, -1000, 35937,
	35568, 35199, -1000, -1000, 1198, 1033, -1000, -1000, 158, -1000,
	-1000, 1545, -1000, 1539, 1756, 17250, 1729, 18463, 161, -1000,
	-1000, 161, 161, 11593, -1000, -1000, -1000, 45522, -1000, 53477,
	53653, 9221, 1012, 18463, 18463, 18463, 18463, 18463, 18463, 18463,
	18463, 18463, 18463, 18463, 18463, 18463, 18463, 18463, 18463, 18463,
	18463, 18463, 18463, 18463, 18463, 18463, 18463, 18463, 18463, 18463,
	18463, 18463, 18463, 18463, 18463, 18463, 18463, 18463, 1573, 18463,
	993, 18463, 18463, 18463, 18463, 1342, 1386, 434, 1410, -1000,
	2414, 2414, 2414, 4502, 4502, 486, 605, -1000, 18463, -1000,
	162, 18463, 361, 51227, -21, 10012, -1000, -1000, -1000, -1000,
	16841, 761, 53227, 8461, 9603, -1000, 2442, 1155, 1979, 1834,
	509, 674, 670, 568, 561, 18463, 18463, 18463, 18463, 18463,
	18463, -1000, -1000, -1000, -1000, -1000, -1000, 2426, -1000, 16446,
	16037, -1000, 2440, 15628, 15219, -1000, 14810, 19648, 14401, 1006,
	1005, 970, 18463, 10802, -1000, -84, -1000, 46986, -1000, 45522,
	-42, 2368, 18463, 108, -1000, 52101, -1000, 108, 108, 508,
	29, 53227, 1728, 1718, 22276, 1657, 1356, 1356, 1356, -1000,
	507, 594, 652, 6542, 13992, 33732, 1379, 33732, 289, 360,
	20416, 2174, -1000, -1000, 45522, 9221, -67, 1265, -1000, 30417,
	2255, 2245, 2239, 1093, -1000, 2331, 34830, 2353, 162, 2268,
	1890, 990, 34830, 3031, -1000, 53653, -1000, 1792, 2330, 1004,
	1068, 1004, 1004, 1011, 34830, 988, 1297, 27113, 2267, 985,
	-75, 2351, 162, 2266, 1885, 980, -1000, -1000, 45522, 9221,
	2261, 1032, 650, -1000, 45522, 262, -1000, 1066, 28, 261,
	1743, 1734, 73, -1000, 30051, 2367, 2068, 45522, -1000, 3031,
	2066, -1000, 1285, -1000, 2063, 2058, 2365, 1466, 1607, -1000,
	-1000, -1000, 1465, 1602, 972, 2041, 757, 366, 2364, 366,
	23392, -1000, 45522, -1000, 45522, -1000, -1000, 45522, -1000, 45522,
	-1000, 45522, -1000, 45522, 45522, -1000, 45522, 27113, 27113, 27113,
	26, 3936, 29319, 976, -102, -1000, 805, 30051, 578, 18,
	-1000, 967, -1000, -1000, -1000, 364, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 777, 506, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 504, 1275, 497, 497,
	497, -1000, -1000, -1000, 717, 669, -1000, -1000, -1000, 777,
	777, -1000, -1000, -196, 1883, -105, 31521, 650, -1000, 650,
	-1000, 1957, -1000, 2256, 690, 9, 844, -84, -1000, 1594,
	-1000, 1341, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2450, -1000, 2420, -1000, -1000,
	2437, -48, -1000, -48, -1000, 9221, -1000, 45522, -1000, -1000,
	-1000, -1000, -1000, 45522, -1000, -1000, 45522, -1000, -1000, -1000,
	-1000, -1000, 623, -1000, 1955, -1000, 3936, 260, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 45522, 45522, 45522, -1000,
	34830, -1000, -1000, -1000, -1000, 53227, -1000, 438, -1000, -1000,
	53227, 1175, 1754, -1000, 1754, -49, -1000, 51922, 1710, 45522,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 703, 1187, 1187, 923, 923, 923, 923, 2370,
	643, 207, 3859, 672, 672, 672, 672, 672, 672, 672,
	672, 745, 917, 917, 745, 745, 745, 745, 745, 917,
	917, 917, 672, 672, 672, 4502, 245, 417, 18463, 18463,
	965, 1370, 434, 417, 18463, 417, 417, 417, 417, -1000,
	1129, -1000, -1000, -1000, -1000, 1879, 496, 19648, 19648, -1000,
	-1000, -1000, 10407, 18463, -1000, -1000, -1000, -1000, 495, 18463,
	-1000, 51505, -233, 359, -184, -1000, 18463, 592, -110, -1000,
	1042, -1000, 18463, 259, -1000, -1000, -46, 18463, 18463, 18463,
	358, -1000, 357, -1000, 956, -1000, 951, 950, 948, -1000,
	493, 1364, 490, 489, 18463, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 52980, 48959, 48865, 48824, 5854, 1, -15,
	356, -1000, 1876, -184, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 354, -1000, 353, -18, -1000, -23, -1000, 352, -1000,
	52939, -184, 351, 4682, -1000, 19648, 19648, 19648, 10407, 488,
	350, -1000, 51853, -1000, 702, 701, 699, 52692, 13583, 13583,
	13583, 347, 52636, 18463, -184, -1000, -1000, 487, -24, 757,
	13187, 21532, 9221, -1000, 757, 757, 18463, -1000, 18463, 22276,
	22276, 1527, 1717, 22276, -1000, -1000, -1000, -1000, 33732, 515,
	652, 33732, -1000, 2426, 1714, -1000, 346, -1000, -1000, -1000,
	45522, 390, -1000, -1000, 652, 345, 256, 1429, 45522, 45522,
	45522, -1000, -1000, 1601, 46620, 1599, 53653, 45522, -1000, -1000,
	485, 483, 1708, 1707, 45522, 45522, 46254, 45888, 45522, 1319,
	1557, 1236, 162, -1000, 697, 482, 45522, 1239, -1000, -1000,
	-1000, -1000, -1000, 45522, -1000, -1000, 2435, -1000, 1004, -1000,
	-1000, -1000, 1004, 3031, 1184, 45522, 27113, 746, 693, 45522,
	1299, 162, -1000, 680, 480, 9221, 1294, -1000, 676, 45522,
	1814, -1000, 1555, -1000, 8081, -1000, -1000, 9221, 1799, 1799,
	9221, 342, -50, -1000, -1000, -1000, -1000, -1000, -1000, 1770,
	45522, 587, 45522, 162, 45522, 85, 45522, 27113, 27113, 27113,
	162, 45522, 2038, 45522, 2037, 2149, 626, 45522, 1382, 18463,
	1196, -1000, 23020, 792, 45522, 1153, 75, -1000, -1000, -1000,
	10, 45522, -1000, -1000, 154, 154, 154, -1000, 135, 1406,
	-1000, -145, -145, -1000, -1000, -1000, 45522, 2390, 27113, -25,
	-1000, 820, 898, 894, -1000, 53653, -1000, 603, 816, -1000,
	2433, 479, 2426, -1000, 731, 34464, 45522, 72, -1000, 738,
	1534, -1000, 12792, 12792, -1000, 1594, -1000, -1000, 1123, -1000,
	1209, -1000, -1000, -1000, -1000, 12792, -1000, -1000, 1954, -105,
	-105, -1000, -1000, 307, -1000, 45522, -1000, -1000, -1000, -1000,
	1175, -1000, 18463, -1000, -1000, -1000, 11593, -1000, -1000, -1000,
	45522, -211, 18463, 417, 417, 18463, 19648, 19648, -1000, 417,
	-1000, -1000, -1000, -1000, -1000, 1871, 475, 18463, 53653, 5607,
	5374, -30, 745, 18463, -59, -1000, 18463, -1000, 51157, -1000,
	-1000, 599, 2008, -1000, 18463, 52389, 7701, 341, 12397, -1000,
	52348, -52, -52, -1000, 2447, 1644, 1366, 1202, 1131, 2432,
	-1000, 24138, 759, 1382, 50879, 53477, 53653, 18463, 18463, 18463,
	-1000, -1000, 2426, -1000, 18463, -1000, -1000, -1000, -1000, -1000,
	1865, 18463, -1000, 53477, 53653, 19648, 19648, 19648, 19648, 19648,
	19648, 19648, 19648, 19648, 19648, 19648, 19648, 19648, 19648, 19648,
	19648, 19648, 19648, 19648, 1586, 19648, 2410, 2410, 2410, -66,
	18463, -1000, 1949, 1865, 18463, 18463, -1000, -1000, -1000, 53653,
	340, 338, 337, -1000, 18463, -184, 578, -1000, 1829, -1000,
	-173, -1000, 2174, -1000, -1000, 1829, 1829, -31, 53227, -1000,
	1527, -1000, 474, 18463, 22276, -1000, 591, -1000, -33, -1000,
	33732, -1000, 590, -234, -1000, 646, -1000, 652, 390, -1000,
	33732, -1000, 9221, -1000, -1000, 946, 939, -1000, 2035, -1000,
	1595, -1000, 797, -1000, 1185, 18463, 21160, 471, 469, 1304,
	-1000, 2025, 1406, 2021, 1406, -1000, -1000, 713, -1000, 466,
	462, -1000, -67, 1229, -1000, 23772, 18463, -1000, 916, -1000,
	-1000, -1000, 3031, 908, -1000, -1000, 1284, 23772, -1000, -1000,
	-1000, 23772, 18463, -1000, -75, 902, 23772, 2000, 731, 1863,
	1054, -1000, -1000, -1000, -1000, -1000, -1000, 255, 1784, 30051,
	45522, 461, 45522, 460, -1000, -1000, 458, 45522, 3031, -1000,
	732, -1000, -1000, 457, 9221, 456, 9221, 1681, 626, 28587,
	-1000, 732, 1756, 53227, -1000, 1153, 11197, 2247, -47, -1000,
	163, -1000, -1000, -1000, 757, 23392, 22276, 18463, 2457, -53,
	-1000, -1000, -1000, -1000, -1000, -105, 1422, 2221, 2221, -1000,
	2431, -1000, 585, 334, 2426, 329, -1000, -83, 454, -1000,
	644, 633, -105, 45522, -1000, 1389, 9221, 45522, 45522, 9221,
	45522, -1000, -1000, -84, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1432, 50809, -1000, 2231, 9221, 2350, 417, 5271,
	4585, 18463, 53653, 53283, -60, 18463, 18463, -1000, 328, 18463,
	584, 53227, -1000, -1000, -1000, 53227, 18463, 109, -1000, 2446,
	18463, 326, 324, 321, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 319, -1000, -1000, 48450, -1000, 18463, 318, -1000,
	317, 316, 5784, 50531, 50461, 315, 53227, 1949, 53227, -1000,
	-1000, 897, 897, 991, 991, 991, 991, 2410, 197, 384,
	810, 705, 705, 705, 872, 837, 837, 705, 705, 705,
	1859, 1686, 451, 6068, 18463, 314, -1000, -1000, 53227, 53227,
	313, -1000, -1000, -1000, -184, 312, 1825, 2325, -1000, 22276,
	1825, 1825, -1000, -1000, 45522, 53227, -1000, -221, -1000, 2426,
	-1000, -1000, 1714, -1000, 6936, 33732, -1000, -1000, 2, 45522,
	45522, 45522, 2013, -1000, 3012, -1000, 50183, -65, -1000, 2296,
	2296, 18463, 73, -1000, -1000, 450, 21160, 45522, -1000, 1719,
	1766, 836, 45522, -1000, 45522, -1000, -1000, 45522, 45522, 45522,
	45522, 45522, -1000, 448, 73, -72, 45522, 45522, 27113, -1000,
	-1000, -73, 9221, -1000, 2259, -1000, 27113, 907, 9221, 1299,
	1806, -1000, 445, 21160, 437, 45522, 30051, 2362, -1000, -1000,
	-1000, 21160, 1459, 21160, 1458, 1680, 626, 28587, -1000, 972,
	1153, -1000, -1000, -92, -1000, 484, 162, 45522, 2455, 1382,
	-1000, -95, 53227, -1000, 632, -1000, 2202, -1000, 2183, 569,
	-1000, -1000, 311, -1000, 34098, 34098, 27113, 27113, -105, 1713,
	-1000, -1000, 1305, 1551, -1000, -1000, -1000, -1000, 2231, 18463,
	18463, 53283, -74, -1000, 417, 417, -1000, 50113, -1000, 53227,
	7321, -1000, 52348, -1000, -1000, -1000, -1000, 1329, -1000, 49835,
	-1000, -1000, -1000, 18463, -1000, -1000, -1000, -1000, 19648, 1851,
	436, 53653, 49701, -1000, -1000, -1000, 751, 18463, 18463, 2174,
	751, 751, -81, 652, -1000, -1000, -1000, 2426, -1000, 9221,
	-1000, -1000, -1000, 45522, -1000, 45522, -1000, 9221, 45522, 1842,
	1589, -1000, -1000, 1693, 435, 19648, 45522, 710, -1000, 1295,
	21160, 2231, 9221, 2231, 49399, 9603, -82, -90, 1587, -1000,
	1580, 18463, -1000, 53653, 1406, 1406, -93, -96, -1000, 896,
	887, 18463, 886, -1000, -1000, -1000, 885, -1000, 666, -145,
	23772, 2, -1000, -1000, 1332, 21160, -104, 21160, -107, 304,
	162, -109, 45522, -114, 45522, -1000, 626, 28587, -1000, 2149,
	-1000, 2157, 45522, 2238, -1000, -1000, -1000, 1756, 434, 432,
	431, -1000, -1000, -1000, -117, -1000, -1000, -146, -1000, 685,
	684, -1000, -1000, -1000, 9221, 1031, -1000, 417, 417, -1000,
	-1000, -1000, -1000, 299, 1382, 2320, -1000, 49358, 4926, 19648,
	53653, -119, -1000, -1000, 45522, 53227, -184, -1000, -1000, -1000,
	33732, 516, -1000, 2070, -1000, -1000, -1000, 45522, 1588, -1000,
	-1000, 18463, 6068, 428, 18463, -1000, 1784, 424, -1000, -1000,
	-1000, -1000, -1000, -1000, 2296, -46, -1000, 1228, -1000, -1000,
	53227, 2293, -1000, -1000, 421, 418, 45522, 45522, -52, 416,
	404, 23772, -1000, 45522, -120, 1295, -122, -1000, 1784, -1000,
	1295, 403, -1000, 402, 28587, -1000, 1681, 994, -125, 45522,
	1153, -1000, 27113, 27113, -1000, 1713, -1000, 45522, -1000, 45522,
	-1000, 45522, -1000, 1197, 18463, -1000, 4926, -130, -1000, -154,
	-1000, 2361, -1000, -1000, -1000, -1000, 2010, 49264, 1649, 45522,
	6132, 1299, 45522, 2231, 298, 45522, 804, 9221, 1305, 1305,
	-1000, -1000, 295, 18463, 18463, -1000, 401, -1000, 1784, 1295,
	1299, 1784, 21160, 21160, -1000, 1680, 1092, -1000, 757, -1000,
	-1000, -133, -135, -1000, -143, -157, -1000, 293, 19253, 19253,
	-184, -1000, 45522, 395, 1991, -1000, 1438, 1426, 291, 811,
	-1000, -158, -1000, -1000, 390, -1000, 18463, -1000, -166, -1000,
	789, -167, -1000, 785, 2446, -172, -175, 45522, 1299, 1784,
	-1000, 1299, -178, -185, -1000, 23392, -1000, 731, 731, -1000,
	-1000, -1000, -1000, -1000, 20028, 1460, 1132, 51575, -1000, -1000,
	-1000, 45522, -1000, 1454, 1443, 1070, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1649, 53227, -1000, 1305, 1790, -1000, 1305,
	1848, -1000, -1000, -186, -1000, 1299, 800, 1295, -1000, -191,
	-1000, -1000, 2380, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2168, -1000, 819, 1504, 1504, 1438, -1000, 386, -1000, 382,
	1401, -1000, -1000, 1839, 1784, -1000, 18858, -1000, 2393, -1000,
	-1000, 1703, -1000, -1000, 18463, 18463, -1000, -1000, -1000, -1000,
	1299, -1000, -1000, -1000, -1000, -188, -195, 800, 1299, 875,
	-1000, -1000, 373, 18463, -205, 1299, -1000,
}
var sqlPgo = [...]int{

	0, 2940, 2939, 1931, 2938, 2271, 2934, 2931, 2930, 2929,
	2928, 2266, 2925, 2917, 2916, 2915, 2912, 2910, 2909, 2908,
	2907, 2906, 2905, 2904, 2900, 2898, 2895, 2894, 2892, 2891,
	2890, 2889, 2246, 2888, 2242, 2884, 2882, 2880, 2877, 2874,
	2871, 2868, 26, 2867, 2866, 2865, 2862, 2239, 2848, 2847,
	2233, 2845, 2844, 2208, 2843, 2839, 2205, 2202, 2838, 2835,
	2193, 2834, 2833, 2184, 2829, 2165, 2827, 2825, 2152, 2821,
	100, 105, 2145, 2816, 2814, 2136, 2128, 2095, 2813, 2079,
	2811, 2810, 2068, 2066, 2808, 101, 2807, 2806, 2805, 2803,
	2056, 2052, 2796, 2795, 2794, 179, 2793, 2013, 2791, 2790,
	2788, 2787, 2785, 2784, 2783, 2782, 2781, 2779, 2778, 2777,
	2776, 2775, 2770, 2767, 2766, 2765, 2751, 2747, 2743, 2742,
	2740, 2734, 2730, 175, 118, 2728, 2725, 2008, 1969, 2722,
	2718, 47, 48, 15, 69, 114, 173, 3842, 158, 2715,
	2712, 2710, 2706, 2701, 2700, 65, 121, 119, 129, 120,
	2698, 210, 2681, 2679, 50, 53, 32, 27, 82, 2678,
	2675, 2674, 1572, 87, 2672, 2670, 167, 160, 2669, 791,
	33, 71, 163, 86, 234, 49, 2668, 98, 18, 2666,
	188, 21, 2665, 68, 34, 25, 3627, 55, 52, 76,
	172, 122, 62, 2664, 170, 72, 148, 2661, 2656, 2655,
	54, 139, 3, 2, 115, 16, 2651, 9, 2650, 10,
	2645, 2643, 2641, 2639, 22, 110, 104, 56, 2637, 23,
	144, 2630, 134, 2628, 146, 2626, 74, 1862, 166, 5,
	93, 2621, 80, 19, 79, 2620, 2617, 92, 155, 2615,
	30, 124, 85, 90, 176, 143, 95, 149, 145, 2613,
	2612, 2611, 157, 2605, 136, 112, 2603, 2602, 111, 1,
	2593, 39, 154, 41, 2592, 2590, 113, 2588, 138, 2587,
	2586, 174, 109, 131, 11, 46, 84, 8, 150, 99,
	70, 59, 2584, 2472, 1791, 1499, 29, 2583, 97, 61,
	37, 78, 106, 168, 38, 2582, 2580, 152, 2574, 2571,
	2568, 2566, 2561, 125, 2560, 2556, 2555, 91, 75, 77,
	2554, 103, 43, 187, 153, 130, 171, 123, 2553, 133,
	89, 147, 2552, 57, 2549, 1285, 2547, 137, 2546, 2545,
	2543, 2542, 1128, 2541, 2535, 2531, 1204, 2521, 96, 2513,
	135, 132, 169, 94, 107, 159, 151, 1158, 2507, 141,
	31, 2506, 117, 36, 0, 3076, 2993, 2501, 142, 88,
	2500, 2499, 2497, 2496, 35, 13, 4, 7, 12, 14,
	165, 28, 419, 2495, 2494, 83, 126, 2493, 178, 156,
	2492, 2491, 2490, 45, 2489, 20, 2487, 17, 2486, 2485,
	24, 6, 2484, 2483, 164, 2478, 108, 2352, 2477, 2474,
	2473, 1993, 2471, 2470, 42, 128,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 6, 8, 8,
	9, 9, 9, 31, 31, 11, 11, 10, 10, 10,
	12, 7, 7, 7, 7, 7, 7, 7, 14, 14,
	23, 23, 15, 25, 18, 27, 13, 21, 19, 19,
	28, 17, 17, 24, 24, 147, 147, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 398, 398, 149, 149, 148, 144,
	144, 151, 151, 151, 153, 153, 150, 150, 143, 143,
	32, 32, 83, 83, 83, 134, 76, 76, 76, 352,
	352, 353, 353, 130, 130, 131, 131, 131, 131, 132,
	132, 133, 133, 133, 45, 34, 34, 34, 34, 34,
	35, 35, 36, 36, 43, 43, 124, 124, 46, 46,
	46, 46, 46, 46, 46, 46, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 56,
	56, 57, 57, 58, 58, 58, 58, 58, 58, 59,
	59, 59, 59, 59, 59, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 66, 66, 66, 67, 67,
	67, 64, 64, 64, 62, 62, 62, 61, 61, 61,
	65, 65, 65, 63, 63, 63, 228, 228, 68, 68,
	68, 68, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 71, 71,
	71, 71, 71, 71, 71, 71, 322, 322, 69, 69,
	295, 295, 72, 72, 253, 253, 73, 73, 73, 73,
	73, 74, 74, 74, 74, 84, 84, 84, 84, 394,
	394, 394, 397, 397, 222, 222, 166, 166, 166, 166,
	79, 79, 79, 79, 80, 80, 80, 81, 81, 129,
	129, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 37, 37, 37, 38, 38, 39, 39, 40, 40,
	41, 41, 42, 42, 42, 42, 42, 91, 91, 91,
	93, 90, 90, 90, 92, 92, 92, 92, 94, 94,
	95, 95, 95, 95, 95, 95, 96, 96, 346, 346,
	231, 231, 344, 344, 345, 345, 198, 198, 198, 198,
	198, 199, 199, 199, 351, 351, 351, 351, 351, 351,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 113,
	113, 113, 123, 123, 123, 123, 123, 123, 123, 115,
	115, 107, 107, 98, 98, 104, 104, 104, 104, 104,
	99, 99, 105, 105, 106, 106, 106, 108, 108, 108,
	108, 108, 108, 100, 100, 100, 100, 110, 110, 110,
	110, 109, 109, 119, 119, 119, 119, 119, 119, 119,
	310, 310, 114, 114, 114, 114, 117, 117, 117, 117,
	112, 112, 112, 116, 116, 120, 120, 120, 120, 101,
	101, 102, 102, 103, 103, 121, 121, 111, 111, 122,
	122, 122, 122, 122, 122, 122, 118, 118, 118, 395,
	395, 396, 396, 77, 77, 51, 51, 52, 52, 200,
	200, 201, 201, 276, 276, 276, 276, 202, 202, 152,
	152, 152, 205, 206, 206, 203, 203, 204, 204, 204,
	208, 208, 207, 210, 210, 209, 275, 362, 362, 363,
	363, 363, 363, 363, 363, 363, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 360, 360, 360, 361,
	358, 358, 359, 359, 359, 359, 399, 399, 274, 274,
	214, 214, 365, 365, 365, 365, 366, 366, 366, 366,
	366, 369, 368, 367, 367, 367, 367, 367, 306, 306,
	306, 55, 55, 55, 242, 242, 241, 241, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 126, 126, 53, 53, 53, 158, 158, 50, 50,
	50, 54, 54, 49, 49, 49, 49, 49, 259, 259,
	257, 257, 219, 219, 312, 312, 312, 170, 170, 145,
	145, 145, 20, 22, 22, 16, 16, 16, 16, 16,
	16, 29, 29, 30, 30, 26, 26, 258, 258, 260,
	260, 78, 78, 82, 82, 88, 88, 125, 125, 125,
	125, 125, 125, 125, 33, 33, 33, 33, 44, 44,
	44, 44, 86, 402, 402, 402, 87, 87, 401, 401,
	165, 165, 165, 165, 167, 167, 271, 271, 272, 272,
	403, 403, 273, 273, 273, 160, 159, 161, 161, 48,
	48, 48, 154, 154, 155, 155, 156, 156, 157, 157,
	404, 404, 75, 75, 75, 128, 128, 194, 194, 268,
	268, 268, 215, 215, 175, 175, 270, 270, 269, 269,
	269, 240, 240, 240, 127, 127, 225, 225, 233, 233,
	234, 234, 318, 318, 235, 85, 85, 137, 137, 135,
	135, 135, 135, 135, 135, 136, 136, 136, 138, 138,
	138, 138, 138, 138, 138, 141, 141, 141, 141, 142,
	142, 142, 140, 140, 376, 376, 376, 378, 378, 379,
	375, 375, 377, 377, 400, 400, 244, 244, 244, 212,
	213, 211, 211, 217, 217, 216, 218, 218, 311, 311,
	311, 238, 238, 238, 238, 263, 263, 261, 261, 262,
	262, 264, 264, 265, 265, 265, 266, 266, 267, 267,
	237, 237, 291, 291, 139, 139, 139, 224, 224, 224,
	226, 226, 281, 281, 281, 282, 282, 280, 280, 280,
	280, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	392, 392, 392, 393, 393, 309, 309, 314, 314, 314,
	314, 314, 314, 307, 307, 308, 308, 319, 320, 320,
	247, 247, 247, 247, 245, 245, 246, 246, 315, 315,
	315, 315, 239, 239, 316, 316, 316, 277, 277, 323,
	323, 323, 338, 338, 223, 223, 223, 333, 333, 324,
	324, 324, 324, 324, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 327, 327, 327, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 337, 337, 337, 337,
	337, 328, 328, 334, 335, 329, 330, 336, 336, 336,
	336, 340, 340, 331, 331, 331, 331, 331, 331, 331,
	332, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 255, 255, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 285, 285, 285, 285, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	370, 370, 370, 370, 370, 370, 370, 370, 373, 373,
	374, 374, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 380, 380, 381, 381, 383, 383,
	384, 384, 385, 386, 386, 386, 387, 388, 388, 382,
	382, 389, 389, 389, 390, 390, 391, 391, 391, 391,
	391, 297, 297, 298, 299, 305, 305, 305, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 168, 168, 168, 168, 168, 230,
	230, 229, 229, 294, 294, 292, 292, 296, 296, 248,
	248, 339, 339, 339, 339, 339, 339, 339, 249, 249,
	249, 256, 250, 250, 251, 251, 251, 251, 251, 288,
	289, 252, 252, 252, 290, 290, 300, 304, 304, 303,
	302, 302, 301, 301, 278, 278, 279, 279, 236, 236,
	405, 405, 232, 232, 317, 317, 317, 317, 196, 196,
	227, 227, 195, 195, 190, 190, 190, 190, 220, 220,
	221, 221, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 341, 341, 341, 342, 343, 293, 185,
	184, 172, 173, 183, 182, 181, 171, 174, 178, 179,
	180, 176, 177, 188, 187, 186, 321, 191, 191, 192,
	192, 192, 193, 193, 193, 193, 169, 169, 189, 189,
	189, 162, 162, 162, 163, 163, 164, 164, 350, 350,
	348, 348, 348, 349, 349, 349, 349, 347, 347, 347,
	347, 347, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 0, 1, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 1, 3, 4, 6, 1, 3, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 6, 5, 5, 7, 7, 7, 10,
	7, 4, 12, 4, 12, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 1, 2, 1, 1, 3, 1, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 2, 0,
	7, 2, 5, 6, 2, 1, 12, 12, 2, 1,
	1, 1, 3, 3, 0, 3, 1, 3, 1, 1,
	3, 2, 5, 0, 5, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 6, 6, 1, 1, 1, 2,
	1, 2, 1, 1, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 3, 1, 2, 1, 2, 7,
	3, 8, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 1, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	3, 5, 3, 3, 5, 3, 1, 3, 2, 2,
	5, 3, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 3, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 4, 7, 2, 6, 4, 7, 2, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 2, 1, 2, 2, 3, 2, 4, 3, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	3, 1, 1, 3, 5, 4, 6, 4, 3, 0,
	1, 3, 2, 4, 2, 4, 1, 6, 6, 3,
	5, 3, 2, 6, 3, 3, 4, 4, 3, 3,
	1, 3, 2, 1, 3, 1, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 5,
	3, 3, 3, 3, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 6, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 2, 3, 3,
	3, 2, 3, 5, 4, 6, 4, 5, 6, 5,
	1, 0, 2, 3, 3, 3, 6, 4, 2, 3,
	4, 2, 3, 3, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 2, 3, 2, 3, 7,
	7, 8, 10, 7, 4, 5, 5, 5, 5, 2,
	0, 2, 0, 3, 2, 8, 11, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 2, 1, 0, 1, 0, 9, 9, 3,
	1, 3, 7, 1, 3, 11, 3, 2, 0, 3,
	1, 2, 2, 3, 2, 6, 2, 1, 1, 2,
	4, 2, 5, 5, 5, 2, 8, 9, 6, 5,
	3, 1, 4, 7, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 7, 3, 1, 0, 1, 2, 2, 1,
	2, 3, 2, 2, 3, 2, 2, 2, 2, 2,
	3, 4, 2, 4, 7, 3, 3, 0, 3, 6,
	3, 6, 3, 13, 16, 9, 12, 4, 2, 0,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 3, 2, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 0, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 0, 1, 3,
	1, 0, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 1, 3, 1, 3, 8, 5, 4, 3,
	0, 2, 2, 0, 10, 3, 2, 0, 1, 3,
	1, 1, 3, 3, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 8, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	5, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 6, 3, 3, 3, 1, 5, 5,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 2, 3, 0, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 5, 2, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 1, 1, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 8, 6, 6, 4, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 5, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 1, 2,
	1, 0, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 3, 1, 1, 5, 3, 1, 1, 3,
	1, 0, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 7, 1, 7, 5, 3, 1, 1, 1, 3,
	5, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 409, -4, -32, -34, -45, -43,
	-46, -73, -57, -58, -59, -72, -68, -74, -75, -76,
	-77, -69, -83, -82, -84, -88, -37, -85, -78, -79,
	-89, -97, -125, -126, -127, -128, -5, -11, 25, 36,
	-35, -36, 50, 76, 64, -53, -50, -47, -56, 78,
	99, -377, 103, -60, -63, -65, 107, 114, 119, 142,
	151, 247, 254, 275, 277, 279, 288, -39, -38, 115,
	-135, -137, 273, -80, -81, -90, -91, -92, -93, -129,
	306, -98, -99, -100, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, 309, -33, -44, -87,
	-86, 351, -6, -7, -8, -9, -10, -12, -22, -48,
	-49, -51, -52, -54, -55, -376, -61, -62, -64, -66,
	-67, -138, -136, 406, 274, 360, 37, 318, 65, 110,
	283, 20, -14, -15, -18, -17, -19, -16, -23, -25,
	-27, -24, -26, -28, -29, -30, -31, -20, -21, -13,
	377, 385, -141, -139, -140, -142, 295, 368, 331, 410,
	409, 409, 409, 409, 409, 409, 409, 409, 409, 409,
	409, 409, 409, 409, 409, 409, 409, 409, 409, 409,
	2, 331, 371, 296, 361, 92, 163, 259, 245, -394,
	2, -227, 331, 92, -190, -189, -162, 399, 4, -354,
	-356, 20, 21, 22, 23, 25, 35, 36, 37, 42,
	46, 49, 50, 51, 58, 63, 64, 65, 66, 67,
	72, 69, 70, 71, 74, 76, 77, 80, 81, 82,
	90, 91, 93, 95, 99, 101, 103, 106, 107, 109,
	114, 115, 118, 116, 117, 119, 129, 130, 135, 137,
	141, 143, 148, 149, 150, 151, 152, 153, 164, 167,
	169, 162, 178, 180, 181, 182, 188, 189, 190, 193,
	192, 197, 198, 201, 202, 205, 207, 210, 211, 214,
	212, 216, 217, 219, 218, 224, 226, 227, 229, 232,
	233, 236, 239, 242, 243, 244, 245, 246, 247, 248,
	250, 252, 254, 256, 257, 258, 259, 260, 262, 263,
	265, 266, 267, 268, 269, 273, 271, 272, 274, 275,
	276, 277, 279, 282, 283, 284, 286, 307, 308, 320,
	288, 289, 290, 291, 292, 293, 294, 302, 296, 297,
	303, 304, 306, 309, 311, 314, 317, 318, 319, 321,
	324, 326, 322, 316, 329, 330, 332, 333, 334, 335,
	336, 337, 338, 339, 346, 347, 351, 352, 353, 354,
	357, 358, 359, 360, 362, 365, 366, 367, 372, 378,
	379, 381, 382, 383, 30, 38, 39, 40, 41, 43,
	44, 47, 48, 54, 55, 56, 59, 94, 96, 97,
	113, 120, 121, 131, 132, 133, 144, 146, 154, 155,
	158, 168, 170, 171, 172, 173, 174, 176, 184, 185,
	195, 213, 223, 225, 237, 241, 251, 253, 261, 285,
	298, 299, 300, 301, 312, 313, 323, 327, 341, 342,
	343, 348, 349, 364, 368, 369, 409, 409, 2, 181,
	258, -186, -189, -162, 92, 230, 409, 409, 409, 2,
	331, 319, 296, 361, 281, 371, -257, 178, 92, 356,
	-162, 254, 24, 2, 101, 167, 359, 358, 24, 250,
	297, 333, 335, 2, 409, 409, 2, 371, 296, 331,
	163, 92, 361, 281, -180, 2, -162, -71, 2, 406,
	-70, -5, -47, -56, -60, -72, -68, -11, -32, -34,
	-53, -50, -57, -63, -65, -76, -75, -77, -79, -83,
	-82, -85, -90, -91, -97, -127, -128, 78, 25, 107,
	306, 115, -397, -222, 2, 24, -166, -162, 78, 142,
	295, 331, 2, 181, 2, -180, 2, -394, 2, 181,
	2, -397, -222, 23, 2, -162, 2, 292, 309, -167,
	2, 288, -162, 409, 409, 409, 409, 409, 409, 202,
	58, 285, 303, -95, 347, -94, 341, 290, -96, -346,
	2, 214, -162, 409, 409, 409, 409, 409, 409, 409,
	409, 409, 409, 409, 409, 409, 409, 409, 409, 409,
	409, 409, 409, 409, 409, 409, 2, -123, 303, 319,
	149, 36, 58, 24, 63, 93, 143, 163, 164, 189,
	73, 74, 257, 202, 182, -310, 117, 304, 332, 291,
	329, 347, 78, 362, 282, 336, 116, 4, 92, 214,
	305, 341, 67, 409, 409, 409, -400, 2, 331, 409,
	409, 409, 409, 409, 409, 409, 409, 409, 409, 409,
	-136, -138, -137, 409, 409, 409, 409, 409, -216, -217,
	355, 175, 112, 235, -135, -137, 2, -376, -123, 303,
	2, 58, 24, -344, 2, -283, 230, -285, 397, 398,
	392, 220, 384, -297, 98, 209, 208, -287, -300, 113,
	285, 406, -193, -286, 412, 9, -373, -137, 31, -298,
	-299, 52, -191, -162, 7, 8, 5, 6, -169, -325,
	-293, -332, 350, 122, 222, -370, -371, -192, 4, -354,
	-348, -326, -335, -330, -331, -333, 42, 48, 47, 338,
	213, 298, 299, 300, 301, 313, 364, 158, 40, 229,
	169, 176, 61, 84, 85, 83, 88, 89, 86, 305,
	361, 53, 30, 154, 223, 155, 59, -372, 106, 39,
	41, 43, 44, 54, 55, 94, 96, 97, 120, 121,
	131, 132, 133, 144, 168, 170, 171, 172, 173, 174,
	184, 185, 195, 225, 241, 251, 261, 312, 323, 327,
	341, 342, 343, 348, 349, 369, -355, -336, 79, 123,
	140, 166, 156, 179, 183, 196, 199, 215, 238, 240,
	280, 310, -401, 2, 347, 347, 2, -401, 2, -401,
	2, -165, 2, 347, 344, -402, 347, 380, -378, 262,
	-379, -180, -378, 409, 409, 411, 409, -211, -212, -213,
	2, 24, 104, 406, 2, -313, 2, 404, -315, -169,
	-372, -137, -314, 406, -186, 231, -192, 84, 85, 88,
	89, 4, -162, 61, 209, 208, -3, 2, -315, 154,
	-186, 2, -315, 154, 2, -187, 154, -315, -189, 2,
	-352, 154, -350, 9, -349, 5, 4, -354, -356, -355,
	2, -171, -162, 2, -195, 154, -186, -183, -347, 4,
	-354, -356, -355, -357, 24, 26, 27, 28, 29, 31,
	32, 33, 34, 45, 52, 53, 57, 60, 62, 73,
	78, 83, 84, 86, 85, 87, 88, 89, 98, 100,
	102, 104, 105, 108, 110, 112, 122, 124, 136, 138,
	139, 142, 145, 147, 157, 163, 165, 175, 177, 191,
	194, 200, 203, 204, 220, 221, 222, 228, 230, 231,
	234, 235, 249, 255, 264, 278, 281, 295, 305, 315,
	325, 328, 331, 340, 344, 345, 350, 355, 356, 361,
	363, 370, 371, 373, 374, 375, 376, 377, 380, -184,
	-347, 344, 411, -227, -220, -162, 408, -283, 2, -283,
	2, -214, 406, 408, 331, 62, 2, -186, 154, -176,
	2, -162, -187, 154, 2, -189, -352, 154, 2, -352,
	154, 2, -188, 2, -186, 163, 163, -171, 154, 2,
	-162, 24, 139, 2, 177, 2, 177, 2, -316, 2,
	-315, -228, 154, 2, -186, -228, 154, 2, -228, 154,
	2, -196, 154, 2, -195, -171, 154, 2, -353, 154,
	2, -352, -353, 154, 2, -253, 406, -322, 2, -321,
	-349, 368, 409, 409, 409, 409, 409, 409, 409, 409,
	409, 409, 409, 409, 409, 409, 409, 409, 409, 303,
	230, 344, 411, -186, -283, -295, 406, 139, -283, 230,
	139, 232, 2, 92, 331, 383, 24, -162, 2, 307,
	2, 406, -95, 56, 347, -272, 2, -273, -159, -160,
	-161, 180, 256, 260, 383, -344, 344, 389, 139, -344,
	-231, 408, -123, 2, 136, 2, 7, 2, -352, 2,
	307, 2, 257, 304, 58, 139, 2, 2, 230, -395,
	2, 139, 2, 139, 2, 139, 2, 139, 2, 139,
	2, 2, 257, 304, 2, 346, 190, 346, 2, 139,
	2, 139, 2, 5, 2, 180, 256, 320, 2, 331,
	371, 296, 2, 2, 139, 139, 383, 2, -239, -315,
	-216, -217, -238, -261, -262, 200, 124, 228, -244, 24,
	104, -244, -244, 46, 407, 407, -123, 307, 2, 10,
	11, 60, 35, 397, 398, 399, 400, 134, 401, 402,
	395, 396, 394, 387, 388, 391, 186, 187, 75, 390,
	389, 68, 206, 287, 125, 126, 127, 128, 270, 159,
	160, 161, 13, 14, 15, 28, 234, 199, 384, 156,
	310, 392, 16, 17, 18, 179, 38, 157, -168, -197,
	-283, -283, -283, -283, -283, 240, -236, -278, 404, -137,
	406, 406, -137, -283, -229, 406, -343, 7, -137, -292,
	404, -301, -283, 408, 406, 5, 406, 5, -380, 378,
	136, 406, 406, 406, 406, 406, 406, 406, 406, 406,
	406, 253, -340, 372, -340, -340, -327, 406, -327, 406,
	406, -328, 406, 406, 406, -327, 406, 406, 406, 379,
	379, 385, 406, 406, -271, -272, -271, 344, -167, 411,
	-378, -214, 406, -232, -317, -283, 399, -232, -232, 230,
	-229, -283, 79, -247, 183, 215, 140, 196, 280, 166,
	-343, -71, -280, 412, 406, -309, 385, -309, -137, -314,
	406, -313, 399, -186, 406, 408, -147, 271, -146, 22,
	25, 107, 366, 118, -204, 245, 113, 316, 337, 115,
	289, 271, 113, -241, -243, 32, 90, 217, 242, 49,
	152, 208, 209, 318, 113, 271, 377, 113, 115, 271,
	-149, 316, 337, 115, 289, 271, -148, -204, 113, 412,
	115, 226, -352, -190, 411, -347, 399, 139, -220, -347,
	-186, -191, -162, -192, 406, -214, 220, 230, -242, -241,
	220, -158, -375, 377, 220, 220, -214, -173, 154, 2,
	-163, -162, -173, 154, -375, 220, -316, -194, -186, -194,
	306, -180, 32, -151, 411, 51, 276, 113, -151, 113,
	-151, 113, -151, 411, 113, -151, 113, 411, 113, 113,
	-229, 407, 411, -394, -220, -166, 78, 406, 32, -294,
	-323, -324, -325, -334, -329, -332, 42, 48, 47, 338,
	213, 298, 299, 300, 301, 313, 364, 158, 40, 229,
	169, 4, 41, -336, 176, 168, 170, 171, 172, 173,
	174, 312, 39, 261, 132, 133, 131, 106, 97, 96,
	225, 44, 43, 94, 341, 342, 343, 184, 185, 55,
	54, 369, 323, -353, -394, -220, 136, -171, 2, -186,
	2, 69, 70, 383, -346, -229, 32, -272, 2, -403,
	411, 198, -199, 205, 219, 148, 231, 381, -351, 5,
	4, -293, -306, 98, 202, -332, 8, 398, -341, 7,
	397, -345, -344, -345, 82, 408, -347, 331, -346, 24,
	308, 2, -186, 281, -394, -396, 136, -186, -186, -186,
	-186, -186, 136, 2, 346, 2, 136, -162, -162, 198,
	-186, 2, -188, 2, -187, 2, 331, 163, 331, -151,
	411, -238, -262, -261, -264, -283, 24, -267, 130, 216,
	-283, -285, -136, -136, -136, -218, -311, -283, 255, 163,
	-346, -338, -323, -337, 266, 267, 265, 269, 268, -323,
	-185, -347, 341, -283, -283, -283, -283, -283, -283, -283,
	-283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
	-283, -283, -283, -283, -283, -283, -283, -283, -283, -283,
	-283, -283, -283, -283, -283, -283, -283, -283, 199, 156,
	310, 38, 157, -283, 344, -283, -283, -283, -283, 212,
	220, 222, 350, 122, 357, 104, 226, -405, 328, 34,
	-290, -137, 406, -305, 29, 315, 24, -297, 285, 406,
	-278, -283, -279, -230, -229, 407, 411, -230, -296, -292,
	-304, -303, 374, -347, 399, 407, -229, 370, 24, 104,
	399, 2, 7, -254, 382, 211, 95, 150, 210, -255,
	294, -381, 129, 145, 406, 407, 2, 407, 2, 407,
	2, 407, 2, -283, -283, -283, -283, -283, -229, -343,
	-248, 2, -339, -229, 4, 382, 211, 95, 150, 210,
	294, -248, 2, 7, -229, 2, -229, 2, -249, 2,
	-283, -229, -250, -284, -285, 397, 398, 392, 406, 285,
	-251, 2, -283, -230, 341, 341, 341, -283, 45, 194,
	345, -252, -283, 139, -229, -167, -379, 32, -229, -224,
	411, 139, 32, 4, -224, -224, 406, 407, 411, 183,
	183, -313, -247, 183, -245, 238, -245, -245, -392, 406,
	405, -309, -172, 404, 413, -347, -230, 2, -308, -307,
	32, -180, 236, -308, 407, -186, -347, 411, 344, -258,
	73, 62, -275, 154, 62, -358, -174, 73, -359, -162,
	57, 356, 255, 138, -258, 73, -258, 73, 73, 306,
	46, -315, 35, -85, 71, 139, 344, -315, -243, -323,
	90, 208, 209, 46, -342, -341, 398, -342, 46, -342,
	-342, -342, 377, -187, -315, 344, 246, -352, 71, 344,
	411, 35, -85, 71, 139, 344, -195, -172, 71, 331,
	-320, -319, 386, -162, 408, 321, 407, 408, 179, 179,
	408, -200, -201, -162, -276, -275, -360, -361, -358, 178,
	163, 356, 123, 32, 113, -220, 113, 246, 113, 113,
	32, 230, 220, 230, 220, -154, 334, 113, -277, 375,
	-268, -85, 406, 98, 32, -268, -233, -234, -318, -235,
	-174, 406, -180, -186, -228, -228, -228, -195, -196, -171,
	-352, -353, -353, 407, -71, -321, 344, 377, 363, -201,
	-70, 25, 78, 107, 407, 411, -223, 31, 404, -254,
	406, -340, 406, -133, -319, 377, 139, -222, -320, -320,
	136, 70, 389, 344, 407, 347, -273, -198, 260, 314,
	272, 302, 8, 7, 7, 411, -347, -186, -221, -220,
	-220, 303, -71, 136, -71, 408, -186, -195, -186, -315,
	-265, -341, 406, -266, 285, 286, 411, -145, 33, 102,
	188, -186, 383, -283, -283, 344, -405, 328, -290, -283,
	212, 222, 350, 122, 357, 104, 226, 139, 406, -284,
	-284, -229, -283, 406, -229, 405, 415, 407, -283, 405,
	405, 411, -302, -303, 108, -283, 408, -217, 411, -216,
	-283, -229, -229, 407, 407, 344, 344, 344, 344, 406,
	-386, 239, 406, 406, -283, 32, 411, 411, 411, 411,
	407, 407, 411, 407, 139, 407, 407, 407, 407, 407,
	-256, 249, 407, 10, 11, 397, 398, 399, 400, 134,
	401, 402, 395, 396, 394, 387, 388, 389, 68, 206,
	287, 13, 14, 15, 179, 157, -284, -284, -284, -229,
	406, 407, -288, -289, 139, 136, 383, 383, 383, 32,
	-252, -252, -252, 407, 139, -229, 406, 407, -277, -317,
	-226, 2, -313, -182, -347, -277, -277, -229, -283, -313,
	-313, -246, 363, 230, 183, -313, -307, 407, -393, -343,
	-309, -308, -343, -282, -281, 137, 218, 407, -180, -214,
	-309, 407, 408, -146, -186, -174, -181, -162, 220, -275,
	154, -153, 220, -323, -181, 406, 406, 188, 188, -174,
	-181, 154, -174, 154, -181, -181, -398, 260, 227, 201,
	259, 221, -147, 271, -85, 383, 406, -188, 271, -191,
	-342, -342, -241, 271, -187, -352, 377, 383, -171, -148,
	-85, 383, 406, -172, -149, 271, 383, -186, -130, 153,
	226, 399, -347, -124, 5, 222, -124, -347, 407, 411,
	163, -173, 163, -179, -163, -85, -186, 139, -187, -352,
	-352, -352, -85, -186, 113, -186, 113, -155, 109, -404,
	389, -171, -217, -283, -240, -270, 278, 230, -215, -175,
	-174, 368, -180, -240, -225, 411, 139, 389, 408, -215,
	-151, -151, -151, -151, -151, -220, 23, -352, 407, -323,
	404, 405, 7, 7, 406, -343, -133, -132, 233, -131,
	-162, 5, -220, 139, -40, 377, 259, 92, 331, 245,
	163, -344, -344, -272, 354, 66, 260, -344, -396, 303,
	-71, -162, -266, -283, -311, -186, 412, -283, -283, -284,
	-284, 139, 406, -283, -294, 28, 28, 407, -230, 411,
	-279, -283, 407, -292, 110, -283, 340, -347, 399, 407,
	370, -217, -217, -217, 5, 211, 150, 210, -255, 210,
	-255, -255, 7, -387, -177, 406, -162, 375, -216, 407,
	-338, -323, -283, -283, -283, -343, -283, -288, -283, -338,
	-323, -284, -284, -284, -284, -284, -284, -284, -284, -284,
	-284, -284, -284, -284, -284, -284, -284, -284, -284, -284,
	104, 220, 226, -284, 411, -230, -289, -288, -283, -283,
	-323, 407, 407, 407, -229, -70, -237, 145, -320, 411,
	-237, -237, 407, -246, 406, -283, -313, 405, 407, 411,
	-308, 405, 411, 414, 389, -309, -214, -307, -347, 344,
	344, 113, 220, 365, -362, -359, -283, -219, -312, -174,
	-374, 406, -162, -370, -371, -169, 406, 406, -144, 107,
	306, -260, 113, -151, 113, -151, 381, 406, 406, 344,
	-258, 73, -286, -169, -162, -229, 344, 344, 246, -286,
	-286, -229, 344, -286, 115, -133, 139, 330, 408, -202,
	162, -276, -163, 406, -173, 406, 406, -214, -186, -242,
	-158, 406, -172, 406, -172, -156, 193, -404, -350, -375,
	-263, -261, -240, -232, 221, 72, 407, 411, 408, -277,
	-234, -226, -283, 2, 407, 232, -134, 80, -134, 7,
	405, 407, -343, 407, 411, 406, 389, 389, -220, 233,
	-183, -171, -186, -184, -195, 231, 407, -145, -172, 28,
	28, -283, -294, 407, -283, -283, 407, -283, 405, -283,
	408, 5, -283, 407, 407, 407, 407, -388, -162, -283,
	407, 407, 407, 411, 407, 407, 407, -289, 139, 104,
	226, 406, -283, 407, 407, 407, -291, 147, 46, -313,
	-291, -291, -220, -280, -343, -281, -172, 404, -308, 408,
	-174, -181, -275, 113, -363, 73, -364, 60, 123, 78,
	220, 222, 356, 255, 57, 98, 264, 32, 407, 407,
	411, -170, 60, -170, -283, 406, -219, -220, 220, 98,
	220, 98, 91, 352, -174, -181, -220, -220, -186, -174,
	-181, 406, 407, -188, -187, -352, 407, -172, 71, -353,
	341, -347, -203, -204, 157, 406, -219, 406, -220, -200,
	32, -219, 230, -219, 230, -157, 192, -404, -350, -154,
	-240, -269, 406, 230, -85, -175, 2, -217, 389, 91,
	91, 405, 407, -131, -132, -352, -352, -41, -42, 163,
	73, 248, -206, -205, 245, 226, -145, -283, -283, 407,
	407, -347, 399, -217, -382, 245, 407, -283, -284, 139,
	406, -294, 407, -383, 376, -283, -229, -383, -383, 407,
	-309, -343, -275, -181, -185, -178, -162, 123, 154, 222,
	188, 406, -284, -186, 406, 2, -274, -399, 77, 326,
	-312, -145, -185, -145, 407, -229, 407, 407, 222, 222,
	-283, -323, -151, -151, 407, 407, 344, 344, -229, 344,
	344, 383, -286, 243, -219, 407, -219, 407, 407, -85,
	407, -186, 407, -186, -404, -350, -155, 105, -220, 73,
	-263, -290, 406, 406, 407, 411, 24, 406, 24, 406,
	-184, 331, 407, -217, 46, 407, -284, -294, 407, -384,
	-385, -177, -308, 405, -364, -178, 220, -283, -164, 406,
	-283, -202, 406, -170, -217, 264, -150, 60, 406, 406,
	-174, -181, -217, 406, 406, -286, -186, 407, -274, 407,
	-202, -274, 406, 406, -350, -156, 358, 221, 407, -181,
	-240, -353, -353, -42, -220, -220, -186, -389, 259, 286,
	-229, 407, 411, 32, 113, 407, -365, 207, -162, 407,
	-203, -220, -145, 407, -186, -143, 363, -185, -208, -207,
	-205, -210, -209, -205, 407, -229, -229, 406, -202, -274,
	-203, -202, -219, -219, -157, 306, -277, 407, 407, 407,
	407, 407, -390, -391, 38, 353, 82, -283, -390, -385,
	-387, 123, -366, -369, -368, 230, 140, 244, 311, 407,
	325, 373, 407, -214, -283, 407, 411, 368, 407, 411,
	368, 407, 407, -220, -203, -202, -203, 407, 407, -233,
	-133, -133, -391, 252, 135, 285, 252, 135, -178, -368,
	230, -369, 230, 358, 101, -365, -207, 157, -209, 139,
	407, -203, -259, 363, -274, -277, 28, -367, 217, 276,
	51, 306, -367, -366, 406, 406, -152, 51, 276, 141,
	-202, -391, 21, 222, 98, -229, -229, -203, 407, 407,
	-259, -203, 344, 406, -229, 407, -203,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 43, 45,
	46, 47, 48, 49, 51, 53, 56, 57, 0, 0,
	175, 177, 0, 0, 0, 188, 190, 192, 193, -2,
	0, 0, 0, 219, 220, 222, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 361, 362, 0,
	815, -2, 0, 340, 342, 351, 353, 355, 357, 358,
	0, 420, 422, 424, 426, 428, 430, 432, 434, 436,
	438, 440, 442, 444, 446, 448, 450, 452, 454, 456,
	458, 460, 461, 463, 465, 467, -2, 727, 729, 731,
	733, -2, 60, 62, 64, 66, 68, 70, 85, 196,
	198, 200, 202, 205, 207, 852, 225, 227, 229, 231,
	233, -2, 864, 0, 0, 0, -2, 0, -2, -2,
	-2, 745, 71, 72, 73, 74, 75, 76, 91, 92,
	93, 94, 95, 96, 78, 80, 81, 87, 88, 90,
	0, 0, 828, 830, 832, 834, -2, 0, 0, -2,
	7, 13, 15, 17, 20, 22, 24, 26, 28, 30,
	32, 34, 36, 38, 40, 44, 50, 52, 54, 58,
	59, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 329, 0, 1463, 1350, 1354, 1408, 1357, 1411, 1412,
	1413, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440,
	1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
	1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460,
	1461, 1462, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
	1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481,
	1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491,
	1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501,
	1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511,
	1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521,
	1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531,
	1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541,
	1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551,
	1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
	1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571,
	1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581,
	1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591,
	1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601,
	1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611,
	1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621,
	1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631,
	1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641,
	1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651,
	1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661,
	1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671,
	1672, 1673, 1674, 1675, 1676, 1677, 176, 178, 179, 0,
	0, 631, 1395, 1408, 1463, 0, 189, 191, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 690,
	316, 1534, 318, 320, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 218, 221, 223, 224, 0, 0, 0,
	0, 0, 0, 0, 315, 313, 1390, 258, 259, 0,
	298, 299, 300, 301, 302, 303, 305, 262, 264, 266,
	267, 269, 271, 273, 275, 277, 279, 281, 283, 284,
	286, 288, 289, 291, 293, 294, 296, 691, 0, 0,
	0, 0, 0, 333, 324, 332, 334, 336, 337, 338,
	339, 0, 158, 0, 564, 311, 309, 0, 154, 0,
	724, 0, 333, 1435, 328, 725, 726, 0, 0, 721,
	722, 1562, 755, 341, 343, 352, 354, 356, 359, -2,
	-2, 1661, -2, 382, -2, 390, 1670, 1564, 393, 0,
	395, -2, 398, 421, 423, 425, 427, 429, 431, 433,
	435, 437, 439, 441, 443, 445, 447, 449, 451, 453,
	455, 457, 459, 462, 464, 466, 468, 469, 0, 0,
	0, 0, 0, 473, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, 0, -2, -2, -2,
	0, 0, 0, -2, -2, 0, 0, 472, 474, 475,
	476, 0, 520, 728, 730, 732, 0, 672, 854, 61,
	63, 65, 67, 69, 197, 199, 201, 203, 206, 208,
	-2, 826, 827, 226, 228, 230, 232, 234, -2, 0,
	858, 858, 858, 0, 0, 827, 825, 0, 344, 0,
	346, 0, 473, 349, 350, 402, 403, 1057, 0, 0,
	0, 0, 0, 0, 1133, -2, -2, 1165, 1167, 1632,
	1661, 0, 1169, 1170, 0, 1172, 1174, 1175, 0, 1178,
	1179, 1333, 1402, 1397, 1362, 1363, 1364, 1365, 0, 0,
	1368, 0, 1370, 1371, 1372, 1235, 1189, -2, -2, -2,
	1406, 974, 975, 976, 977, 978, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1678, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
	1200, 0, 1616, 1640, 1654, 1641, 1628, 1207, 1469, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1633, 1634,
	-2, -2, -2, 1638, -2, -2, -2, -2, -2, -2,
	-2, -2, 1652, -2, 1657, 1658, -2, -2, -2, 1669,
	-2, -2, -2, 1673, 1674, -2, 1422, 1026, 1679, 1680,
	1681, 1682, 1683, 1684, 1685, 1686, 1687, 1690, 1691, 1692,
	1693, 1694, 757, 735, 748, 757, 737, 738, 739, 740,
	741, 746, 747, 750, 0, 742, 743, 744, 844, 1540,
	847, 631, 845, 829, 831, 0, 833, 0, 0, 0,
	838, 861, 859, 0, 895, 842, 843, 853, 910, 0,
	926, 926, 917, 0, 948, 0, 1407, 0, 0, 0,
	0, -2, 1408, 1678, 1688, 1689, 2, 77, 0, 1640,
	948, 79, 0, 1640, 82, 0, 1640, 0, -2, 86,
	0, 1640, 159, 160, 1418, 1419, 1423, 1424, 1425, 1426,
	89, 0, 1386, 97, 0, 1640, 1353, 0, 1383, 1427,
	1428, 1429, 1430, 1431, 1695, 1696, 1697, 1698, 1699, 1700,
	1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710,
	1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720,
	1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730,
	1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740,
	1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 0,
	1380, 0, 0, 330, 331, 1358, 0, 180, 181, 182,
	183, 0, 0, 0, 0, 0, 204, 631, 1640, 0,
	210, 1391, 655, 1640, 653, 1394, -2, 1640, 675, 678,
	1640, 680, 631, 682, 1393, -2, 1415, 851, 1640, 771,
	317, 319, 0, 212, 0, 784, 0, 786, 0, 805,
	954, 143, 1640, 237, 256, 143, 1640, 240, 143, 1640,
	243, 143, 1640, 246, 1348, 143, 1640, 249, 250, 1640,
	252, 161, 253, 1640, 255, 312, 0, 0, -2, 306,
	1396, -2, 304, 263, 265, 268, 270, 272, 274, 276,
	278, 280, 282, 285, 287, 290, 292, 295, 297, -2,
	0, 0, 0, 0, 563, 0, 0, 0, 723, 0,
	0, 0, 363, 0, 0, 0, 0, 754, 360, 0,
	379, 0, 381, 1627, -2, -2, 385, 758, 762, 763,
	764, 0, 0, 0, 0, 392, 0, 0, 0, 396,
	399, 0, 470, 471, 0, 480, 481, 482, 483, 484,
	0, 487, 509, 524, 0, 0, 491, 493, 0, 562,
	496, 0, 498, 0, 500, 0, 502, 0, 504, 0,
	506, 508, 510, 525, 512, 0, 0, 0, 523, 0,
	529, 0, 532, 533, 534, 0, 536, 537, 538, 0,
	0, 0, 546, 548, 0, 0, 477, 478, 143, 952,
	-2, 0, 821, 873, 874, 0, 0, 0, 0, 856,
	857, 0, 0, 0, 817, 818, 345, 0, 348, 0,
	0, 0, 0, 1268, 1269, 1270, 1271, 1272, 1273, 1276,
	1277, 1274, 1275, 1278, 1279, 0, 0, 0, 0, 0,
	1280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1281, 1282, 1283, 0, 0, 1285, 0, 1287,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 1284,
	1062, 1063, 1064, 1099, 1100, 0, 1166, 1338, 1337, 1168,
	0, 1290, -2, 1291, 0, 0, 1171, 1377, 1176, 1177,
	1290, 0, 1332, 0, 0, 1367, 0, 1054, 1237, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1010, 1024, 1031, 1028, 1027, 1012, 0, 1011, 0,
	0, 1009, 0, 0, 0, 1013, 0, 1313, -2, 0,
	0, 0, 0, 0, 734, -2, 736, 0, 752, 0,
	846, 0, 0, 899, 1342, 1346, 1347, 899, 899, 0,
	0, 1291, 0, 0, 0, 0, 945, 945, 945, 943,
	920, 0, 926, 0, -2, 936, 0, 936, -2, 917,
	0, 0, 949, 950, 0, 0, 98, 718, 115, 0,
	718, 718, 0, 0, 133, 0, 0, 0, 0, 0,
	111, 0, 0, 83, 656, 0, 659, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 0, 0, 0, 113, 0, 136, 138, 0, 0,
	0, 0, 939, 1351, 0, 1409, 1356, 0, 0, 1409,
	0, 0, 1397, 1398, 570, 0, 0, 0, 651, 654,
	0, 673, 0, 850, 0, 0, 0, 0, 1640, 687,
	1382, 1414, 0, 1640, 773, 0, 958, 0, 787, 0,
	0, 955, 0, 235, 0, 141, 142, 0, 238, 0,
	241, 0, 244, 0, 0, 247, 0, 0, 0, 0,
	0, 853, 0, 0, 322, 335, 0, 0, 853, 0,
	1293, 966, 969, 970, 971, 1054, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 1032, 1026, 1040, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1022, 0, 997, 997,
	997, 1014, 1015, 1033, 1034, 1036, 1038, 967, 968, 1032,
	1032, 1029, 1030, 173, 0, 326, 0, 939, 365, 939,
	367, 0, 554, 0, 0, 0, 0, -2, 387, 0,
	760, 0, 765, 411, 412, 413, 767, 768, 391, 414,
	415, 416, 417, 418, 419, 0, 648, 0, 650, 1373,
	0, 388, 404, 389, 394, 0, 400, 0, 485, 486,
	488, 489, 490, 1361, 559, 495, 0, 497, 499, 501,
	503, 505, 853, 514, 0, 516, 853, 527, 530, 535,
	539, 540, 541, 542, 543, 544, 0, 0, 0, 671,
	0, 824, 871, 872, 877, 881, 882, 885, 888, 889,
	879, 1057, 839, 840, 841, 865, 866, 701, 0, 0,
	347, 1058, 962, 963, 1016, 1017, 1018, 1019, 1020, 1059,
	1060, 1379, 0, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, -2, -2, -2, -2, -2, -2, -2,
	-2, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, 1093, -2, -2, -2, 1097, 1098, -2, 1286, 1288,
	0, 1341, 0, -2, 0, -2, -2, -2, -2, 1111,
	0, 1113, 1116, 1118, 1120, 0, 0, 0, 0, 1340,
	1130, 1324, 0, 0, 1265, 1266, 1267, 1115, 0, 0,
	1339, 1336, 0, 0, 1289, 1173, 0, 0, 0, 1297,
	1331, 1327, 0, 1399, 1405, 1180, 864, 0, 0, 0,
	0, 1187, 0, 1378, 1041, 1042, 1043, 1044, 1045, 1046,
	1055, 1245, 0, 0, 0, 1208, 1209, 1210, 1211, 1212,
	1213, 1214, 1215, 0, 0, 0, 0, 0, 0, 0,
	0, 1217, 0, 1300, -2, -2, -2, -2, -2, -2,
	-2, 0, 1219, 0, 0, 1231, 0, 1233, 0, 1221,
	1291, 1310, 0, 0, 1136, 0, 0, 0, 0, 1661,
	0, 1224, 1291, 1318, 0, 0, 0, 0, 0, 0,
	0, 0, 1291, 0, 1323, 751, 848, 0, 0, 958,
	0, 0, 0, 1345, 958, 958, 0, 894, 0, 0,
	0, 0, 0, 0, 940, 944, 941, 942, 0, 0,
	926, 936, 907, 0, 0, 1381, 0, 914, 915, 935,
	0, 631, 925, 916, -2, 0, -2, 0, 0, 0,
	0, 717, 117, 1640, 0, 145, 0, 0, 621, 1387,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 657, 658,
	660, 666, 668, 0, 662, 1376, 0, 663, 0, 665,
	667, 669, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 1352, 0, 0,
	164, 938, 0, 1359, 0, 174, 630, 0, 0, 0,
	0, 0, 569, -2, 571, 573, 574, 575, 576, 1494,
	1415, 0, 1415, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 775, 781, 0, 864, 0,
	803, 789, 0, 0, 0, 803, 807, 808, 810, 811,
	0, 0, 956, 257, 143, 143, 143, 1349, 143, 143,
	162, 251, 254, 314, 260, 307, 0, 0, 0, 0,
	308, 0, 0, 0, 310, 0, 959, 961, 0, 972,
	0, 1024, 0, 152, 173, 0, 0, 0, 364, 369,
	0, 555, 0, 0, 380, 0, 759, 766, 0, 408,
	0, 410, 649, 1375, 1374, 0, 401, 479, 562, 1360,
	561, 513, 517, 853, 519, 0, 556, 557, 558, 953,
	0, 883, 0, 880, 886, 887, 0, 868, 699, 700,
	0, 0, 0, -2, -2, 0, 0, 0, 1131, -2,
	1112, 1114, 1117, 1119, 1121, 0, 0, 0, 0, 0,
	0, 0, 1132, 1290, 0, 1334, 1337, -2, 1292, 1295,
	1296, 0, 0, 1328, 0, 0, 0, 0, 0, 863,
	864, 864, 864, 1186, 0, 0, 0, 0, 0, 0,
	1188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1206, 995, 0, 1216, 0, 1218, 1021, 1230, 1232, 1220,
	0, 0, 1222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1139, 1140, 1141, 0,
	1290, 1223, 1316, 1317, 0, 0, 1035, 1037, 1039, 0,
	0, 0, 0, 1229, 0, 1322, 853, 896, 891, 1343,
	939, 898, 900, 1344, 1384, 891, 891, 0, 1292, 928,
	0, 930, 0, 0, 0, 932, 0, 921, 0, 923,
	936, 912, 0, 0, 905, 0, 904, 926, 631, 934,
	0, 951, 0, 116, 705, 0, 0, 1385, 0, 119,
	1640, 127, 0, 598, 0, 0, 0, 0, 0, 720,
	128, 1640, 143, 1640, 143, 129, 132, 0, 135, 0,
	0, 589, 99, 718, 102, 0, 0, 711, 0, 661,
	664, 670, 84, 0, 713, 703, 0, 0, 702, 137,
	103, 0, 0, 715, 101, 0, 0, 0, 173, 0,
	0, 1355, 1410, 184, 186, 187, 185, 1399, 578, 0,
	1415, 0, 1415, 0, 1389, 567, 631, 0, 655, 676,
	-2, 679, 681, 0, 0, 0, 0, 777, 781, 0,
	780, 851, 876, 957, 782, 803, 0, 0, 0, 792,
	794, 791, 788, 785, 958, 0, 0, 0, 0, 0,
	236, 239, 242, 245, 248, 321, 0, 0, 0, 1294,
	0, 964, 0, 0, 0, 0, 153, 171, 1522, 169,
	166, 168, 325, 0, 366, 0, 0, 0, 0, 0,
	0, 377, 378, -2, 406, 407, 409, 405, 494, 515,
	518, 526, 0, 0, 867, 701, 0, 1061, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 1325, 0, 0,
	0, 1336, -2, 1298, 1326, 1330, 0, 1400, 1404, 1181,
	0, 0, 0, 0, 1369, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 0, 1243, 1244, 1248, 1392, 0, 0, 1192,
	0, 0, 0, 0, 0, 0, 1299, 1309, 1311, 1137,
	1138, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, -2, -2, -2, 1155, 1156, 1157, -2, -2, -2,
	0, 0, 0, 1312, 0, 0, 1314, 1315, 1319, 1320,
	0, 1226, 1227, 1228, 1321, 0, 893, 0, 897, 0,
	893, 893, 860, 929, 0, 947, 931, 910, 922, 0,
	919, 908, 0, 909, 0, 936, 933, 918, -2, 0,
	0, 0, 0, 144, 596, 620, 0, 0, 692, 698,
	698, 0, 1387, 1190, 1191, 0, 0, 0, 121, 0,
	0, 0, 0, 125, 0, 131, 134, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 107,
	110, 0, 0, 106, 0, 150, 0, 0, 0, 586,
	0, 572, 0, 0, 0, 0, 570, 0, 209, 652,
	674, 0, 0, 0, 0, 779, 781, 0, 772, 773,
	803, 875, 783, 801, 802, 800, 0, 0, 0, 864,
	809, 806, 812, 813, 0, 323, 0, 155, 0, 0,
	965, 973, 0, 1025, 0, 0, 0, 0, 327, 0,
	549, 550, 584, 0, 553, 878, 884, 869, 701, 0,
	0, -2, 0, 1124, -2, -2, 1261, 1292, 1335, 1329,
	0, 1366, 864, 1182, 1184, 1185, 1056, 1250, 1247, 0,
	1234, 1201, 1202, 0, 1204, 1205, 996, 1308, 0, 0,
	0, 0, 1292, 1263, 1225, 849, 1239, 0, 0, 901,
	1239, 1239, 0, 926, 924, 906, 902, 0, 913, 0,
	707, 709, 118, 0, 597, 0, 600, 0, 0, 0,
	0, 607, 608, 0, 0, 0, 0, 0, 622, 629,
	0, 701, 0, 701, 0, 0, 0, 0, 0, 140,
	0, 0, 719, 0, 143, 143, 0, 0, 706, 0,
	0, 0, 0, 712, 714, 704, 0, 716, 0, 163,
	0, 1400, 565, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 769, 781, 0, 774, 775,
	211, 0, 0, 0, 790, 793, 795, 876, 0, 0,
	0, 960, 1023, 170, 0, 165, 167, 368, 370, 0,
	0, 376, 551, 583, 0, 0, 870, -2, -2, 1125,
	1262, 1401, 1403, 0, 864, 0, 1236, 0, -2, 0,
	0, 0, 1264, 835, 0, 892, 890, 836, 837, 946,
	936, 0, 120, 0, 601, 602, 1388, 604, 0, 606,
	609, 0, 611, 1417, 0, 615, 578, 0, 626, 627,
	693, 694, 697, 695, 698, 864, 624, 0, 122, 123,
	139, 147, 124, 130, 0, 0, 0, 0, 864, 0,
	0, 0, 937, 0, 0, 629, 0, 619, 578, 568,
	629, 0, 685, 0, 0, 776, 777, 0, 0, 0,
	803, 814, 0, 0, 172, 0, 372, 0, 374, 0,
	582, 0, 1183, 1253, 0, 1203, -2, 0, 1163, 1238,
	1240, 0, 911, 903, 599, 603, 0, 0, 635, 0,
	0, 586, 0, 701, 0, 0, 149, 0, 0, 0,
	708, 710, 0, 0, 0, 109, 0, 618, 578, 629,
	586, 578, 0, 0, 778, 779, 0, 797, 958, 799,
	804, 0, 0, 371, 0, 0, 552, 0, 0, 0,
	1249, 1164, 0, 0, 0, 610, 640, 0, 0, 0,
	623, 0, 696, 1181, 631, 126, 0, 146, 0, 590,
	0, 0, 593, 0, 0, 0, 0, 0, 586, 578,
	566, 586, 0, 0, 770, 0, 798, 173, 173, 373,
	375, 1246, 1251, 1254, -2, 1600, 1460, 0, 1252, 1241,
	1242, 0, 612, 636, 637, 0, 632, 633, 634, 1416,
	613, 614, 628, 635, 148, 587, 0, 0, 588, 0,
	0, 112, 114, 0, 616, 586, 689, 629, 686, 958,
	156, 157, 0, 1256, 1257, 1258, 1259, 1260, 605, 638,
	0, 639, 0, 0, 0, 640, 591, 0, 594, 0,
	581, 617, 683, 0, 578, 796, 0, 641, 0, 644,
	645, 0, 642, 625, 0, 0, 577, 579, 580, 688,
	586, 1255, 643, 646, 647, 0, 0, 689, 586, 0,
	684, 592, 0, 0, 0, 586, 595,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 395, 3, 401, 396, 3,
	406, 407, 399, 397, 411, 398, 408, 400, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 415, 410,
	387, 389, 388, 391, 412, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 404, 3, 405, 402, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 413, 394, 414, 392,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 390,
	57730, 393, 57731, 403, 57732, 409, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:999
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1005
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1020
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1022
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1027
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1028
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1029
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1032
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1033
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1037
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1040
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1052
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1053
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1054
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1065
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1066
		{
			return helpWith(sqllex, "ALTER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1069
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1070
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1071
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1110
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1121
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1136
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1155
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1228
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1234
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1240
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1249
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1258
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1267
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1279
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1350
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1373
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1383
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1411
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = nil
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1479
		{
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1482
		{
			return unimplemented(sqllex, "alter using")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1483
		{
		}
	case 150:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.str = "CSV"
		}
	case 156:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1647
		{
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1663
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1664
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1665
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &tree.CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1676
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1687
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1691
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1695
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.str = ""
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			return helpWith(sqllex, "CREATE")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1722
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1724
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1741
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1762
		{
			return helpWith(sqllex, "DELETE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1773
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1774
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1785
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1786
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			return helpWith(sqllex, "DROP")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1790
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1791
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1792
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1809
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1824
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1839
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1862
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1885
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1900
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1959
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "DELETE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1964
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1965
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1967
		{
			return helpWith(sqllex, "INSERT")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1968
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1976
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1980
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1989
		{ /* SKIP DOC */
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 308:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "GRANT")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2158
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			return helpWith(sqllex, "RESET")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			return helpWith(sqllex, "RESET")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2214
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2228
		{
			return helpWith(sqllex, "USE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2232
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2233
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2235
		{ /* SKIP DOC */
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			return helpWith(sqllex, "USE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2237
		{
			return unimplemented(sqllex, "set local")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2253
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2271
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2297
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2301
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2305
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2410
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2430
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2436
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2441
		{
			return unimplemented(sqllex, "set from current")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2442
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2450
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2454
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = tree.Low
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = tree.Normal
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = tree.High
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2568
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2570
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2574
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2575
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2576
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2577
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2578
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2579
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2581
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2582
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2583
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2584
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2585
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2586
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2588
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2589
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2590
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2592
		{
			return helpWith(sqllex, "SHOW")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2601
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.str = "client_encoding"
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.str = "timezone"
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2616
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2631
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2642
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2650
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2661
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2678
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2683
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2694
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2705
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = &tree.ShowRoleGrants{Roles: sqlDollar[5].union.nameList(), Grantees: sqlDollar[6].union.nameList()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = &tree.ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2726
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2737
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2742
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2747
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2758
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2763
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2793
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2806
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2811
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = true
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = false
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2837
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				// Note: the schema name may be interpreted as database name,
				// see name_resolution.go.
				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2874
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2888
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2898
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2906
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2914
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2917
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2928
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2939
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2949
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2960
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2971
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2975
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2979
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2983
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2989
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2996
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3002
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3006
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3012
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3016
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3020
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3026
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 560:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &tree.PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3054
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3184
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropCascade
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3188
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropRestrict
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.str = ""
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 587:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 592:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 595:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3378
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3382
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 616:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3514
		{
			return unimplemented(sqllex, "match full")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3515
		{
			return unimplemented(sqllex, "match partial")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3516
		{
			return unimplemented(sqllex, "match simple")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3517
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3607
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 652:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3615
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3623
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3634
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3635
		{
			return unimplemented(sqllex, "create sequence CYCLE option")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3636
		{
			return unimplemented(sqllex, "create sequence CYCLE option")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3637
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3638
		{
			return unimplemented(sqllex, "create sequence CACHE option")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3639
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3641
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3643
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: nil}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3646
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: nil}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3649
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3651
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3663
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3678
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = nil
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3703
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3718
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[8].union.idxElems(),
				Storing:     sqlDollar[10].union.nameList(),
				Interleave:  sqlDollar[11].union.interleave(),
				PartitionBy: sqlDollar[12].union.partitionBy(),
				Inverted:    sqlDollar[13].union.bool(),
			}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
				PartitionBy: sqlDollar[15].union.partitionBy(),
				Inverted:    sqlDollar[16].union.bool(),
			}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3781
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = true
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = false
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = true
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = false
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3822
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3823
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3826
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3827
		{
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = tree.Descending
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 702:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3878
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3880
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = true
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = false
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3923
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3924
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3935
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = &tree.ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3946
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3957
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3961
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3962
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3963
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3982
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3987
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4000
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4005
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4014
		{
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4015
		{
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4016
		{
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4024
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4031
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4034
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4035
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.str = ""
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.str = ""
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4094
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4096
		{
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 769:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4160
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.str = ""
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.str = ""
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.str = ""
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.str = ""
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4203
		{
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4204
		{
		}
	case 782:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4230
		{
			return helpWith(sqllex, "INSERT")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4248
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4304
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4318
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4322
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4330
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 804:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4367
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4371
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4372
		{
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4396
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 814:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4495
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4530
		{
			return helpWith(sqllex, "SELECT")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4531
		{
			return helpWith(sqllex, "VALUES")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4532
		{
			return helpWith(sqllex, "TABLE")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4593
		{
			return helpWith(sqllex, "SELECT")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4637
		{
			return helpWith(sqllex, "TABLE")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4652
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4653
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 849:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4676
		{
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4683
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4687
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = true
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = false
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = false
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = true
		}
	case 860:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4716
		{
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4717
		{
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4764
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4788
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4840
		{
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4841
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4844
		{
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4845
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 894:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4903
		{
			return helpWith(sqllex, "VALUES")
		}
	case 896:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4905
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4920
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4942
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4958
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 911:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5020
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5040
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = nil
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = true
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = false
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5162
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5193
		{
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5194
		{
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5268
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5282
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5290
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5314
		{
			/* SKIP DOC */
			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 973:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5339
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5373
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5397
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5417
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5433
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5437
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5441
		{
			sqlVAL.union.val = nil
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5476
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5492
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5506
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5515
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5533
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5537
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5576
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5593
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5605
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5628
		{
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5629
		{
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5638
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5642
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5646
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5650
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = tree.Year
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5673
		{
			sqlVAL.union.val = tree.Month
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5677
		{
			sqlVAL.union.val = tree.Day
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5681
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5685
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5689
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = tree.Month
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5703
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5707
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5711
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = nil
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = tree.Second
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5732
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5760
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5767
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5780
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5800
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5812
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5828
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5832
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5876
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5880
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5884
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5888
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5892
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5896
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5960
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5964
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5968
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5976
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5980
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5984
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5987
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5989
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5993
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6009
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6017
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6021
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6025
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6029
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6041
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6045
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6053
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6093
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6097
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6101
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6105
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6109
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6113
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6117
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6121
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6125
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6129
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6133
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6137
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6141
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6145
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6149
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6153
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6157
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6161
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6165
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6169
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6177
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6181
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6185
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6189
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6193
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6197
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6201
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6215
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6223
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6259
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6264
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6273
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6278
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6283
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6287
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6291
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6295
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6299
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6307
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6311
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6314
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6315
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6317
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6321
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6325
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6328
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6339
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6346
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6355
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6356
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6360
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6362
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6366
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6372
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6376
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6380
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6386
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6390
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6394
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6398
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6402
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6406
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6410
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6414
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6418
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6425
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6428
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6430
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6433
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6435
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6438
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6440
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6443
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6445
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6448
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6450
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6453
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6455
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6458
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6460
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6464
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6467
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6468
		{
			return unimplemented(sqllex, "treat")
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6470
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6474
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6478
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6482
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6486
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6489
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6491
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6494
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6499
		{
			return unimplemented(sqllex, "within group")
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6500
		{
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6504
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6508
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6515
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6519
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6525
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6529
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6535
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6543
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6547
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6551
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6558
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6577
		{
			sqlVAL.str = ""
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6583
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6587
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6597
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6598
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6599
		{
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6602
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6603
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6609
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6610
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6611
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6612
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6613
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6624
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6628
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6634
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6640
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6646
		{
			sqlVAL.union.val = tree.Any
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6650
		{
			sqlVAL.union.val = tree.Some
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6654
		{
			sqlVAL.union.val = tree.All
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6659
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6660
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6661
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6662
		{
			sqlVAL.union.val = tree.Div
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6663
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6664
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6665
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6666
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6667
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6668
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6669
		{
			sqlVAL.union.val = tree.LT
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6670
		{
			sqlVAL.union.val = tree.GT
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6671
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6672
		{
			sqlVAL.union.val = tree.LE
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6673
		{
			sqlVAL.union.val = tree.GE
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6674
		{
			sqlVAL.union.val = tree.NE
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6678
		{
			sqlVAL.union.val = tree.Like
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6679
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6680
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6681
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6693
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6699
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6703
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6709
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6719
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6723
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6729
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6733
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6739
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6743
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6765
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6769
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6773
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6779
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6786
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6790
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6807
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6811
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6815
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6819
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6823
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6829
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6835
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6841
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6845
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6849
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6855
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6859
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6870
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6877
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6887
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6893
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6897
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6904
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6910
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6914
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6921
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6927
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6931
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6936
		{
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6937
		{
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6941
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6945
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6951
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6960
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6964
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6968
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6976
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6980
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6986
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6990
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6996
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7003
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see tree.TableNameWithIndex).
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7025
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7029
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7033
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7039
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7043
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7049
		{
			sqlVAL.union.val = sqlDollar[1].union.nameList()
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7053
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7060
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7064
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7068
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7072
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:7075
		{
			return unimplemented(sqllex, "func const")
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7077
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7081
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7084
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7086
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7090
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7094
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7101
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7105
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7114
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7125
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7135
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7231
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7238
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7242
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7246
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7260
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7264
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7268
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7281
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7293
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7297
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7301
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7315
		{
			sqlVAL.str = ""
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7321
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7325
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
